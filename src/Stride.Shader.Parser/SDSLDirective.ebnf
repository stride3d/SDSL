
IncrementDirectiveExpr ::=
    literal postfixUnaryOperator
    | Identifier postfixUnaryOperator
    | ParenDirectiveExpression postfixUnaryOperator 
    | prefixUnaryOperator Identifier - postfixUnaryOperator
    | prefixUnaryOperator ParenDirectiveExpression - postfixUnaryOperator


TermDirective ::=
    literal
    | (Identifier - Keywords)
    | ParenDirectiveExpression


MulDirective ::= 
    TermDirective - (TermDirective Spaces [*/%])
    | TermDirective Spaces Star Spaces MulDirective
    | TermDirective Spaces Div Spaces MulDirective
    | TermDirective Spaces Mod Spaces MulDirective
    
    

PIncExpression ::=
    (Identifier - Keywords) IncOperators


SumDirective ::=
    MulDirective - (MulDirective Spaces [+-])
    | MulDirective Spaces Plus Spaces SumDirective
    | MulDirective Spaces Minus Spaces SumDirective
    

TestDirective ::= 
    SumDirective - (SumDirective Spaces [<>=!(])
    | SumDirective Spaces Less Spaces TestDirective 
    | SumDirective Spaces Greater Spaces TestDirective
    | SumDirective Spaces LessEqual Spaces TestDirective
    | SumDirective Spaces GreaterEqual Spaces TestDirective
    | SumDirective Spaces Equal Spaces TestDirective
    | SumDirective Spaces NotEqual Spaces TestDirective

MethodCallDirective ::= 
    Identifier LeftParen RightParen

directiveExpression ::=
    TestDirective
    | IncrementExpr - (MethodCallDirective)
    | MethodCallDirective

ParenDirectiveExpression ::=
    LeftParen Spaces directiveExpression Spaces RightParen

Hash ::= "#"
HashIf ::= Hash (If - [nd])
HashIfDef ::= Hash (IfDef - [n])
HashIfNDef ::= Hash IfNDef
HashElse ::= Hash Else
HashElif ::= Hash Elif
HashEndIf ::= Hash EndIf

EndOfDirective ::= WS* (Eol | Eof)

directive ::=
    (
        ifDirective 
        | ifDefDirective
        | ifNDefDirective
        | elseDirective
        | elifDirective
    ) EndOfDirective
    
ifDirective ::= HashIf WS+ directiveExpression


ifDefDirective ::= HashIfDef WS+ Identifier


ifNDefDirective ::= HashIfNDef WS+ Identifier


elseDirective ::= HashElse


elifDirective ::= HashElif WS+ directiveExpression


endIfDirective ::= HashEndIf


/*objectLikeDefineDirective ::=   Hash Define identifierOrKeyword (EndOfDirective)* EndOfDirective*/
