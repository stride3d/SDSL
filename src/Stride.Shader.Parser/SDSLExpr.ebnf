compilationUnit ::=    topLevelDeclaration* EOF


topLevelDeclaration ::=
   classDefinition
	|   interfaceDefinition
	|   variableDeclarationStatement
	|   structDefinition
	|   constantBuffer
	|   functionDefinition
	|   functionDeclaration


classDefinition ::=   Class Identifier baseList? 
	    LeftBrace classMemberDeclaration* RightBrace
		Semi


baseList ::=   Colon Identifier


classMemberDeclaration ::=
   variableDeclarationStatement
	|   functionDefinition
	|   functionDeclaration


constantBuffer ::=   CBuffer Identifier registerAllocation?
	    LeftBrace (variableDeclarationStatement)+ RightBrace
		Semi?


variableDeclarationStatement ::=   variableDeclaration Semi


functionDefinition ::=   attribute* functionType (Identifier ColonColon)? Identifier
	    LeftParen functionParams? RightParen
		semantic? block Semi?


functionDeclaration ::=   attribute* functionType Identifier
	    LeftParen functionParams? RightParen
		semantic? Semi


functionType ::=
   type
	|   Void


functionParams ::=   functionParam (Comma functionParam)*


functionParam ::=   storageFlags type variableDeclarator


interfaceDefinition ::=   Interface Identifier
	    LeftBrace functionDeclaration* RightBrace
		Semi


structDefinition ::=   Struct Identifier
	    LeftBrace (variableDeclarationStatement)+ RightBrace
		Semi


semantic ::= Colon Identifier



attributeArguments ::=   literalExpr (Comma literalExpr)*


attributeArgumentList ::=   LeftParen attributeArguments RightParen


attribute ::=   LeftBracket Identifier attributeArgumentList? RightBracket



block ::=   LeftBrace statement* RightBrace


indentedEmbeddedStatement ::=   embeddedStatement 	|   LeftBrace block


statement ::=
   localDeclarationStatement
	|   embeddedStatement
	|   classDefinition
	|   interfaceDefinition
	|   structDefinition


localDeclarationStatement ::=   variableDeclaration Semi


forInitializer ::=   variableDeclaration            
	|   expression (Comma expression)* 


forIncrementors ::=   expression (Comma expression)*


switchLabel ::=   Case expression Colon 
	|   Default Colon           


switchSection ::=   switchLabel+ statement+


embeddedStatement ::=   Semi 
	|   block 
	|   expression Semi 

    |   attribute* If LeftParen expression RightParen indentedEmbeddedStatement elseClause? 
	|   attribute* Switch LeftParen expression RightParen LeftBrace switchSection* RightBrace     
	
    |   attribute* While LeftParen expression RightParen indentedEmbeddedStatement 
	|   attribute* Do indentedEmbeddedStatement While LeftParen expression RightParen Semi 
	|   attribute* For LeftParen forInitializer? Semi expression? Semi forIncrementors? RightParen indentedEmbeddedStatement 

    |   Break Semi 
	|   Continue Semi 
	|   Discard Semi 
	|   Return expression? Semi 


elseClause ::=   Else indentedEmbeddedStatement

AccessorChain ::= userDefinedNames (Dot userDefinedNames)*
MethodCall ::= userDefinedNames argumentList

TermExpression ::=
    literal
    /*| Sign? userDefinedNames - (AccessorChain | MethodCall)
	| Sign? (AccessorChain - MethodCall)
	| Sign? MethodCall
	| Sign? scalarOrVectorOrMatrixType argumentList
    | ParenExpression*/

Multiply ::= TermExpression [ \t#xA]* "*" [ \t#xA]* MulExpression
Divide ::= TermExpression [ \t#xA]* "/" [ \t#xA]* MulExpression
Modulo ::= TermExpression [ \t#xA]* "%" [ \t#xA]* MulExpression


MulExpression ::= 
	TermExpression - (Multiply | Divide | Modulo)
    | Multiply
	| Divide
	| Modulo

Add ::= MulExpression [ \t#xA]* "+" [ \t#xA]* SumExpression
Subtract ::= MulExpression [ \t#xA]* "-" [ \t#xA]* SumExpression

SumExpression ::=
    MulExpression - (Add | Subtract)
    | Add
    | Subtract

LessThan ::= SumExpression [ \t#xA]* "<" [ \t#xA]* TestExpression
GreaterThan ::= SumExpression [ \t#xA]* ">" [ \t#xA]* TestExpression
LessEqualThan ::= SumExpression [ \t#xA]* "<=" [ \t#xA]* TestExpression
GreaterEqualThan ::= SumExpression [ \t#xA]* ">=" [ \t#xA]* TestExpression
Equals ::= SumExpression [ \t#xA]* "==" [ \t#xA]* TestExpression
Different ::= SumExpression [ \t#xA]* "!=" [ \t#xA]* TestExpression


TestExpression ::= 
    SumExpression - (SumExpression [ \t#xA]* [<>=!(])
    | LessThan
	| GreaterThan
	| LessEqualThan
	| GreaterEqualThan
	| Equals
	| Different

expression ::=   
    SumExpression                                                                              
/*    |   LeftParen expression RightParen                           
    |   LeftParen type (arrayRankSpecifier)* RightParen expression 
    |   (Identifier | ParenExpression) Dot Identifier  */

ParenExpression ::= LeftParen [ \t#xA]* expression [ \t#xA]* RightParen
/*expression ::=   
    literalExpr                                                                              
	|   Identifier                                                                               
    |   LeftParen expression RightParen                           
    |   LeftParen type (arrayRankSpecifier)* RightParen expression 
    |   expression Dot Identifier                                           
	|   scalarOrVectorOrMatrixType argumentList                                                  
    |   expression argumentList                                                             
    |   expression LeftBracket expression RightBracket       
    |   expression postfixUnaryOperator                                            
    |   prefixUnaryOperator expression                                             
    |   expression binaryOperator expression                                 
	|   expression Question expression Colon expression 
    |   right expression assignmentOperator expression               

*/

literalExpr ::= literal


postfixUnaryOperator ::=
    PlusPlus
	|   MinusMinus


prefixUnaryOperator ::=
    Plus - PlusPlus
	|   Minus - MinusMinus
	|   Not
	|   Tilde
	|   PlusPlus
	|   MinusMinus


binaryOperator ::=
    calcOperators
    | testOperators

testOperators ::=
    Less - LessEqual
	| Greater - GreaterEqual
	| LessEqual
	| GreaterEqual
    | Equal
	| NotEqual
    | And - AndAnd
	| Caret
	| Or - OrOr
	| AndAnd
	| OrOr

calcOperators ::=
    Star
	| Div
	| Mod
	| Plus
	| Minus
    | LeftShift
	| RightShift
	
	


assignmentOperator ::=
    Assign
	|   StarAssign
	|   DivAssign
	|   ModAssign
	|   PlusAssign
	|   MinusAssign
	|   LeftShiftAssign
	|   RightShiftAssign
	|   AndAssign
	|   XorAssign
	|   OrAssign


argumentList ::= LeftParen [ \t#xA]* arguments? [ \t#xA]* RightParen


arguments ::=   expression ( [ \t#xA]* Comma [ \t#xA]* expression)*


variableDeclaration ::=   storageFlags [ \n]+ type [ \n]+ variableDeclarators


variableDeclarators ::=   variableDeclarator /*(Comma variableDeclarator)**/


variableDeclarator ::=
	(Identifier) - (Identifier [ \t#xA]* [:])
	| Identifier [ \t#xA]* variableDeclaratorSupplement

variableDeclaratorSupplement ::=
	(arrayRankSpecifier)+
	| packOffsetNode
	| registerAllocation
	| semantic
	| variableInitializer


arrayRankSpecifier ::= 
	LeftBracket expression? RightBracket

/* ": packoffset(my_var.value) " */
packOffsetNode ::=   
		Colon Packoffset LeftParen
	    Identifier (Dot Identifier)?
		RightParen


storageFlags ::=   
    storageFlag*


storageFlag ::=
    Constant
    |   RowMajor
	|   ColumnMajor
    |   Extern
	|   Precise
	|   Shared
	|   Groupshared
	|   Static
	|   Uniform
	|   Volatile
    |   Linear
	|   Centroid
	|   Nointerpolation
	|   Noperspective
	|   Sample
    |   In
	|   Out
	|   Inout
    |   Point
	|   Line_
	|   Triangle
	|   LineAdj
	|   TriangleAdj


type ::=
    predefinedType
	|   userDefinedType


predefinedType ::=
   
    bufferPredefinedType
	|   byteAddressBufferPredefinedType
	|   inlineStructPredefinedType
	|   patchPredefinedType
	|   matrixType
	|   genericMatrixPredefinedType
	|   samplerStatePredefinedType
	|   scalarType
	|   streamOutputPredefinedType
	|   structuredBufferPredefinedType
	|   texturePredefinedType
	|   genericTexturePredefinedType
	|   msTexturePredefinedType
	|   vectorType
	|   genericVectorType


bufferPredefinedType ::=   bufferType Less scalarOrVectorType Greater


bufferType ::=
   
    Buffer
	|   RWBuffer


byteAddressBufferPredefinedType ::=
   
    byteAddressBufferType


byteAddressBufferType ::=
   
    ByteAddressBuffer
	|   RWByteAddressBuffer


inlineStructPredefinedType ::=   
    Struct LeftBrace
	    (variableDeclarationStatement)+
    RightBrace


patchPredefinedType ::=   
    patchType Less
	    userDefinedType Comma IntegerLiteral
		Greater


patchType ::=
   
    InputPatch
	|   OutputPatch


samplerStatePredefinedType ::=
   
    Sampler
	|   SamplerState
	|   SamplerComparisonState


scalarType ::=
   
    Bool
	|   Int
	|   Unsigned Int
	|   Dword
	|   Uint
	|   Half
	|   Float
	|   Double


streamOutputPredefinedType ::=   
    streamOutputObjectType Less type Greater


streamOutputObjectType ::=
    PointStream
	|   LineStream
	|   TriangleStream


structuredBufferPredefinedType ::=   
    structuredBufferName Less scalarOrVectorOrUserDefinedType Greater


structuredBufferName ::=
    AppendStructuredBuffer
	|   ConsumeStructuredBuffer
	|   RWStructuredBuffer
	|   StructuredBuffer


textureType ::=   
    TextureTypes


texturePredefinedType ::=
   textureType


genericTexturePredefinedType ::=   
	textureType Less scalarOrVectorType Greater


textureTypeMS ::=   
	Texture2DMS
	|   Texture2DMSArray


msTexturePredefinedType ::=   textureTypeMS Less scalarOrVectorType Comma IntegerLiteral Greater


vectorType ::=
    Vector
	| UintVec
    | IntVec
    | HalfVec
    | FloatVec
    | DoubleVec
    | BoolVec


genericVectorType ::=   
    Vector Less scalarType Comma
	    IntegerLiteral Greater


scalarOrVectorType ::=
   scalarType
	|   vectorType


scalarOrVectorOrUserDefinedType ::=
   scalarType
	|   vectorType
	|   userDefinedType


scalarOrVectorOrMatrixType ::=
   scalarType
	|   vectorType
	|   matrixType

matrixType ::=
    Matrix
    | BoolMat
    | UintMat
    | IntMat
    | HalfMat
    | FloatMat
    | DoubleMat

genericMatrixPredefinedType ::=   Matrix Less scalarType Comma
	    IntegerLiteral Comma IntegerLiteral
		Greater


userDefinedType ::=
   Identifier

userDefinedNames ::=
	Identifier - Keywords

registerAllocation ::=   Colon Register LeftParen Identifier RightParen


variableInitializer ::=   
	Assign standardVariableInitializer
	|   LeftBrace samplerStateProperty* RightBrace 


standardVariableInitializer ::=   
	LeftBrace arrayElementInitializers RightBrace 
	|   expression 


arrayElementInitializers ::=   standardVariableInitializer (Comma standardVariableInitializer)* Comma?


samplerStateProperty ::=   Identifier Assign expression Semi

identifierOrKeyword ::=
	Identifier - Keywords
    | Keywords