id := ? Terminals.Letter ?, {[? Terminals.LetterOrDigit ? | "_"]};
eol = ? Terminals.Eol ?;

eols = [eol] | {eol};

eof = ? Terminals.End ?;

any_space = {wso | eols};


(* STRING = ? Terminals.LetterOrDigit ?,{? Terminals.LetterOrDigit ?}; *)

assign_op =
    "="
    | "+="
    | "-="
    | "/="
    | "*="
    | "&="
    | "|="
    | "~="
;


zero = "0";

digit1 = "1" | "2" | "3" | "4" | "5" | "6" | "7" | "8" | "9" ;

digit = zero | digit1;

INT = zero | (digit1, {digit});

ws = ? Terminals.WhiteSpace ?, {? Terminals.WhiteSpace ?};

wso = [ws];

integer = zero | (digit1, {digit});

term := 
    id
    | integer
    | paren_expr
    ;

mul = 
    term
    | mul, '*', term
    | mul, '/', term
    | mul, '%', term
;

sum = 
    mul
    | sum, '++'
    | sum, '+', mul
    | sum, '-', mul
;

primary_value = id | sum;

test
   = sum
   | sum, '<', sum
   | sum, '>', sum
   | sum, '<=', sum
   | sum, '>=', sum
   ;

inc_op = "++" | "--";
pfix_inc = primary_value, inc_op;
ifix_inc = inc_op, primary_value;


expr := 
    test 
    | id, assign_op, expr
    | "(",id,")", expr
    | id, "[", expr, "]"
    | (id | paren_expr), ".", id
    | (id | paren_expr), "++"
    ;

paren_expr := '(', expr, ')';

statement :=
    'if', paren_expr, statement
    | 'if', paren_expr, statement, 'else', statement
    | 'while', paren_expr, statement
    | 'do', statement, 'while', paren_expr, ';'
    | '{', {statement}, '}'
    | expr, ';'
    | ';'
    ;

shader_class = 
    "shader", any_space, id, any_space,
        "{", any_space, {statement}, any_space, "}";


shader := expr;