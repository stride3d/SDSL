(* := is an extension to define a literal with no whitespace between repeats and sequences *)
ws := {? Terminals.WhiteSpace ?};
eol := ? Terminals.Eol ?, {? Terminals.Eol ?};
eof := ? Terminals.End ?;

letter = ? Terminals.Letter ?, {? Terminals.Letter ?};
letter_or_digit = ? Terminals.LetterOrDigit ?, {? Terminals.LetterOrDigit ?};

identifier := letter, {"_", letter_or_digit};

unary_operator := 
    "&"
    | "*"
    | "+"
    | "-"
    | "~"
    | "!";

assignment_operator :=
    "="
    | "*="
    | "/="
    | "%="
    | "+="
    | "-="
    | "<<="
    | ">>="
    | "&="
    | "^="
    | "|=";

integer_cst = ? Terminals.Digit ?, {? Terminals.Digit ?};
float_cst = 
    integer_cst, "f" 
    | integer_cst, ".", integer_cst
    | integer_cst, ".", integer_cst, "f";

bool_cst = "true" | "false";

constants = 
    integer_cst 
    | float_cst 
    | bool_cst;

conditional_expression :=
    logical_or_expression
    | logical_or_expression, '?', expression, ':', conditional_expression;

logical_or_expression := logical_and_expression
                        | logical_or_expression, "||", logical_and_expression;

logical_and_expression := inclusive_or_expression
                           | logical_and_expression, "&&", inclusive_or_expression;

inclusive_or_expression := exclusive_or_expression
                            | inclusive_or_expression, "|", exclusive_or_expression;

exclusive_or_expression := and_expression
                            | exclusive_or_expression, "^", and_expression;

and_expression := equality_expression
                   | and_expression, "&", equality_expression;

equality_expression := relational_expression
                        | equality_expression, "==", relational_expression
                        | equality_expression, "!=", relational_expression;

relational_expression := shift_expression
                          | relational_expression, "<", shift_expression
                          | relational_expression, ">", shift_expression
                          | relational_expression, "<=", shift_expression
                          | relational_expression, ">=", shift_expression;

shift_expression := additive_expression
                     | shift_expression, "<<", additive_expression
                     | shift_expression, ">>", additive_expression;

additive_expression := multiplicative_expression
                        | additive_expression, "+", multiplicative_expression
                        | additive_expression, "-", multiplicative_expression;

multiplicative_expression := cast_expression
                              | multiplicative_expression, "*", cast_expression
                              | multiplicative_expression, "/", cast_expression
                              | multiplicative_expression, "%", cast_expression;

cast_expression := unary_expression
                    | "(", type_name, ")", cast_expression;


unary_expression := 
    postfix_expression
    | '++', unary_expression
    | '--', unary_expression
    | unary_operator, cast_expression
    | 'sizeof', unary_expression
    | 'sizeof', type_name;

assignment_expression :=
    conditional_expression
    | unary_expression, assignment_operator, assignment_expression;

expression := 
    assignment_expression
    | expression, assignment_expression;



primary_expression := identifier | constants;

postfix_expression := 
    primary_expression
    | postfix_expression, "[", expression, "]"
    | postfix_expression, "(", {assignment_expression}, ")"
    | postfix_expression, ".", identifier
    | postfix_expression, "->", identifier
    | postfix_expression, "++"
    | postfix_expression, "--";

expression_statement := {expression}, ";";

labeled_statement := identifier, ":", statement
                    | "case", constant-expression, ":", statement
                    | "default", ":", statement;

compound_statement := "{", {[declaration | statement]}, "}";

selection_statement := "if", "(", expression, ")", statement
                        | "if", "(", expression, ")", statement, "else", statement
                        | "switch", "(", expression,")", statement;

iteration_statement := "while", "(", expression, ")", statement
                        | "do", statement, "while", "(", expression, ")" 
                        | "for", "(", {expression}, ";", {expression}, ";", {expression}, ")", statement;

jump_statement := "goto", identifier, ";"
                   | "continue", ";"
                   | "break", ";"
                   | "return", {expression} ;

statement := labeled_statement
            | expression_statement
            | compound_statement
            | selection_statement
            | iteration_statement
            | jump_statement;

statements := {statement};

block := "{", [eol], [ws], statements, [eol], [ws], "}";

(* grammar = ws, "shader", identifier, block; *)
grammar := constants;