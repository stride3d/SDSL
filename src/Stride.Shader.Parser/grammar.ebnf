id ::= ?Terminals.Letter? (?Terminals.LetterOrDigit? | "_")*
eol ::= ? Terminals.Eol ?

eols ::= eol*

eof ::= ? Terminals.End ?

any_space ::= (wso | eols)*
one_space ::= (wso | eols)+

assign_op ::=
    "="
    | "+="
    | "-="
    | "/="
    | "*="
    | "&="
    | "|="
    | "~="


integer ::= "0" | ([0-9] [1-9]*)
float ::= 
    (integer "." [0-9] [0-9]*)
    | (integer "f"?)

ws ::= (? Terminals.WhiteSpace ?)*

wso ::= ws*

term ::= 
    id
    | (integer - float)
    | float
    | paren_expr

mul ::= 
    term
    | mul '*' term
    | mul '/' term
    | mul '%' term


sum ::= 
    mul
    | sum '++'
    | sum '+' mul
    | sum '-' mul

primary_value ::= id | sum

test ::= 
    sum
    | sum '<' sum
    | sum '>' sum
    | sum '<=' sum
    | sum '>=' sum
   

inc_op ::= "++" | "--"
pfix_inc ::= primary_value inc_op
ifix_inc ::= inc_op primary_value

idx_accessor ::= id "[" expr "]"
accessor ::= (id | paren_expr) "." id
cast ::= "(" id ")" expr

assign ::= 
    id any_space assign_op any_space expr
    | accessor any_space assign_op any_space expr
    | cast any_space assign_op any_space expr
    | idx_accessor any_space assign_op any_space expr


expr ::= 
    (test - assign) 
/*    | (accessor - assign)
    | (idx_accessor - assign)
    | assign
    | (paren_expr - cast)
    | cast*/

paren_expr ::=  '(' expr ')'


typename ::= id

stage ::= "stage"
stream ::= "stream"

declaration ::= 
    ((stage | stream) one_space)?  typename one_space id any_space (assign_op any_space expr)?

stage_declaration ::= 
    stage one_space typename one_space id any_space (assign_op any_space expr)?

expression ::= 
    expr - declaration
    | declaration

statement ::=
    'if' paren_expr statement
    | 'if' paren_expr statement 'else' statement
    | 'while' paren_expr statement
    | 'do' statement 'while' paren_expr ';'
    | '{' any_space statement* any_space '}'
    | expression any_space ';'
    | ';'

c_buffer ::= 
    "c_buffer" one_space id any_space any_space "{" any_space (stage_declaration any_space";")* any_space "}"

shader_class ::= 
    "shader" one_space id any_space
        "{" 
        any_space 
        (
            (declaration ";" any_space)* - c_buffer 
            | (c_buffer)
        )*
        any_space 
        "}"


shader ::= shader_class