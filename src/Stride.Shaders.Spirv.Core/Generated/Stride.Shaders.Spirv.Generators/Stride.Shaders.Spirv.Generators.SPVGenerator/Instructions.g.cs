using static Spv.Specification;

namespace Stride.Shaders.Spirv.Core;
public ref struct OpNop : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpNop(RefInstruction instruction) => Inner = instruction;
    public OpNop(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpNop instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpNop instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpNop(Span<int> buffer) => new OpNop(buffer);
    public static implicit operator OpNop(Instruction instruction) => new OpNop(instruction.AsRef());
    public static implicit operator OpNop(RefInstruction instruction) => new OpNop(instruction);
}

public ref struct OpUndef : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpUndef(RefInstruction instruction) => Inner = instruction;
    public OpUndef(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUndef instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUndef instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUndef(Span<int> buffer) => new OpUndef(buffer);
    public static implicit operator OpUndef(Instruction instruction) => new OpUndef(instruction.AsRef());
    public static implicit operator OpUndef(RefInstruction instruction) => new OpUndef(instruction);
}

public ref struct OpSourceContinued : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralString ContinuedSource => Inner.GetOperand<LiteralString>("continuedSource") ?? default;

    public OpSourceContinued(RefInstruction instruction) => Inner = instruction;
    public OpSourceContinued(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSourceContinued instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSourceContinued instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSourceContinued(Span<int> buffer) => new OpSourceContinued(buffer);
    public static implicit operator OpSourceContinued(Instruction instruction) => new OpSourceContinued(instruction.AsRef());
    public static implicit operator OpSourceContinued(RefInstruction instruction) => new OpSourceContinued(instruction);
}

public ref struct OpSource : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public SourceLanguage SourceLanguage => Inner.GetEnumOperand<SourceLanguage>("sourcelanguage");
    public LiteralInteger Version => Inner.GetOperand<LiteralInteger>("version") ?? default;
    public IdRef File => Inner.GetOperand<IdRef>("file") ?? default;
    public LiteralString Source => Inner.GetOperand<LiteralString>("source") ?? default;

    public OpSource(RefInstruction instruction) => Inner = instruction;
    public OpSource(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSource instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSource instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSource(Span<int> buffer) => new OpSource(buffer);
    public static implicit operator OpSource(Instruction instruction) => new OpSource(instruction.AsRef());
    public static implicit operator OpSource(RefInstruction instruction) => new OpSource(instruction);
}

public ref struct OpSourceExtension : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralString Extension => Inner.GetOperand<LiteralString>("extension") ?? default;

    public OpSourceExtension(RefInstruction instruction) => Inner = instruction;
    public OpSourceExtension(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSourceExtension instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSourceExtension instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSourceExtension(Span<int> buffer) => new OpSourceExtension(buffer);
    public static implicit operator OpSourceExtension(Instruction instruction) => new OpSourceExtension(instruction.AsRef());
    public static implicit operator OpSourceExtension(RefInstruction instruction) => new OpSourceExtension(instruction);
}

public ref struct OpName : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public LiteralString Name => Inner.GetOperand<LiteralString>("name") ?? default;

    public OpName(RefInstruction instruction) => Inner = instruction;
    public OpName(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpName instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpName instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpName(Span<int> buffer) => new OpName(buffer);
    public static implicit operator OpName(Instruction instruction) => new OpName(instruction.AsRef());
    public static implicit operator OpName(RefInstruction instruction) => new OpName(instruction);
}

public ref struct OpMemberName : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Type => Inner.GetOperand<IdRef>("type") ?? default;
    public LiteralInteger Member => Inner.GetOperand<LiteralInteger>("member") ?? default;
    public LiteralString Name => Inner.GetOperand<LiteralString>("name") ?? default;

    public OpMemberName(RefInstruction instruction) => Inner = instruction;
    public OpMemberName(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemberName instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemberName instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemberName(Span<int> buffer) => new OpMemberName(buffer);
    public static implicit operator OpMemberName(Instruction instruction) => new OpMemberName(instruction.AsRef());
    public static implicit operator OpMemberName(RefInstruction instruction) => new OpMemberName(instruction);
}

public ref struct OpString : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString String => Inner.GetOperand<LiteralString>("value") ?? default;

    public OpString(RefInstruction instruction) => Inner = instruction;
    public OpString(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpString(Span<int> buffer) => new OpString(buffer);
    public static implicit operator OpString(Instruction instruction) => new OpString(instruction.AsRef());
    public static implicit operator OpString(RefInstruction instruction) => new OpString(instruction);
}

public ref struct OpLine : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef File => Inner.GetOperand<IdRef>("file") ?? default;
    public LiteralInteger Line => Inner.GetOperand<LiteralInteger>("line") ?? default;
    public LiteralInteger Column => Inner.GetOperand<LiteralInteger>("column") ?? default;

    public OpLine(RefInstruction instruction) => Inner = instruction;
    public OpLine(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLine(Span<int> buffer) => new OpLine(buffer);
    public static implicit operator OpLine(Instruction instruction) => new OpLine(instruction.AsRef());
    public static implicit operator OpLine(RefInstruction instruction) => new OpLine(instruction);
}

public ref struct OpExtension : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralString Name => Inner.GetOperand<LiteralString>("name") ?? default;

    public OpExtension(RefInstruction instruction) => Inner = instruction;
    public OpExtension(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExtension instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExtension instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExtension(Span<int> buffer) => new OpExtension(buffer);
    public static implicit operator OpExtension(Instruction instruction) => new OpExtension(instruction.AsRef());
    public static implicit operator OpExtension(RefInstruction instruction) => new OpExtension(instruction);
}

public ref struct OpExtInstImport : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString Name => Inner.GetOperand<LiteralString>("name") ?? default;

    public OpExtInstImport(RefInstruction instruction) => Inner = instruction;
    public OpExtInstImport(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExtInstImport instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExtInstImport instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExtInstImport(Span<int> buffer) => new OpExtInstImport(buffer);
    public static implicit operator OpExtInstImport(Instruction instruction) => new OpExtInstImport(instruction.AsRef());
    public static implicit operator OpExtInstImport(RefInstruction instruction) => new OpExtInstImport(instruction);
}

public ref struct OpExtInst : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Set => Inner.GetOperand<IdRef>("set") ?? default;
    public LiteralInteger Instruction => Inner.GetOperand<LiteralInteger>("instruction") ?? default;
    public IdRef Operand1Operand2 => Inner.GetOperand<IdRef>("operand1Operand2") ?? default;

    public OpExtInst(RefInstruction instruction) => Inner = instruction;
    public OpExtInst(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExtInst instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExtInst instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExtInst(Span<int> buffer) => new OpExtInst(buffer);
    public static implicit operator OpExtInst(Instruction instruction) => new OpExtInst(instruction.AsRef());
    public static implicit operator OpExtInst(RefInstruction instruction) => new OpExtInst(instruction);
}

public ref struct OpMemoryModel : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public AddressingModel AddressingModel => Inner.GetEnumOperand<AddressingModel>("addressingmodel");
    public MemoryModel MemoryModel => Inner.GetEnumOperand<MemoryModel>("memorymodel");

    public OpMemoryModel(RefInstruction instruction) => Inner = instruction;
    public OpMemoryModel(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemoryModel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemoryModel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemoryModel(Span<int> buffer) => new OpMemoryModel(buffer);
    public static implicit operator OpMemoryModel(Instruction instruction) => new OpMemoryModel(instruction.AsRef());
    public static implicit operator OpMemoryModel(RefInstruction instruction) => new OpMemoryModel(instruction);
}

public ref struct OpEntryPoint : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public ExecutionModel ExecutionModel => Inner.GetEnumOperand<ExecutionModel>("executionmodel");
    public IdRef EntryPoint => Inner.GetOperand<IdRef>("entryPoint") ?? default;
    public LiteralString Name => Inner.GetOperand<LiteralString>("name") ?? default;
    public IdRef Interface => Inner.GetOperand<IdRef>("interface") ?? default;

    public OpEntryPoint(RefInstruction instruction) => Inner = instruction;
    public OpEntryPoint(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEntryPoint instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEntryPoint instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEntryPoint(Span<int> buffer) => new OpEntryPoint(buffer);
    public static implicit operator OpEntryPoint(Instruction instruction) => new OpEntryPoint(instruction.AsRef());
    public static implicit operator OpEntryPoint(RefInstruction instruction) => new OpEntryPoint(instruction);
}

public ref struct OpExecutionMode : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef EntryPoint => Inner.GetOperand<IdRef>("entryPoint") ?? default;
    public ExecutionMode Mode => Inner.GetEnumOperand<ExecutionMode>("mode");

    public OpExecutionMode(RefInstruction instruction) => Inner = instruction;
    public OpExecutionMode(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExecutionMode instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExecutionMode instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExecutionMode(Span<int> buffer) => new OpExecutionMode(buffer);
    public static implicit operator OpExecutionMode(Instruction instruction) => new OpExecutionMode(instruction.AsRef());
    public static implicit operator OpExecutionMode(RefInstruction instruction) => new OpExecutionMode(instruction);
}

public ref struct OpCapability : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public Capability Capability => Inner.GetEnumOperand<Capability>("capability");

    public OpCapability(RefInstruction instruction) => Inner = instruction;
    public OpCapability(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCapability instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCapability instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCapability(Span<int> buffer) => new OpCapability(buffer);
    public static implicit operator OpCapability(Instruction instruction) => new OpCapability(instruction.AsRef());
    public static implicit operator OpCapability(RefInstruction instruction) => new OpCapability(instruction);
}

public ref struct OpTypeVoid : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeVoid(RefInstruction instruction) => Inner = instruction;
    public OpTypeVoid(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeVoid instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeVoid instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeVoid(Span<int> buffer) => new OpTypeVoid(buffer);
    public static implicit operator OpTypeVoid(Instruction instruction) => new OpTypeVoid(instruction.AsRef());
    public static implicit operator OpTypeVoid(RefInstruction instruction) => new OpTypeVoid(instruction);
}

public ref struct OpTypeBool : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeBool(RefInstruction instruction) => Inner = instruction;
    public OpTypeBool(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeBool instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeBool instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeBool(Span<int> buffer) => new OpTypeBool(buffer);
    public static implicit operator OpTypeBool(Instruction instruction) => new OpTypeBool(instruction.AsRef());
    public static implicit operator OpTypeBool(RefInstruction instruction) => new OpTypeBool(instruction);
}

public ref struct OpTypeInt : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralInteger Width => Inner.GetOperand<LiteralInteger>("width") ?? default;
    public LiteralInteger Signedness => Inner.GetOperand<LiteralInteger>("signedness") ?? default;

    public OpTypeInt(RefInstruction instruction) => Inner = instruction;
    public OpTypeInt(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeInt instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeInt instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeInt(Span<int> buffer) => new OpTypeInt(buffer);
    public static implicit operator OpTypeInt(Instruction instruction) => new OpTypeInt(instruction.AsRef());
    public static implicit operator OpTypeInt(RefInstruction instruction) => new OpTypeInt(instruction);
}

public ref struct OpTypeFloat : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralInteger Width => Inner.GetOperand<LiteralInteger>("width") ?? default;
    public FPEncoding FloatingPointEncoding => Inner.GetEnumOperand<FPEncoding>("floatingPointEncoding");

    public OpTypeFloat(RefInstruction instruction) => Inner = instruction;
    public OpTypeFloat(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeFloat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeFloat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeFloat(Span<int> buffer) => new OpTypeFloat(buffer);
    public static implicit operator OpTypeFloat(Instruction instruction) => new OpTypeFloat(instruction.AsRef());
    public static implicit operator OpTypeFloat(RefInstruction instruction) => new OpTypeFloat(instruction);
}

public ref struct OpTypeVector : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ComponentType => Inner.GetOperand<IdRef>("componentType") ?? default;
    public LiteralInteger ComponentCount => Inner.GetOperand<LiteralInteger>("componentCount") ?? default;

    public OpTypeVector(RefInstruction instruction) => Inner = instruction;
    public OpTypeVector(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeVector instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeVector instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeVector(Span<int> buffer) => new OpTypeVector(buffer);
    public static implicit operator OpTypeVector(Instruction instruction) => new OpTypeVector(instruction.AsRef());
    public static implicit operator OpTypeVector(RefInstruction instruction) => new OpTypeVector(instruction);
}

public ref struct OpTypeMatrix : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ColumnType => Inner.GetOperand<IdRef>("columnType") ?? default;
    public LiteralInteger ColumnCount => Inner.GetOperand<LiteralInteger>("columnCount") ?? default;

    public OpTypeMatrix(RefInstruction instruction) => Inner = instruction;
    public OpTypeMatrix(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeMatrix(Span<int> buffer) => new OpTypeMatrix(buffer);
    public static implicit operator OpTypeMatrix(Instruction instruction) => new OpTypeMatrix(instruction.AsRef());
    public static implicit operator OpTypeMatrix(RefInstruction instruction) => new OpTypeMatrix(instruction);
}

public ref struct OpTypeImage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledType => Inner.GetOperand<IdRef>("sampledType") ?? default;
    public Dim Dim => Inner.GetEnumOperand<Dim>("dim");
    public LiteralInteger Depth => Inner.GetOperand<LiteralInteger>("depth") ?? default;
    public LiteralInteger Arrayed => Inner.GetOperand<LiteralInteger>("arrayed") ?? default;
    public LiteralInteger MS => Inner.GetOperand<LiteralInteger>("mS") ?? default;
    public LiteralInteger Sampled => Inner.GetOperand<LiteralInteger>("sampled") ?? default;
    public ImageFormat ImageFormat => Inner.GetEnumOperand<ImageFormat>("imageformat");
    public AccessQualifier AccessQualifier => Inner.GetEnumOperand<AccessQualifier>("accessqualifier");

    public OpTypeImage(RefInstruction instruction) => Inner = instruction;
    public OpTypeImage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeImage(Span<int> buffer) => new OpTypeImage(buffer);
    public static implicit operator OpTypeImage(Instruction instruction) => new OpTypeImage(instruction.AsRef());
    public static implicit operator OpTypeImage(RefInstruction instruction) => new OpTypeImage(instruction);
}

public ref struct OpTypeSampler : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeSampler(RefInstruction instruction) => Inner = instruction;
    public OpTypeSampler(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeSampler instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeSampler instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeSampler(Span<int> buffer) => new OpTypeSampler(buffer);
    public static implicit operator OpTypeSampler(Instruction instruction) => new OpTypeSampler(instruction.AsRef());
    public static implicit operator OpTypeSampler(RefInstruction instruction) => new OpTypeSampler(instruction);
}

public ref struct OpTypeSampledImage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ImageType => Inner.GetOperand<IdRef>("imageType") ?? default;

    public OpTypeSampledImage(RefInstruction instruction) => Inner = instruction;
    public OpTypeSampledImage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeSampledImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeSampledImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeSampledImage(Span<int> buffer) => new OpTypeSampledImage(buffer);
    public static implicit operator OpTypeSampledImage(Instruction instruction) => new OpTypeSampledImage(instruction.AsRef());
    public static implicit operator OpTypeSampledImage(RefInstruction instruction) => new OpTypeSampledImage(instruction);
}

public ref struct OpTypeArray : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ElementType => Inner.GetOperand<IdRef>("elementType") ?? default;
    public IdRef Length => Inner.GetOperand<IdRef>("length") ?? default;

    public OpTypeArray(RefInstruction instruction) => Inner = instruction;
    public OpTypeArray(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeArray instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeArray instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeArray(Span<int> buffer) => new OpTypeArray(buffer);
    public static implicit operator OpTypeArray(Instruction instruction) => new OpTypeArray(instruction.AsRef());
    public static implicit operator OpTypeArray(RefInstruction instruction) => new OpTypeArray(instruction);
}

public ref struct OpTypeRuntimeArray : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ElementType => Inner.GetOperand<IdRef>("elementType") ?? default;

    public OpTypeRuntimeArray(RefInstruction instruction) => Inner = instruction;
    public OpTypeRuntimeArray(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeRuntimeArray instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeRuntimeArray instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeRuntimeArray(Span<int> buffer) => new OpTypeRuntimeArray(buffer);
    public static implicit operator OpTypeRuntimeArray(Instruction instruction) => new OpTypeRuntimeArray(instruction.AsRef());
    public static implicit operator OpTypeRuntimeArray(RefInstruction instruction) => new OpTypeRuntimeArray(instruction);
}

public ref struct OpTypeStruct : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Member0typemember1type => Inner.GetOperand<IdRef>("member0typemember1type") ?? default;

    public OpTypeStruct(RefInstruction instruction) => Inner = instruction;
    public OpTypeStruct(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeStruct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeStruct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeStruct(Span<int> buffer) => new OpTypeStruct(buffer);
    public static implicit operator OpTypeStruct(Instruction instruction) => new OpTypeStruct(instruction.AsRef());
    public static implicit operator OpTypeStruct(RefInstruction instruction) => new OpTypeStruct(instruction);
}

public ref struct OpTypeOpaque : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString Thenameoftheopaquetype => Inner.GetOperand<LiteralString>("thenameoftheopaquetype") ?? default;

    public OpTypeOpaque(RefInstruction instruction) => Inner = instruction;
    public OpTypeOpaque(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeOpaque instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeOpaque instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeOpaque(Span<int> buffer) => new OpTypeOpaque(buffer);
    public static implicit operator OpTypeOpaque(Instruction instruction) => new OpTypeOpaque(instruction.AsRef());
    public static implicit operator OpTypeOpaque(RefInstruction instruction) => new OpTypeOpaque(instruction);
}

public ref struct OpTypePointer : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public StorageClass StorageClass => Inner.GetEnumOperand<StorageClass>("storageclass");
    public IdRef Type => Inner.GetOperand<IdRef>("type") ?? default;

    public OpTypePointer(RefInstruction instruction) => Inner = instruction;
    public OpTypePointer(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypePointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypePointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypePointer(Span<int> buffer) => new OpTypePointer(buffer);
    public static implicit operator OpTypePointer(Instruction instruction) => new OpTypePointer(instruction.AsRef());
    public static implicit operator OpTypePointer(RefInstruction instruction) => new OpTypePointer(instruction);
}

public ref struct OpTypeFunction : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ReturnType => Inner.GetOperand<IdRef>("returnType") ?? default;
    public IdRef Parameter0TypeParameter1Type => Inner.GetOperand<IdRef>("parameter0TypeParameter1Type") ?? default;

    public OpTypeFunction(RefInstruction instruction) => Inner = instruction;
    public OpTypeFunction(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeFunction instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeFunction instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeFunction(Span<int> buffer) => new OpTypeFunction(buffer);
    public static implicit operator OpTypeFunction(Instruction instruction) => new OpTypeFunction(instruction.AsRef());
    public static implicit operator OpTypeFunction(RefInstruction instruction) => new OpTypeFunction(instruction);
}

public ref struct OpTypeEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeEvent(RefInstruction instruction) => Inner = instruction;
    public OpTypeEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeEvent(Span<int> buffer) => new OpTypeEvent(buffer);
    public static implicit operator OpTypeEvent(Instruction instruction) => new OpTypeEvent(instruction.AsRef());
    public static implicit operator OpTypeEvent(RefInstruction instruction) => new OpTypeEvent(instruction);
}

public ref struct OpTypeDeviceEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeDeviceEvent(RefInstruction instruction) => Inner = instruction;
    public OpTypeDeviceEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeDeviceEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeDeviceEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeDeviceEvent(Span<int> buffer) => new OpTypeDeviceEvent(buffer);
    public static implicit operator OpTypeDeviceEvent(Instruction instruction) => new OpTypeDeviceEvent(instruction.AsRef());
    public static implicit operator OpTypeDeviceEvent(RefInstruction instruction) => new OpTypeDeviceEvent(instruction);
}

public ref struct OpTypeReserveId : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeReserveId(RefInstruction instruction) => Inner = instruction;
    public OpTypeReserveId(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeReserveId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeReserveId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeReserveId(Span<int> buffer) => new OpTypeReserveId(buffer);
    public static implicit operator OpTypeReserveId(Instruction instruction) => new OpTypeReserveId(instruction.AsRef());
    public static implicit operator OpTypeReserveId(RefInstruction instruction) => new OpTypeReserveId(instruction);
}

public ref struct OpTypeQueue : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeQueue(RefInstruction instruction) => Inner = instruction;
    public OpTypeQueue(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeQueue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeQueue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeQueue(Span<int> buffer) => new OpTypeQueue(buffer);
    public static implicit operator OpTypeQueue(Instruction instruction) => new OpTypeQueue(instruction.AsRef());
    public static implicit operator OpTypeQueue(RefInstruction instruction) => new OpTypeQueue(instruction);
}

public ref struct OpTypePipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public AccessQualifier Qualifier => Inner.GetEnumOperand<AccessQualifier>("qualifier");

    public OpTypePipe(RefInstruction instruction) => Inner = instruction;
    public OpTypePipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypePipe(Span<int> buffer) => new OpTypePipe(buffer);
    public static implicit operator OpTypePipe(Instruction instruction) => new OpTypePipe(instruction.AsRef());
    public static implicit operator OpTypePipe(RefInstruction instruction) => new OpTypePipe(instruction);
}

public ref struct OpTypeForwardPointer : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef PointerType => Inner.GetOperand<IdRef>("pointerType") ?? default;
    public StorageClass StorageClass => Inner.GetEnumOperand<StorageClass>("storageclass");

    public OpTypeForwardPointer(RefInstruction instruction) => Inner = instruction;
    public OpTypeForwardPointer(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeForwardPointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeForwardPointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeForwardPointer(Span<int> buffer) => new OpTypeForwardPointer(buffer);
    public static implicit operator OpTypeForwardPointer(Instruction instruction) => new OpTypeForwardPointer(instruction.AsRef());
    public static implicit operator OpTypeForwardPointer(RefInstruction instruction) => new OpTypeForwardPointer(instruction);
}

public ref struct OpConstantTrue : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpConstantTrue(RefInstruction instruction) => Inner = instruction;
    public OpConstantTrue(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantTrue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantTrue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantTrue(Span<int> buffer) => new OpConstantTrue(buffer);
    public static implicit operator OpConstantTrue(Instruction instruction) => new OpConstantTrue(instruction.AsRef());
    public static implicit operator OpConstantTrue(RefInstruction instruction) => new OpConstantTrue(instruction);
}

public ref struct OpConstantFalse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpConstantFalse(RefInstruction instruction) => Inner = instruction;
    public OpConstantFalse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantFalse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantFalse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantFalse(Span<int> buffer) => new OpConstantFalse(buffer);
    public static implicit operator OpConstantFalse(Instruction instruction) => new OpConstantFalse(instruction.AsRef());
    public static implicit operator OpConstantFalse(RefInstruction instruction) => new OpConstantFalse(instruction);
}

public ref struct OpConstant : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpConstant(RefInstruction instruction) => Inner = instruction;
    public OpConstant(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstant instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstant instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstant(Span<int> buffer) => new OpConstant(buffer);
    public static implicit operator OpConstant(Instruction instruction) => new OpConstant(instruction.AsRef());
    public static implicit operator OpConstant(RefInstruction instruction) => new OpConstant(instruction);
}

public ref struct OpConstantComposite : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpConstantComposite(RefInstruction instruction) => Inner = instruction;
    public OpConstantComposite(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantComposite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantComposite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantComposite(Span<int> buffer) => new OpConstantComposite(buffer);
    public static implicit operator OpConstantComposite(Instruction instruction) => new OpConstantComposite(instruction.AsRef());
    public static implicit operator OpConstantComposite(RefInstruction instruction) => new OpConstantComposite(instruction);
}

public ref struct OpConstantSampler : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public SamplerAddressingMode SamplerAddressingMode => Inner.GetEnumOperand<SamplerAddressingMode>("sampleraddressingmode");
    public LiteralInteger Param => Inner.GetOperand<LiteralInteger>("param") ?? default;
    public SamplerFilterMode SamplerFilterMode => Inner.GetEnumOperand<SamplerFilterMode>("samplerfiltermode");

    public OpConstantSampler(RefInstruction instruction) => Inner = instruction;
    public OpConstantSampler(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantSampler instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantSampler instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantSampler(Span<int> buffer) => new OpConstantSampler(buffer);
    public static implicit operator OpConstantSampler(Instruction instruction) => new OpConstantSampler(instruction.AsRef());
    public static implicit operator OpConstantSampler(RefInstruction instruction) => new OpConstantSampler(instruction);
}

public ref struct OpConstantNull : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpConstantNull(RefInstruction instruction) => Inner = instruction;
    public OpConstantNull(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantNull instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantNull instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantNull(Span<int> buffer) => new OpConstantNull(buffer);
    public static implicit operator OpConstantNull(Instruction instruction) => new OpConstantNull(instruction.AsRef());
    public static implicit operator OpConstantNull(RefInstruction instruction) => new OpConstantNull(instruction);
}

public ref struct OpSpecConstantTrue : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSpecConstantTrue(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantTrue(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantTrue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantTrue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantTrue(Span<int> buffer) => new OpSpecConstantTrue(buffer);
    public static implicit operator OpSpecConstantTrue(Instruction instruction) => new OpSpecConstantTrue(instruction.AsRef());
    public static implicit operator OpSpecConstantTrue(RefInstruction instruction) => new OpSpecConstantTrue(instruction);
}

public ref struct OpSpecConstantFalse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSpecConstantFalse(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantFalse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantFalse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantFalse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantFalse(Span<int> buffer) => new OpSpecConstantFalse(buffer);
    public static implicit operator OpSpecConstantFalse(Instruction instruction) => new OpSpecConstantFalse(instruction.AsRef());
    public static implicit operator OpSpecConstantFalse(RefInstruction instruction) => new OpSpecConstantFalse(instruction);
}

public ref struct OpSpecConstant : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSpecConstant(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstant(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstant instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstant instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstant(Span<int> buffer) => new OpSpecConstant(buffer);
    public static implicit operator OpSpecConstant(Instruction instruction) => new OpSpecConstant(instruction.AsRef());
    public static implicit operator OpSpecConstant(RefInstruction instruction) => new OpSpecConstant(instruction);
}

public ref struct OpSpecConstantComposite : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpSpecConstantComposite(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantComposite(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantComposite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantComposite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantComposite(Span<int> buffer) => new OpSpecConstantComposite(buffer);
    public static implicit operator OpSpecConstantComposite(Instruction instruction) => new OpSpecConstantComposite(instruction.AsRef());
    public static implicit operator OpSpecConstantComposite(RefInstruction instruction) => new OpSpecConstantComposite(instruction);
}

public ref struct OpSpecConstantOp : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralInteger Opcode => Inner.GetOperand<LiteralInteger>("opcode") ?? default;

    public OpSpecConstantOp(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantOp(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantOp instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantOp instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantOp(Span<int> buffer) => new OpSpecConstantOp(buffer);
    public static implicit operator OpSpecConstantOp(Instruction instruction) => new OpSpecConstantOp(instruction.AsRef());
    public static implicit operator OpSpecConstantOp(RefInstruction instruction) => new OpSpecConstantOp(instruction);
}

public ref struct OpFunction : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public FunctionControlMask FunctionControl => Inner.GetEnumOperand<FunctionControlMask>("functioncontrol");
    public IdRef FunctionType => Inner.GetOperand<IdRef>("functionType") ?? default;

    public OpFunction(RefInstruction instruction) => Inner = instruction;
    public OpFunction(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFunction instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFunction instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFunction(Span<int> buffer) => new OpFunction(buffer);
    public static implicit operator OpFunction(Instruction instruction) => new OpFunction(instruction.AsRef());
    public static implicit operator OpFunction(RefInstruction instruction) => new OpFunction(instruction);
}

public ref struct OpFunctionParameter : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpFunctionParameter(RefInstruction instruction) => Inner = instruction;
    public OpFunctionParameter(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFunctionParameter instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFunctionParameter instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFunctionParameter(Span<int> buffer) => new OpFunctionParameter(buffer);
    public static implicit operator OpFunctionParameter(Instruction instruction) => new OpFunctionParameter(instruction.AsRef());
    public static implicit operator OpFunctionParameter(RefInstruction instruction) => new OpFunctionParameter(instruction);
}

public ref struct OpFunctionEnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpFunctionEnd(RefInstruction instruction) => Inner = instruction;
    public OpFunctionEnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFunctionEnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFunctionEnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFunctionEnd(Span<int> buffer) => new OpFunctionEnd(buffer);
    public static implicit operator OpFunctionEnd(Instruction instruction) => new OpFunctionEnd(instruction.AsRef());
    public static implicit operator OpFunctionEnd(RefInstruction instruction) => new OpFunctionEnd(instruction);
}

public ref struct OpFunctionCall : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Function => Inner.GetOperand<IdRef>("function") ?? default;
    public IdRef Argument0Argument1 => Inner.GetOperand<IdRef>("argument0Argument1") ?? default;

    public OpFunctionCall(RefInstruction instruction) => Inner = instruction;
    public OpFunctionCall(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFunctionCall instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFunctionCall instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFunctionCall(Span<int> buffer) => new OpFunctionCall(buffer);
    public static implicit operator OpFunctionCall(Instruction instruction) => new OpFunctionCall(instruction.AsRef());
    public static implicit operator OpFunctionCall(RefInstruction instruction) => new OpFunctionCall(instruction);
}

public ref struct OpVariable : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public StorageClass StorageClass => Inner.GetEnumOperand<StorageClass>("storageclass");
    public IdRef Initializer => Inner.GetOperand<IdRef>("initializer") ?? default;

    public OpVariable(RefInstruction instruction) => Inner = instruction;
    public OpVariable(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVariable instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVariable instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVariable(Span<int> buffer) => new OpVariable(buffer);
    public static implicit operator OpVariable(Instruction instruction) => new OpVariable(instruction.AsRef());
    public static implicit operator OpVariable(RefInstruction instruction) => new OpVariable(instruction);
}

public ref struct OpImageTexelPointer : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Sample => Inner.GetOperand<IdRef>("sample") ?? default;

    public OpImageTexelPointer(RefInstruction instruction) => Inner = instruction;
    public OpImageTexelPointer(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageTexelPointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageTexelPointer instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageTexelPointer(Span<int> buffer) => new OpImageTexelPointer(buffer);
    public static implicit operator OpImageTexelPointer(Instruction instruction) => new OpImageTexelPointer(instruction.AsRef());
    public static implicit operator OpImageTexelPointer(RefInstruction instruction) => new OpImageTexelPointer(instruction);
}

public ref struct OpLoad : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public MemoryAccessMask MemoryAccess => Inner.GetEnumOperand<MemoryAccessMask>("memoryaccess");

    public OpLoad(RefInstruction instruction) => Inner = instruction;
    public OpLoad(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLoad instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLoad instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLoad(Span<int> buffer) => new OpLoad(buffer);
    public static implicit operator OpLoad(Instruction instruction) => new OpLoad(instruction.AsRef());
    public static implicit operator OpLoad(RefInstruction instruction) => new OpLoad(instruction);
}

public ref struct OpStore : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public MemoryAccessMask MemoryAccess => Inner.GetEnumOperand<MemoryAccessMask>("memoryaccess");

    public OpStore(RefInstruction instruction) => Inner = instruction;
    public OpStore(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpStore instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpStore instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpStore(Span<int> buffer) => new OpStore(buffer);
    public static implicit operator OpStore(Instruction instruction) => new OpStore(instruction.AsRef());
    public static implicit operator OpStore(RefInstruction instruction) => new OpStore(instruction);
}

public ref struct OpAccessChain : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpAccessChain(RefInstruction instruction) => Inner = instruction;
    public OpAccessChain(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAccessChain(Span<int> buffer) => new OpAccessChain(buffer);
    public static implicit operator OpAccessChain(Instruction instruction) => new OpAccessChain(instruction.AsRef());
    public static implicit operator OpAccessChain(RefInstruction instruction) => new OpAccessChain(instruction);
}

public ref struct OpInBoundsAccessChain : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpInBoundsAccessChain(RefInstruction instruction) => Inner = instruction;
    public OpInBoundsAccessChain(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpInBoundsAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpInBoundsAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpInBoundsAccessChain(Span<int> buffer) => new OpInBoundsAccessChain(buffer);
    public static implicit operator OpInBoundsAccessChain(Instruction instruction) => new OpInBoundsAccessChain(instruction.AsRef());
    public static implicit operator OpInBoundsAccessChain(RefInstruction instruction) => new OpInBoundsAccessChain(instruction);
}

public ref struct OpPtrAccessChain : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Element => Inner.GetOperand<IdRef>("element") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpPtrAccessChain(RefInstruction instruction) => Inner = instruction;
    public OpPtrAccessChain(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrAccessChain(Span<int> buffer) => new OpPtrAccessChain(buffer);
    public static implicit operator OpPtrAccessChain(Instruction instruction) => new OpPtrAccessChain(instruction.AsRef());
    public static implicit operator OpPtrAccessChain(RefInstruction instruction) => new OpPtrAccessChain(instruction);
}

public ref struct OpArrayLength : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Structure => Inner.GetOperand<IdRef>("structure") ?? default;
    public LiteralInteger Arraymember => Inner.GetOperand<LiteralInteger>("arraymember") ?? default;

    public OpArrayLength(RefInstruction instruction) => Inner = instruction;
    public OpArrayLength(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArrayLength instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArrayLength instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArrayLength(Span<int> buffer) => new OpArrayLength(buffer);
    public static implicit operator OpArrayLength(Instruction instruction) => new OpArrayLength(instruction.AsRef());
    public static implicit operator OpArrayLength(RefInstruction instruction) => new OpArrayLength(instruction);
}

public ref struct OpGenericPtrMemSemantics : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpGenericPtrMemSemantics(RefInstruction instruction) => Inner = instruction;
    public OpGenericPtrMemSemantics(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGenericPtrMemSemantics instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGenericPtrMemSemantics instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGenericPtrMemSemantics(Span<int> buffer) => new OpGenericPtrMemSemantics(buffer);
    public static implicit operator OpGenericPtrMemSemantics(Instruction instruction) => new OpGenericPtrMemSemantics(instruction.AsRef());
    public static implicit operator OpGenericPtrMemSemantics(RefInstruction instruction) => new OpGenericPtrMemSemantics(instruction);
}

public ref struct OpInBoundsPtrAccessChain : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Element => Inner.GetOperand<IdRef>("element") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpInBoundsPtrAccessChain(RefInstruction instruction) => Inner = instruction;
    public OpInBoundsPtrAccessChain(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpInBoundsPtrAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpInBoundsPtrAccessChain instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpInBoundsPtrAccessChain(Span<int> buffer) => new OpInBoundsPtrAccessChain(buffer);
    public static implicit operator OpInBoundsPtrAccessChain(Instruction instruction) => new OpInBoundsPtrAccessChain(instruction.AsRef());
    public static implicit operator OpInBoundsPtrAccessChain(RefInstruction instruction) => new OpInBoundsPtrAccessChain(instruction);
}

public ref struct OpDecorate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public Decoration Decoration => Inner.GetEnumOperand<Decoration>("decoration");

    public OpDecorate(RefInstruction instruction) => Inner = instruction;
    public OpDecorate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDecorate(Span<int> buffer) => new OpDecorate(buffer);
    public static implicit operator OpDecorate(Instruction instruction) => new OpDecorate(instruction.AsRef());
    public static implicit operator OpDecorate(RefInstruction instruction) => new OpDecorate(instruction);
}

public ref struct OpMemberDecorate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef StructureType => Inner.GetOperand<IdRef>("structureType") ?? default;
    public LiteralInteger Member => Inner.GetOperand<LiteralInteger>("member") ?? default;
    public Decoration Decoration => Inner.GetEnumOperand<Decoration>("decoration");

    public OpMemberDecorate(RefInstruction instruction) => Inner = instruction;
    public OpMemberDecorate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemberDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemberDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemberDecorate(Span<int> buffer) => new OpMemberDecorate(buffer);
    public static implicit operator OpMemberDecorate(Instruction instruction) => new OpMemberDecorate(instruction.AsRef());
    public static implicit operator OpMemberDecorate(RefInstruction instruction) => new OpMemberDecorate(instruction);
}

public ref struct OpDecorationGroup : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpDecorationGroup(RefInstruction instruction) => Inner = instruction;
    public OpDecorationGroup(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDecorationGroup instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDecorationGroup instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDecorationGroup(Span<int> buffer) => new OpDecorationGroup(buffer);
    public static implicit operator OpDecorationGroup(Instruction instruction) => new OpDecorationGroup(instruction.AsRef());
    public static implicit operator OpDecorationGroup(RefInstruction instruction) => new OpDecorationGroup(instruction);
}

public ref struct OpGroupDecorate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef DecorationGroup => Inner.GetOperand<IdRef>("decorationGroup") ?? default;
    public IdRef Targets => Inner.GetOperand<IdRef>("targets") ?? default;

    public OpGroupDecorate(RefInstruction instruction) => Inner = instruction;
    public OpGroupDecorate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupDecorate(Span<int> buffer) => new OpGroupDecorate(buffer);
    public static implicit operator OpGroupDecorate(Instruction instruction) => new OpGroupDecorate(instruction.AsRef());
    public static implicit operator OpGroupDecorate(RefInstruction instruction) => new OpGroupDecorate(instruction);
}

public ref struct OpGroupMemberDecorate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef DecorationGroup => Inner.GetOperand<IdRef>("decorationGroup") ?? default;
    public PairIdRefLiteralInteger Targets => Inner.GetOperand<PairIdRefLiteralInteger>("targets") ?? default;

    public OpGroupMemberDecorate(RefInstruction instruction) => Inner = instruction;
    public OpGroupMemberDecorate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupMemberDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupMemberDecorate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupMemberDecorate(Span<int> buffer) => new OpGroupMemberDecorate(buffer);
    public static implicit operator OpGroupMemberDecorate(Instruction instruction) => new OpGroupMemberDecorate(instruction.AsRef());
    public static implicit operator OpGroupMemberDecorate(RefInstruction instruction) => new OpGroupMemberDecorate(instruction);
}

public ref struct OpVectorExtractDynamic : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;

    public OpVectorExtractDynamic(RefInstruction instruction) => Inner = instruction;
    public OpVectorExtractDynamic(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVectorExtractDynamic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVectorExtractDynamic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVectorExtractDynamic(Span<int> buffer) => new OpVectorExtractDynamic(buffer);
    public static implicit operator OpVectorExtractDynamic(Instruction instruction) => new OpVectorExtractDynamic(instruction.AsRef());
    public static implicit operator OpVectorExtractDynamic(RefInstruction instruction) => new OpVectorExtractDynamic(instruction);
}

public ref struct OpVectorInsertDynamic : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;
    public IdRef Component => Inner.GetOperand<IdRef>("component") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;

    public OpVectorInsertDynamic(RefInstruction instruction) => Inner = instruction;
    public OpVectorInsertDynamic(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVectorInsertDynamic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVectorInsertDynamic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVectorInsertDynamic(Span<int> buffer) => new OpVectorInsertDynamic(buffer);
    public static implicit operator OpVectorInsertDynamic(Instruction instruction) => new OpVectorInsertDynamic(instruction.AsRef());
    public static implicit operator OpVectorInsertDynamic(RefInstruction instruction) => new OpVectorInsertDynamic(instruction);
}

public ref struct OpVectorShuffle : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public LiteralInteger Components => Inner.GetOperand<LiteralInteger>("components") ?? default;

    public OpVectorShuffle(RefInstruction instruction) => Inner = instruction;
    public OpVectorShuffle(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVectorShuffle instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVectorShuffle instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVectorShuffle(Span<int> buffer) => new OpVectorShuffle(buffer);
    public static implicit operator OpVectorShuffle(Instruction instruction) => new OpVectorShuffle(instruction.AsRef());
    public static implicit operator OpVectorShuffle(RefInstruction instruction) => new OpVectorShuffle(instruction);
}

public ref struct OpCompositeConstruct : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpCompositeConstruct(RefInstruction instruction) => Inner = instruction;
    public OpCompositeConstruct(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCompositeConstruct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCompositeConstruct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCompositeConstruct(Span<int> buffer) => new OpCompositeConstruct(buffer);
    public static implicit operator OpCompositeConstruct(Instruction instruction) => new OpCompositeConstruct(instruction.AsRef());
    public static implicit operator OpCompositeConstruct(RefInstruction instruction) => new OpCompositeConstruct(instruction);
}

public ref struct OpCompositeExtract : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Composite => Inner.GetOperand<IdRef>("composite") ?? default;
    public LiteralInteger Indexes => Inner.GetOperand<LiteralInteger>("indexes") ?? default;

    public OpCompositeExtract(RefInstruction instruction) => Inner = instruction;
    public OpCompositeExtract(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCompositeExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCompositeExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCompositeExtract(Span<int> buffer) => new OpCompositeExtract(buffer);
    public static implicit operator OpCompositeExtract(Instruction instruction) => new OpCompositeExtract(instruction.AsRef());
    public static implicit operator OpCompositeExtract(RefInstruction instruction) => new OpCompositeExtract(instruction);
}

public ref struct OpCompositeInsert : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public IdRef Composite => Inner.GetOperand<IdRef>("composite") ?? default;
    public LiteralInteger Indexes => Inner.GetOperand<LiteralInteger>("indexes") ?? default;

    public OpCompositeInsert(RefInstruction instruction) => Inner = instruction;
    public OpCompositeInsert(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCompositeInsert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCompositeInsert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCompositeInsert(Span<int> buffer) => new OpCompositeInsert(buffer);
    public static implicit operator OpCompositeInsert(Instruction instruction) => new OpCompositeInsert(instruction.AsRef());
    public static implicit operator OpCompositeInsert(RefInstruction instruction) => new OpCompositeInsert(instruction);
}

public ref struct OpCopyObject : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpCopyObject(RefInstruction instruction) => Inner = instruction;
    public OpCopyObject(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCopyObject instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCopyObject instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCopyObject(Span<int> buffer) => new OpCopyObject(buffer);
    public static implicit operator OpCopyObject(Instruction instruction) => new OpCopyObject(instruction.AsRef());
    public static implicit operator OpCopyObject(RefInstruction instruction) => new OpCopyObject(instruction);
}

public ref struct OpTranspose : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;

    public OpTranspose(RefInstruction instruction) => Inner = instruction;
    public OpTranspose(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTranspose instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTranspose instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTranspose(Span<int> buffer) => new OpTranspose(buffer);
    public static implicit operator OpTranspose(Instruction instruction) => new OpTranspose(instruction.AsRef());
    public static implicit operator OpTranspose(RefInstruction instruction) => new OpTranspose(instruction);
}

public ref struct OpSampledImage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Sampler => Inner.GetOperand<IdRef>("sampler") ?? default;

    public OpSampledImage(RefInstruction instruction) => Inner = instruction;
    public OpSampledImage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSampledImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSampledImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSampledImage(Span<int> buffer) => new OpSampledImage(buffer);
    public static implicit operator OpSampledImage(Instruction instruction) => new OpSampledImage(instruction.AsRef());
    public static implicit operator OpSampledImage(RefInstruction instruction) => new OpSampledImage(instruction);
}

public ref struct OpImageSampleImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleImplicitLod(Span<int> buffer) => new OpImageSampleImplicitLod(buffer);
    public static implicit operator OpImageSampleImplicitLod(Instruction instruction) => new OpImageSampleImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleImplicitLod(RefInstruction instruction) => new OpImageSampleImplicitLod(instruction);
}

public ref struct OpImageSampleExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleExplicitLod(Span<int> buffer) => new OpImageSampleExplicitLod(buffer);
    public static implicit operator OpImageSampleExplicitLod(Instruction instruction) => new OpImageSampleExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleExplicitLod(RefInstruction instruction) => new OpImageSampleExplicitLod(instruction);
}

public ref struct OpImageSampleDrefImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleDrefImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleDrefImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleDrefImplicitLod(Span<int> buffer) => new OpImageSampleDrefImplicitLod(buffer);
    public static implicit operator OpImageSampleDrefImplicitLod(Instruction instruction) => new OpImageSampleDrefImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleDrefImplicitLod(RefInstruction instruction) => new OpImageSampleDrefImplicitLod(instruction);
}

public ref struct OpImageSampleDrefExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleDrefExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleDrefExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleDrefExplicitLod(Span<int> buffer) => new OpImageSampleDrefExplicitLod(buffer);
    public static implicit operator OpImageSampleDrefExplicitLod(Instruction instruction) => new OpImageSampleDrefExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleDrefExplicitLod(RefInstruction instruction) => new OpImageSampleDrefExplicitLod(instruction);
}

public ref struct OpImageSampleProjImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleProjImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleProjImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleProjImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleProjImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleProjImplicitLod(Span<int> buffer) => new OpImageSampleProjImplicitLod(buffer);
    public static implicit operator OpImageSampleProjImplicitLod(Instruction instruction) => new OpImageSampleProjImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleProjImplicitLod(RefInstruction instruction) => new OpImageSampleProjImplicitLod(instruction);
}

public ref struct OpImageSampleProjExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleProjExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleProjExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleProjExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleProjExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleProjExplicitLod(Span<int> buffer) => new OpImageSampleProjExplicitLod(buffer);
    public static implicit operator OpImageSampleProjExplicitLod(Instruction instruction) => new OpImageSampleProjExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleProjExplicitLod(RefInstruction instruction) => new OpImageSampleProjExplicitLod(instruction);
}

public ref struct OpImageSampleProjDrefImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleProjDrefImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleProjDrefImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleProjDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleProjDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleProjDrefImplicitLod(Span<int> buffer) => new OpImageSampleProjDrefImplicitLod(buffer);
    public static implicit operator OpImageSampleProjDrefImplicitLod(Instruction instruction) => new OpImageSampleProjDrefImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleProjDrefImplicitLod(RefInstruction instruction) => new OpImageSampleProjDrefImplicitLod(instruction);
}

public ref struct OpImageSampleProjDrefExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleProjDrefExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleProjDrefExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleProjDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleProjDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleProjDrefExplicitLod(Span<int> buffer) => new OpImageSampleProjDrefExplicitLod(buffer);
    public static implicit operator OpImageSampleProjDrefExplicitLod(Instruction instruction) => new OpImageSampleProjDrefExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSampleProjDrefExplicitLod(RefInstruction instruction) => new OpImageSampleProjDrefExplicitLod(instruction);
}

public ref struct OpImageFetch : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageFetch(RefInstruction instruction) => Inner = instruction;
    public OpImageFetch(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageFetch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageFetch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageFetch(Span<int> buffer) => new OpImageFetch(buffer);
    public static implicit operator OpImageFetch(Instruction instruction) => new OpImageFetch(instruction.AsRef());
    public static implicit operator OpImageFetch(RefInstruction instruction) => new OpImageFetch(instruction);
}

public ref struct OpImageGather : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Component => Inner.GetOperand<IdRef>("component") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageGather(RefInstruction instruction) => Inner = instruction;
    public OpImageGather(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageGather(Span<int> buffer) => new OpImageGather(buffer);
    public static implicit operator OpImageGather(Instruction instruction) => new OpImageGather(instruction.AsRef());
    public static implicit operator OpImageGather(RefInstruction instruction) => new OpImageGather(instruction);
}

public ref struct OpImageDrefGather : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageDrefGather(RefInstruction instruction) => Inner = instruction;
    public OpImageDrefGather(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageDrefGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageDrefGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageDrefGather(Span<int> buffer) => new OpImageDrefGather(buffer);
    public static implicit operator OpImageDrefGather(Instruction instruction) => new OpImageDrefGather(instruction.AsRef());
    public static implicit operator OpImageDrefGather(RefInstruction instruction) => new OpImageDrefGather(instruction);
}

public ref struct OpImageRead : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageRead(RefInstruction instruction) => Inner = instruction;
    public OpImageRead(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageRead instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageRead instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageRead(Span<int> buffer) => new OpImageRead(buffer);
    public static implicit operator OpImageRead(Instruction instruction) => new OpImageRead(instruction.AsRef());
    public static implicit operator OpImageRead(RefInstruction instruction) => new OpImageRead(instruction);
}

public ref struct OpImageWrite : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Texel => Inner.GetOperand<IdRef>("texel") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageWrite(RefInstruction instruction) => Inner = instruction;
    public OpImageWrite(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageWrite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageWrite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageWrite(Span<int> buffer) => new OpImageWrite(buffer);
    public static implicit operator OpImageWrite(Instruction instruction) => new OpImageWrite(instruction.AsRef());
    public static implicit operator OpImageWrite(RefInstruction instruction) => new OpImageWrite(instruction);
}

public ref struct OpImage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;

    public OpImage(RefInstruction instruction) => Inner = instruction;
    public OpImage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImage(Span<int> buffer) => new OpImage(buffer);
    public static implicit operator OpImage(Instruction instruction) => new OpImage(instruction.AsRef());
    public static implicit operator OpImage(RefInstruction instruction) => new OpImage(instruction);
}

public ref struct OpImageQueryFormat : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;

    public OpImageQueryFormat(RefInstruction instruction) => Inner = instruction;
    public OpImageQueryFormat(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQueryFormat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQueryFormat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQueryFormat(Span<int> buffer) => new OpImageQueryFormat(buffer);
    public static implicit operator OpImageQueryFormat(Instruction instruction) => new OpImageQueryFormat(instruction.AsRef());
    public static implicit operator OpImageQueryFormat(RefInstruction instruction) => new OpImageQueryFormat(instruction);
}

public ref struct OpImageQueryOrder : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;

    public OpImageQueryOrder(RefInstruction instruction) => Inner = instruction;
    public OpImageQueryOrder(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQueryOrder instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQueryOrder instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQueryOrder(Span<int> buffer) => new OpImageQueryOrder(buffer);
    public static implicit operator OpImageQueryOrder(Instruction instruction) => new OpImageQueryOrder(instruction.AsRef());
    public static implicit operator OpImageQueryOrder(RefInstruction instruction) => new OpImageQueryOrder(instruction);
}

public ref struct OpImageQuerySizeLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef LevelofDetail => Inner.GetOperand<IdRef>("levelofDetail") ?? default;

    public OpImageQuerySizeLod(RefInstruction instruction) => Inner = instruction;
    public OpImageQuerySizeLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQuerySizeLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQuerySizeLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQuerySizeLod(Span<int> buffer) => new OpImageQuerySizeLod(buffer);
    public static implicit operator OpImageQuerySizeLod(Instruction instruction) => new OpImageQuerySizeLod(instruction.AsRef());
    public static implicit operator OpImageQuerySizeLod(RefInstruction instruction) => new OpImageQuerySizeLod(instruction);
}

public ref struct OpImageQuerySize : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;

    public OpImageQuerySize(RefInstruction instruction) => Inner = instruction;
    public OpImageQuerySize(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQuerySize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQuerySize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQuerySize(Span<int> buffer) => new OpImageQuerySize(buffer);
    public static implicit operator OpImageQuerySize(Instruction instruction) => new OpImageQuerySize(instruction.AsRef());
    public static implicit operator OpImageQuerySize(RefInstruction instruction) => new OpImageQuerySize(instruction);
}

public ref struct OpImageQueryLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;

    public OpImageQueryLod(RefInstruction instruction) => Inner = instruction;
    public OpImageQueryLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQueryLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQueryLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQueryLod(Span<int> buffer) => new OpImageQueryLod(buffer);
    public static implicit operator OpImageQueryLod(Instruction instruction) => new OpImageQueryLod(instruction.AsRef());
    public static implicit operator OpImageQueryLod(RefInstruction instruction) => new OpImageQueryLod(instruction);
}

public ref struct OpImageQueryLevels : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;

    public OpImageQueryLevels(RefInstruction instruction) => Inner = instruction;
    public OpImageQueryLevels(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQueryLevels instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQueryLevels instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQueryLevels(Span<int> buffer) => new OpImageQueryLevels(buffer);
    public static implicit operator OpImageQueryLevels(Instruction instruction) => new OpImageQueryLevels(instruction.AsRef());
    public static implicit operator OpImageQueryLevels(RefInstruction instruction) => new OpImageQueryLevels(instruction);
}

public ref struct OpImageQuerySamples : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;

    public OpImageQuerySamples(RefInstruction instruction) => Inner = instruction;
    public OpImageQuerySamples(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageQuerySamples instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageQuerySamples instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageQuerySamples(Span<int> buffer) => new OpImageQuerySamples(buffer);
    public static implicit operator OpImageQuerySamples(Instruction instruction) => new OpImageQuerySamples(instruction.AsRef());
    public static implicit operator OpImageQuerySamples(RefInstruction instruction) => new OpImageQuerySamples(instruction);
}

public ref struct OpConvertFToU : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef FloatValue => Inner.GetOperand<IdRef>("floatValue") ?? default;

    public OpConvertFToU(RefInstruction instruction) => Inner = instruction;
    public OpConvertFToU(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertFToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertFToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertFToU(Span<int> buffer) => new OpConvertFToU(buffer);
    public static implicit operator OpConvertFToU(Instruction instruction) => new OpConvertFToU(instruction.AsRef());
    public static implicit operator OpConvertFToU(RefInstruction instruction) => new OpConvertFToU(instruction);
}

public ref struct OpConvertFToS : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef FloatValue => Inner.GetOperand<IdRef>("floatValue") ?? default;

    public OpConvertFToS(RefInstruction instruction) => Inner = instruction;
    public OpConvertFToS(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertFToS instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertFToS instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertFToS(Span<int> buffer) => new OpConvertFToS(buffer);
    public static implicit operator OpConvertFToS(Instruction instruction) => new OpConvertFToS(instruction.AsRef());
    public static implicit operator OpConvertFToS(RefInstruction instruction) => new OpConvertFToS(instruction);
}

public ref struct OpConvertSToF : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SignedValue => Inner.GetOperand<IdRef>("signedValue") ?? default;

    public OpConvertSToF(RefInstruction instruction) => Inner = instruction;
    public OpConvertSToF(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertSToF instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertSToF instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertSToF(Span<int> buffer) => new OpConvertSToF(buffer);
    public static implicit operator OpConvertSToF(Instruction instruction) => new OpConvertSToF(instruction.AsRef());
    public static implicit operator OpConvertSToF(RefInstruction instruction) => new OpConvertSToF(instruction);
}

public ref struct OpConvertUToF : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef UnsignedValue => Inner.GetOperand<IdRef>("unsignedValue") ?? default;

    public OpConvertUToF(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToF(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToF instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToF instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToF(Span<int> buffer) => new OpConvertUToF(buffer);
    public static implicit operator OpConvertUToF(Instruction instruction) => new OpConvertUToF(instruction.AsRef());
    public static implicit operator OpConvertUToF(RefInstruction instruction) => new OpConvertUToF(instruction);
}

public ref struct OpUConvert : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef UnsignedValue => Inner.GetOperand<IdRef>("unsignedValue") ?? default;

    public OpUConvert(RefInstruction instruction) => Inner = instruction;
    public OpUConvert(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUConvert(Span<int> buffer) => new OpUConvert(buffer);
    public static implicit operator OpUConvert(Instruction instruction) => new OpUConvert(instruction.AsRef());
    public static implicit operator OpUConvert(RefInstruction instruction) => new OpUConvert(instruction);
}

public ref struct OpSConvert : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SignedValue => Inner.GetOperand<IdRef>("signedValue") ?? default;

    public OpSConvert(RefInstruction instruction) => Inner = instruction;
    public OpSConvert(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSConvert(Span<int> buffer) => new OpSConvert(buffer);
    public static implicit operator OpSConvert(Instruction instruction) => new OpSConvert(instruction.AsRef());
    public static implicit operator OpSConvert(RefInstruction instruction) => new OpSConvert(instruction);
}

public ref struct OpFConvert : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef FloatValue => Inner.GetOperand<IdRef>("floatValue") ?? default;

    public OpFConvert(RefInstruction instruction) => Inner = instruction;
    public OpFConvert(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFConvert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFConvert(Span<int> buffer) => new OpFConvert(buffer);
    public static implicit operator OpFConvert(Instruction instruction) => new OpFConvert(instruction.AsRef());
    public static implicit operator OpFConvert(RefInstruction instruction) => new OpFConvert(instruction);
}

public ref struct OpQuantizeToF16 : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpQuantizeToF16(RefInstruction instruction) => Inner = instruction;
    public OpQuantizeToF16(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpQuantizeToF16 instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpQuantizeToF16 instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpQuantizeToF16(Span<int> buffer) => new OpQuantizeToF16(buffer);
    public static implicit operator OpQuantizeToF16(Instruction instruction) => new OpQuantizeToF16(instruction.AsRef());
    public static implicit operator OpQuantizeToF16(RefInstruction instruction) => new OpQuantizeToF16(instruction);
}

public ref struct OpConvertPtrToU : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpConvertPtrToU(RefInstruction instruction) => Inner = instruction;
    public OpConvertPtrToU(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertPtrToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertPtrToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertPtrToU(Span<int> buffer) => new OpConvertPtrToU(buffer);
    public static implicit operator OpConvertPtrToU(Instruction instruction) => new OpConvertPtrToU(instruction.AsRef());
    public static implicit operator OpConvertPtrToU(RefInstruction instruction) => new OpConvertPtrToU(instruction);
}

public ref struct OpSatConvertSToU : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SignedValue => Inner.GetOperand<IdRef>("signedValue") ?? default;

    public OpSatConvertSToU(RefInstruction instruction) => Inner = instruction;
    public OpSatConvertSToU(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSatConvertSToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSatConvertSToU instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSatConvertSToU(Span<int> buffer) => new OpSatConvertSToU(buffer);
    public static implicit operator OpSatConvertSToU(Instruction instruction) => new OpSatConvertSToU(instruction.AsRef());
    public static implicit operator OpSatConvertSToU(RefInstruction instruction) => new OpSatConvertSToU(instruction);
}

public ref struct OpSatConvertUToS : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef UnsignedValue => Inner.GetOperand<IdRef>("unsignedValue") ?? default;

    public OpSatConvertUToS(RefInstruction instruction) => Inner = instruction;
    public OpSatConvertUToS(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSatConvertUToS instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSatConvertUToS instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSatConvertUToS(Span<int> buffer) => new OpSatConvertUToS(buffer);
    public static implicit operator OpSatConvertUToS(Instruction instruction) => new OpSatConvertUToS(instruction.AsRef());
    public static implicit operator OpSatConvertUToS(RefInstruction instruction) => new OpSatConvertUToS(instruction);
}

public ref struct OpConvertUToPtr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef IntegerValue => Inner.GetOperand<IdRef>("integerValue") ?? default;

    public OpConvertUToPtr(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToPtr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToPtr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToPtr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToPtr(Span<int> buffer) => new OpConvertUToPtr(buffer);
    public static implicit operator OpConvertUToPtr(Instruction instruction) => new OpConvertUToPtr(instruction.AsRef());
    public static implicit operator OpConvertUToPtr(RefInstruction instruction) => new OpConvertUToPtr(instruction);
}

public ref struct OpPtrCastToGeneric : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpPtrCastToGeneric(RefInstruction instruction) => Inner = instruction;
    public OpPtrCastToGeneric(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrCastToGeneric instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrCastToGeneric instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrCastToGeneric(Span<int> buffer) => new OpPtrCastToGeneric(buffer);
    public static implicit operator OpPtrCastToGeneric(Instruction instruction) => new OpPtrCastToGeneric(instruction.AsRef());
    public static implicit operator OpPtrCastToGeneric(RefInstruction instruction) => new OpPtrCastToGeneric(instruction);
}

public ref struct OpGenericCastToPtr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpGenericCastToPtr(RefInstruction instruction) => Inner = instruction;
    public OpGenericCastToPtr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGenericCastToPtr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGenericCastToPtr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGenericCastToPtr(Span<int> buffer) => new OpGenericCastToPtr(buffer);
    public static implicit operator OpGenericCastToPtr(Instruction instruction) => new OpGenericCastToPtr(instruction.AsRef());
    public static implicit operator OpGenericCastToPtr(RefInstruction instruction) => new OpGenericCastToPtr(instruction);
}

public ref struct OpGenericCastToPtrExplicit : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public StorageClass Storage => Inner.GetEnumOperand<StorageClass>("storage");

    public OpGenericCastToPtrExplicit(RefInstruction instruction) => Inner = instruction;
    public OpGenericCastToPtrExplicit(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGenericCastToPtrExplicit instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGenericCastToPtrExplicit instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGenericCastToPtrExplicit(Span<int> buffer) => new OpGenericCastToPtrExplicit(buffer);
    public static implicit operator OpGenericCastToPtrExplicit(Instruction instruction) => new OpGenericCastToPtrExplicit(instruction.AsRef());
    public static implicit operator OpGenericCastToPtrExplicit(RefInstruction instruction) => new OpGenericCastToPtrExplicit(instruction);
}

public ref struct OpBitcast : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpBitcast(RefInstruction instruction) => Inner = instruction;
    public OpBitcast(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitcast(Span<int> buffer) => new OpBitcast(buffer);
    public static implicit operator OpBitcast(Instruction instruction) => new OpBitcast(instruction.AsRef());
    public static implicit operator OpBitcast(RefInstruction instruction) => new OpBitcast(instruction);
}

public ref struct OpSNegate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpSNegate(RefInstruction instruction) => Inner = instruction;
    public OpSNegate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSNegate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSNegate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSNegate(Span<int> buffer) => new OpSNegate(buffer);
    public static implicit operator OpSNegate(Instruction instruction) => new OpSNegate(instruction.AsRef());
    public static implicit operator OpSNegate(RefInstruction instruction) => new OpSNegate(instruction);
}

public ref struct OpFNegate : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpFNegate(RefInstruction instruction) => Inner = instruction;
    public OpFNegate(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFNegate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFNegate instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFNegate(Span<int> buffer) => new OpFNegate(buffer);
    public static implicit operator OpFNegate(Instruction instruction) => new OpFNegate(instruction.AsRef());
    public static implicit operator OpFNegate(RefInstruction instruction) => new OpFNegate(instruction);
}

public ref struct OpIAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIAdd(RefInstruction instruction) => Inner = instruction;
    public OpIAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIAdd(Span<int> buffer) => new OpIAdd(buffer);
    public static implicit operator OpIAdd(Instruction instruction) => new OpIAdd(instruction.AsRef());
    public static implicit operator OpIAdd(RefInstruction instruction) => new OpIAdd(instruction);
}

public ref struct OpFAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFAdd(RefInstruction instruction) => Inner = instruction;
    public OpFAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFAdd(Span<int> buffer) => new OpFAdd(buffer);
    public static implicit operator OpFAdd(Instruction instruction) => new OpFAdd(instruction.AsRef());
    public static implicit operator OpFAdd(RefInstruction instruction) => new OpFAdd(instruction);
}

public ref struct OpISub : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpISub(RefInstruction instruction) => Inner = instruction;
    public OpISub(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpISub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpISub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpISub(Span<int> buffer) => new OpISub(buffer);
    public static implicit operator OpISub(Instruction instruction) => new OpISub(instruction.AsRef());
    public static implicit operator OpISub(RefInstruction instruction) => new OpISub(instruction);
}

public ref struct OpFSub : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFSub(RefInstruction instruction) => Inner = instruction;
    public OpFSub(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFSub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFSub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFSub(Span<int> buffer) => new OpFSub(buffer);
    public static implicit operator OpFSub(Instruction instruction) => new OpFSub(instruction.AsRef());
    public static implicit operator OpFSub(RefInstruction instruction) => new OpFSub(instruction);
}

public ref struct OpIMul : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIMul(RefInstruction instruction) => Inner = instruction;
    public OpIMul(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIMul(Span<int> buffer) => new OpIMul(buffer);
    public static implicit operator OpIMul(Instruction instruction) => new OpIMul(instruction.AsRef());
    public static implicit operator OpIMul(RefInstruction instruction) => new OpIMul(instruction);
}

public ref struct OpFMul : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFMul(RefInstruction instruction) => Inner = instruction;
    public OpFMul(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFMul(Span<int> buffer) => new OpFMul(buffer);
    public static implicit operator OpFMul(Instruction instruction) => new OpFMul(instruction.AsRef());
    public static implicit operator OpFMul(RefInstruction instruction) => new OpFMul(instruction);
}

public ref struct OpUDiv : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUDiv(RefInstruction instruction) => Inner = instruction;
    public OpUDiv(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUDiv(Span<int> buffer) => new OpUDiv(buffer);
    public static implicit operator OpUDiv(Instruction instruction) => new OpUDiv(instruction.AsRef());
    public static implicit operator OpUDiv(RefInstruction instruction) => new OpUDiv(instruction);
}

public ref struct OpSDiv : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSDiv(RefInstruction instruction) => Inner = instruction;
    public OpSDiv(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSDiv(Span<int> buffer) => new OpSDiv(buffer);
    public static implicit operator OpSDiv(Instruction instruction) => new OpSDiv(instruction.AsRef());
    public static implicit operator OpSDiv(RefInstruction instruction) => new OpSDiv(instruction);
}

public ref struct OpFDiv : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFDiv(RefInstruction instruction) => Inner = instruction;
    public OpFDiv(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFDiv instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFDiv(Span<int> buffer) => new OpFDiv(buffer);
    public static implicit operator OpFDiv(Instruction instruction) => new OpFDiv(instruction.AsRef());
    public static implicit operator OpFDiv(RefInstruction instruction) => new OpFDiv(instruction);
}

public ref struct OpUMod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUMod(RefInstruction instruction) => Inner = instruction;
    public OpUMod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUMod(Span<int> buffer) => new OpUMod(buffer);
    public static implicit operator OpUMod(Instruction instruction) => new OpUMod(instruction.AsRef());
    public static implicit operator OpUMod(RefInstruction instruction) => new OpUMod(instruction);
}

public ref struct OpSRem : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSRem(RefInstruction instruction) => Inner = instruction;
    public OpSRem(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSRem instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSRem instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSRem(Span<int> buffer) => new OpSRem(buffer);
    public static implicit operator OpSRem(Instruction instruction) => new OpSRem(instruction.AsRef());
    public static implicit operator OpSRem(RefInstruction instruction) => new OpSRem(instruction);
}

public ref struct OpSMod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSMod(RefInstruction instruction) => Inner = instruction;
    public OpSMod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSMod(Span<int> buffer) => new OpSMod(buffer);
    public static implicit operator OpSMod(Instruction instruction) => new OpSMod(instruction.AsRef());
    public static implicit operator OpSMod(RefInstruction instruction) => new OpSMod(instruction);
}

public ref struct OpFRem : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFRem(RefInstruction instruction) => Inner = instruction;
    public OpFRem(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFRem instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFRem instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFRem(Span<int> buffer) => new OpFRem(buffer);
    public static implicit operator OpFRem(Instruction instruction) => new OpFRem(instruction.AsRef());
    public static implicit operator OpFRem(RefInstruction instruction) => new OpFRem(instruction);
}

public ref struct OpFMod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFMod(RefInstruction instruction) => Inner = instruction;
    public OpFMod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFMod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFMod(Span<int> buffer) => new OpFMod(buffer);
    public static implicit operator OpFMod(Instruction instruction) => new OpFMod(instruction.AsRef());
    public static implicit operator OpFMod(RefInstruction instruction) => new OpFMod(instruction);
}

public ref struct OpVectorTimesScalar : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;
    public IdRef Scalar => Inner.GetOperand<IdRef>("scalar") ?? default;

    public OpVectorTimesScalar(RefInstruction instruction) => Inner = instruction;
    public OpVectorTimesScalar(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVectorTimesScalar instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVectorTimesScalar instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVectorTimesScalar(Span<int> buffer) => new OpVectorTimesScalar(buffer);
    public static implicit operator OpVectorTimesScalar(Instruction instruction) => new OpVectorTimesScalar(instruction.AsRef());
    public static implicit operator OpVectorTimesScalar(RefInstruction instruction) => new OpVectorTimesScalar(instruction);
}

public ref struct OpMatrixTimesScalar : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;
    public IdRef Scalar => Inner.GetOperand<IdRef>("scalar") ?? default;

    public OpMatrixTimesScalar(RefInstruction instruction) => Inner = instruction;
    public OpMatrixTimesScalar(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMatrixTimesScalar instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMatrixTimesScalar instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMatrixTimesScalar(Span<int> buffer) => new OpMatrixTimesScalar(buffer);
    public static implicit operator OpMatrixTimesScalar(Instruction instruction) => new OpMatrixTimesScalar(instruction.AsRef());
    public static implicit operator OpMatrixTimesScalar(RefInstruction instruction) => new OpMatrixTimesScalar(instruction);
}

public ref struct OpVectorTimesMatrix : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;

    public OpVectorTimesMatrix(RefInstruction instruction) => Inner = instruction;
    public OpVectorTimesMatrix(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVectorTimesMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVectorTimesMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVectorTimesMatrix(Span<int> buffer) => new OpVectorTimesMatrix(buffer);
    public static implicit operator OpVectorTimesMatrix(Instruction instruction) => new OpVectorTimesMatrix(instruction.AsRef());
    public static implicit operator OpVectorTimesMatrix(RefInstruction instruction) => new OpVectorTimesMatrix(instruction);
}

public ref struct OpMatrixTimesVector : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;

    public OpMatrixTimesVector(RefInstruction instruction) => Inner = instruction;
    public OpMatrixTimesVector(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMatrixTimesVector instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMatrixTimesVector instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMatrixTimesVector(Span<int> buffer) => new OpMatrixTimesVector(buffer);
    public static implicit operator OpMatrixTimesVector(Instruction instruction) => new OpMatrixTimesVector(instruction.AsRef());
    public static implicit operator OpMatrixTimesVector(RefInstruction instruction) => new OpMatrixTimesVector(instruction);
}

public ref struct OpMatrixTimesMatrix : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef LeftMatrix => Inner.GetOperand<IdRef>("leftMatrix") ?? default;
    public IdRef RightMatrix => Inner.GetOperand<IdRef>("rightMatrix") ?? default;

    public OpMatrixTimesMatrix(RefInstruction instruction) => Inner = instruction;
    public OpMatrixTimesMatrix(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMatrixTimesMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMatrixTimesMatrix instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMatrixTimesMatrix(Span<int> buffer) => new OpMatrixTimesMatrix(buffer);
    public static implicit operator OpMatrixTimesMatrix(Instruction instruction) => new OpMatrixTimesMatrix(instruction.AsRef());
    public static implicit operator OpMatrixTimesMatrix(RefInstruction instruction) => new OpMatrixTimesMatrix(instruction);
}

public ref struct OpOuterProduct : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;

    public OpOuterProduct(RefInstruction instruction) => Inner = instruction;
    public OpOuterProduct(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpOuterProduct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpOuterProduct instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpOuterProduct(Span<int> buffer) => new OpOuterProduct(buffer);
    public static implicit operator OpOuterProduct(Instruction instruction) => new OpOuterProduct(instruction.AsRef());
    public static implicit operator OpOuterProduct(RefInstruction instruction) => new OpOuterProduct(instruction);
}

public ref struct OpDot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;

    public OpDot(RefInstruction instruction) => Inner = instruction;
    public OpDot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDot(Span<int> buffer) => new OpDot(buffer);
    public static implicit operator OpDot(Instruction instruction) => new OpDot(instruction.AsRef());
    public static implicit operator OpDot(RefInstruction instruction) => new OpDot(instruction);
}

public ref struct OpIAddCarry : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIAddCarry(RefInstruction instruction) => Inner = instruction;
    public OpIAddCarry(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIAddCarry instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIAddCarry instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIAddCarry(Span<int> buffer) => new OpIAddCarry(buffer);
    public static implicit operator OpIAddCarry(Instruction instruction) => new OpIAddCarry(instruction.AsRef());
    public static implicit operator OpIAddCarry(RefInstruction instruction) => new OpIAddCarry(instruction);
}

public ref struct OpISubBorrow : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpISubBorrow(RefInstruction instruction) => Inner = instruction;
    public OpISubBorrow(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpISubBorrow instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpISubBorrow instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpISubBorrow(Span<int> buffer) => new OpISubBorrow(buffer);
    public static implicit operator OpISubBorrow(Instruction instruction) => new OpISubBorrow(instruction.AsRef());
    public static implicit operator OpISubBorrow(RefInstruction instruction) => new OpISubBorrow(instruction);
}

public ref struct OpUMulExtended : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUMulExtended(RefInstruction instruction) => Inner = instruction;
    public OpUMulExtended(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUMulExtended instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUMulExtended instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUMulExtended(Span<int> buffer) => new OpUMulExtended(buffer);
    public static implicit operator OpUMulExtended(Instruction instruction) => new OpUMulExtended(instruction.AsRef());
    public static implicit operator OpUMulExtended(RefInstruction instruction) => new OpUMulExtended(instruction);
}

public ref struct OpSMulExtended : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSMulExtended(RefInstruction instruction) => Inner = instruction;
    public OpSMulExtended(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSMulExtended instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSMulExtended instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSMulExtended(Span<int> buffer) => new OpSMulExtended(buffer);
    public static implicit operator OpSMulExtended(Instruction instruction) => new OpSMulExtended(instruction.AsRef());
    public static implicit operator OpSMulExtended(RefInstruction instruction) => new OpSMulExtended(instruction);
}

public ref struct OpAny : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;

    public OpAny(RefInstruction instruction) => Inner = instruction;
    public OpAny(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAny(Span<int> buffer) => new OpAny(buffer);
    public static implicit operator OpAny(Instruction instruction) => new OpAny(instruction.AsRef());
    public static implicit operator OpAny(RefInstruction instruction) => new OpAny(instruction);
}

public ref struct OpAll : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector => Inner.GetOperand<IdRef>("vector") ?? default;

    public OpAll(RefInstruction instruction) => Inner = instruction;
    public OpAll(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAll(Span<int> buffer) => new OpAll(buffer);
    public static implicit operator OpAll(Instruction instruction) => new OpAll(instruction.AsRef());
    public static implicit operator OpAll(RefInstruction instruction) => new OpAll(instruction);
}

public ref struct OpIsNan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpIsNan(RefInstruction instruction) => Inner = instruction;
    public OpIsNan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsNan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsNan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsNan(Span<int> buffer) => new OpIsNan(buffer);
    public static implicit operator OpIsNan(Instruction instruction) => new OpIsNan(instruction.AsRef());
    public static implicit operator OpIsNan(RefInstruction instruction) => new OpIsNan(instruction);
}

public ref struct OpIsInf : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpIsInf(RefInstruction instruction) => Inner = instruction;
    public OpIsInf(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsInf instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsInf instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsInf(Span<int> buffer) => new OpIsInf(buffer);
    public static implicit operator OpIsInf(Instruction instruction) => new OpIsInf(instruction.AsRef());
    public static implicit operator OpIsInf(RefInstruction instruction) => new OpIsInf(instruction);
}

public ref struct OpIsFinite : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpIsFinite(RefInstruction instruction) => Inner = instruction;
    public OpIsFinite(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsFinite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsFinite instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsFinite(Span<int> buffer) => new OpIsFinite(buffer);
    public static implicit operator OpIsFinite(Instruction instruction) => new OpIsFinite(instruction.AsRef());
    public static implicit operator OpIsFinite(RefInstruction instruction) => new OpIsFinite(instruction);
}

public ref struct OpIsNormal : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpIsNormal(RefInstruction instruction) => Inner = instruction;
    public OpIsNormal(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsNormal instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsNormal instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsNormal(Span<int> buffer) => new OpIsNormal(buffer);
    public static implicit operator OpIsNormal(Instruction instruction) => new OpIsNormal(instruction.AsRef());
    public static implicit operator OpIsNormal(RefInstruction instruction) => new OpIsNormal(instruction);
}

public ref struct OpSignBitSet : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpSignBitSet(RefInstruction instruction) => Inner = instruction;
    public OpSignBitSet(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSignBitSet instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSignBitSet instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSignBitSet(Span<int> buffer) => new OpSignBitSet(buffer);
    public static implicit operator OpSignBitSet(Instruction instruction) => new OpSignBitSet(instruction.AsRef());
    public static implicit operator OpSignBitSet(RefInstruction instruction) => new OpSignBitSet(instruction);
}

public ref struct OpLessOrGreater : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;
    public IdRef Y => Inner.GetOperand<IdRef>("y") ?? default;

    public OpLessOrGreater(RefInstruction instruction) => Inner = instruction;
    public OpLessOrGreater(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLessOrGreater instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLessOrGreater instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLessOrGreater(Span<int> buffer) => new OpLessOrGreater(buffer);
    public static implicit operator OpLessOrGreater(Instruction instruction) => new OpLessOrGreater(instruction.AsRef());
    public static implicit operator OpLessOrGreater(RefInstruction instruction) => new OpLessOrGreater(instruction);
}

public ref struct OpOrdered : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;
    public IdRef Y => Inner.GetOperand<IdRef>("y") ?? default;

    public OpOrdered(RefInstruction instruction) => Inner = instruction;
    public OpOrdered(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpOrdered instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpOrdered instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpOrdered(Span<int> buffer) => new OpOrdered(buffer);
    public static implicit operator OpOrdered(Instruction instruction) => new OpOrdered(instruction.AsRef());
    public static implicit operator OpOrdered(RefInstruction instruction) => new OpOrdered(instruction);
}

public ref struct OpUnordered : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;
    public IdRef Y => Inner.GetOperand<IdRef>("y") ?? default;

    public OpUnordered(RefInstruction instruction) => Inner = instruction;
    public OpUnordered(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUnordered instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUnordered instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUnordered(Span<int> buffer) => new OpUnordered(buffer);
    public static implicit operator OpUnordered(Instruction instruction) => new OpUnordered(instruction.AsRef());
    public static implicit operator OpUnordered(RefInstruction instruction) => new OpUnordered(instruction);
}

public ref struct OpLogicalEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpLogicalEqual(RefInstruction instruction) => Inner = instruction;
    public OpLogicalEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLogicalEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLogicalEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLogicalEqual(Span<int> buffer) => new OpLogicalEqual(buffer);
    public static implicit operator OpLogicalEqual(Instruction instruction) => new OpLogicalEqual(instruction.AsRef());
    public static implicit operator OpLogicalEqual(RefInstruction instruction) => new OpLogicalEqual(instruction);
}

public ref struct OpLogicalNotEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpLogicalNotEqual(RefInstruction instruction) => Inner = instruction;
    public OpLogicalNotEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLogicalNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLogicalNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLogicalNotEqual(Span<int> buffer) => new OpLogicalNotEqual(buffer);
    public static implicit operator OpLogicalNotEqual(Instruction instruction) => new OpLogicalNotEqual(instruction.AsRef());
    public static implicit operator OpLogicalNotEqual(RefInstruction instruction) => new OpLogicalNotEqual(instruction);
}

public ref struct OpLogicalOr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpLogicalOr(RefInstruction instruction) => Inner = instruction;
    public OpLogicalOr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLogicalOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLogicalOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLogicalOr(Span<int> buffer) => new OpLogicalOr(buffer);
    public static implicit operator OpLogicalOr(Instruction instruction) => new OpLogicalOr(instruction.AsRef());
    public static implicit operator OpLogicalOr(RefInstruction instruction) => new OpLogicalOr(instruction);
}

public ref struct OpLogicalAnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpLogicalAnd(RefInstruction instruction) => Inner = instruction;
    public OpLogicalAnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLogicalAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLogicalAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLogicalAnd(Span<int> buffer) => new OpLogicalAnd(buffer);
    public static implicit operator OpLogicalAnd(Instruction instruction) => new OpLogicalAnd(instruction.AsRef());
    public static implicit operator OpLogicalAnd(RefInstruction instruction) => new OpLogicalAnd(instruction);
}

public ref struct OpLogicalNot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpLogicalNot(RefInstruction instruction) => Inner = instruction;
    public OpLogicalNot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLogicalNot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLogicalNot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLogicalNot(Span<int> buffer) => new OpLogicalNot(buffer);
    public static implicit operator OpLogicalNot(Instruction instruction) => new OpLogicalNot(instruction.AsRef());
    public static implicit operator OpLogicalNot(RefInstruction instruction) => new OpLogicalNot(instruction);
}

public ref struct OpSelect : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Condition => Inner.GetOperand<IdRef>("condition") ?? default;
    public IdRef Object1 => Inner.GetOperand<IdRef>("object1") ?? default;
    public IdRef Object2 => Inner.GetOperand<IdRef>("object2") ?? default;

    public OpSelect(RefInstruction instruction) => Inner = instruction;
    public OpSelect(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSelect instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSelect instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSelect(Span<int> buffer) => new OpSelect(buffer);
    public static implicit operator OpSelect(Instruction instruction) => new OpSelect(instruction.AsRef());
    public static implicit operator OpSelect(RefInstruction instruction) => new OpSelect(instruction);
}

public ref struct OpIEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIEqual(RefInstruction instruction) => Inner = instruction;
    public OpIEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIEqual(Span<int> buffer) => new OpIEqual(buffer);
    public static implicit operator OpIEqual(Instruction instruction) => new OpIEqual(instruction.AsRef());
    public static implicit operator OpIEqual(RefInstruction instruction) => new OpIEqual(instruction);
}

public ref struct OpINotEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpINotEqual(RefInstruction instruction) => Inner = instruction;
    public OpINotEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpINotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpINotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpINotEqual(Span<int> buffer) => new OpINotEqual(buffer);
    public static implicit operator OpINotEqual(Instruction instruction) => new OpINotEqual(instruction.AsRef());
    public static implicit operator OpINotEqual(RefInstruction instruction) => new OpINotEqual(instruction);
}

public ref struct OpUGreaterThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUGreaterThan(RefInstruction instruction) => Inner = instruction;
    public OpUGreaterThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUGreaterThan(Span<int> buffer) => new OpUGreaterThan(buffer);
    public static implicit operator OpUGreaterThan(Instruction instruction) => new OpUGreaterThan(instruction.AsRef());
    public static implicit operator OpUGreaterThan(RefInstruction instruction) => new OpUGreaterThan(instruction);
}

public ref struct OpSGreaterThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSGreaterThan(RefInstruction instruction) => Inner = instruction;
    public OpSGreaterThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSGreaterThan(Span<int> buffer) => new OpSGreaterThan(buffer);
    public static implicit operator OpSGreaterThan(Instruction instruction) => new OpSGreaterThan(instruction.AsRef());
    public static implicit operator OpSGreaterThan(RefInstruction instruction) => new OpSGreaterThan(instruction);
}

public ref struct OpUGreaterThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUGreaterThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpUGreaterThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUGreaterThanEqual(Span<int> buffer) => new OpUGreaterThanEqual(buffer);
    public static implicit operator OpUGreaterThanEqual(Instruction instruction) => new OpUGreaterThanEqual(instruction.AsRef());
    public static implicit operator OpUGreaterThanEqual(RefInstruction instruction) => new OpUGreaterThanEqual(instruction);
}

public ref struct OpSGreaterThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSGreaterThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpSGreaterThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSGreaterThanEqual(Span<int> buffer) => new OpSGreaterThanEqual(buffer);
    public static implicit operator OpSGreaterThanEqual(Instruction instruction) => new OpSGreaterThanEqual(instruction.AsRef());
    public static implicit operator OpSGreaterThanEqual(RefInstruction instruction) => new OpSGreaterThanEqual(instruction);
}

public ref struct OpULessThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpULessThan(RefInstruction instruction) => Inner = instruction;
    public OpULessThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpULessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpULessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpULessThan(Span<int> buffer) => new OpULessThan(buffer);
    public static implicit operator OpULessThan(Instruction instruction) => new OpULessThan(instruction.AsRef());
    public static implicit operator OpULessThan(RefInstruction instruction) => new OpULessThan(instruction);
}

public ref struct OpSLessThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSLessThan(RefInstruction instruction) => Inner = instruction;
    public OpSLessThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSLessThan(Span<int> buffer) => new OpSLessThan(buffer);
    public static implicit operator OpSLessThan(Instruction instruction) => new OpSLessThan(instruction.AsRef());
    public static implicit operator OpSLessThan(RefInstruction instruction) => new OpSLessThan(instruction);
}

public ref struct OpULessThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpULessThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpULessThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpULessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpULessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpULessThanEqual(Span<int> buffer) => new OpULessThanEqual(buffer);
    public static implicit operator OpULessThanEqual(Instruction instruction) => new OpULessThanEqual(instruction.AsRef());
    public static implicit operator OpULessThanEqual(RefInstruction instruction) => new OpULessThanEqual(instruction);
}

public ref struct OpSLessThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpSLessThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpSLessThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSLessThanEqual(Span<int> buffer) => new OpSLessThanEqual(buffer);
    public static implicit operator OpSLessThanEqual(Instruction instruction) => new OpSLessThanEqual(instruction.AsRef());
    public static implicit operator OpSLessThanEqual(RefInstruction instruction) => new OpSLessThanEqual(instruction);
}

public ref struct OpFOrdEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdEqual(RefInstruction instruction) => Inner = instruction;
    public OpFOrdEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdEqual(Span<int> buffer) => new OpFOrdEqual(buffer);
    public static implicit operator OpFOrdEqual(Instruction instruction) => new OpFOrdEqual(instruction.AsRef());
    public static implicit operator OpFOrdEqual(RefInstruction instruction) => new OpFOrdEqual(instruction);
}

public ref struct OpFUnordEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordEqual(RefInstruction instruction) => Inner = instruction;
    public OpFUnordEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordEqual(Span<int> buffer) => new OpFUnordEqual(buffer);
    public static implicit operator OpFUnordEqual(Instruction instruction) => new OpFUnordEqual(instruction.AsRef());
    public static implicit operator OpFUnordEqual(RefInstruction instruction) => new OpFUnordEqual(instruction);
}

public ref struct OpFOrdNotEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdNotEqual(RefInstruction instruction) => Inner = instruction;
    public OpFOrdNotEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdNotEqual(Span<int> buffer) => new OpFOrdNotEqual(buffer);
    public static implicit operator OpFOrdNotEqual(Instruction instruction) => new OpFOrdNotEqual(instruction.AsRef());
    public static implicit operator OpFOrdNotEqual(RefInstruction instruction) => new OpFOrdNotEqual(instruction);
}

public ref struct OpFUnordNotEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordNotEqual(RefInstruction instruction) => Inner = instruction;
    public OpFUnordNotEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordNotEqual(Span<int> buffer) => new OpFUnordNotEqual(buffer);
    public static implicit operator OpFUnordNotEqual(Instruction instruction) => new OpFUnordNotEqual(instruction.AsRef());
    public static implicit operator OpFUnordNotEqual(RefInstruction instruction) => new OpFUnordNotEqual(instruction);
}

public ref struct OpFOrdLessThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdLessThan(RefInstruction instruction) => Inner = instruction;
    public OpFOrdLessThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdLessThan(Span<int> buffer) => new OpFOrdLessThan(buffer);
    public static implicit operator OpFOrdLessThan(Instruction instruction) => new OpFOrdLessThan(instruction.AsRef());
    public static implicit operator OpFOrdLessThan(RefInstruction instruction) => new OpFOrdLessThan(instruction);
}

public ref struct OpFUnordLessThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordLessThan(RefInstruction instruction) => Inner = instruction;
    public OpFUnordLessThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordLessThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordLessThan(Span<int> buffer) => new OpFUnordLessThan(buffer);
    public static implicit operator OpFUnordLessThan(Instruction instruction) => new OpFUnordLessThan(instruction.AsRef());
    public static implicit operator OpFUnordLessThan(RefInstruction instruction) => new OpFUnordLessThan(instruction);
}

public ref struct OpFOrdGreaterThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdGreaterThan(RefInstruction instruction) => Inner = instruction;
    public OpFOrdGreaterThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdGreaterThan(Span<int> buffer) => new OpFOrdGreaterThan(buffer);
    public static implicit operator OpFOrdGreaterThan(Instruction instruction) => new OpFOrdGreaterThan(instruction.AsRef());
    public static implicit operator OpFOrdGreaterThan(RefInstruction instruction) => new OpFOrdGreaterThan(instruction);
}

public ref struct OpFUnordGreaterThan : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordGreaterThan(RefInstruction instruction) => Inner = instruction;
    public OpFUnordGreaterThan(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordGreaterThan instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordGreaterThan(Span<int> buffer) => new OpFUnordGreaterThan(buffer);
    public static implicit operator OpFUnordGreaterThan(Instruction instruction) => new OpFUnordGreaterThan(instruction.AsRef());
    public static implicit operator OpFUnordGreaterThan(RefInstruction instruction) => new OpFUnordGreaterThan(instruction);
}

public ref struct OpFOrdLessThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdLessThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpFOrdLessThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdLessThanEqual(Span<int> buffer) => new OpFOrdLessThanEqual(buffer);
    public static implicit operator OpFOrdLessThanEqual(Instruction instruction) => new OpFOrdLessThanEqual(instruction.AsRef());
    public static implicit operator OpFOrdLessThanEqual(RefInstruction instruction) => new OpFOrdLessThanEqual(instruction);
}

public ref struct OpFUnordLessThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordLessThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpFUnordLessThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordLessThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordLessThanEqual(Span<int> buffer) => new OpFUnordLessThanEqual(buffer);
    public static implicit operator OpFUnordLessThanEqual(Instruction instruction) => new OpFUnordLessThanEqual(instruction.AsRef());
    public static implicit operator OpFUnordLessThanEqual(RefInstruction instruction) => new OpFUnordLessThanEqual(instruction);
}

public ref struct OpFOrdGreaterThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFOrdGreaterThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpFOrdGreaterThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFOrdGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFOrdGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFOrdGreaterThanEqual(Span<int> buffer) => new OpFOrdGreaterThanEqual(buffer);
    public static implicit operator OpFOrdGreaterThanEqual(Instruction instruction) => new OpFOrdGreaterThanEqual(instruction.AsRef());
    public static implicit operator OpFOrdGreaterThanEqual(RefInstruction instruction) => new OpFOrdGreaterThanEqual(instruction);
}

public ref struct OpFUnordGreaterThanEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpFUnordGreaterThanEqual(RefInstruction instruction) => Inner = instruction;
    public OpFUnordGreaterThanEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFUnordGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFUnordGreaterThanEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFUnordGreaterThanEqual(Span<int> buffer) => new OpFUnordGreaterThanEqual(buffer);
    public static implicit operator OpFUnordGreaterThanEqual(Instruction instruction) => new OpFUnordGreaterThanEqual(instruction.AsRef());
    public static implicit operator OpFUnordGreaterThanEqual(RefInstruction instruction) => new OpFUnordGreaterThanEqual(instruction);
}

public ref struct OpShiftRightLogical : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Shift => Inner.GetOperand<IdRef>("shift") ?? default;

    public OpShiftRightLogical(RefInstruction instruction) => Inner = instruction;
    public OpShiftRightLogical(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpShiftRightLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpShiftRightLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpShiftRightLogical(Span<int> buffer) => new OpShiftRightLogical(buffer);
    public static implicit operator OpShiftRightLogical(Instruction instruction) => new OpShiftRightLogical(instruction.AsRef());
    public static implicit operator OpShiftRightLogical(RefInstruction instruction) => new OpShiftRightLogical(instruction);
}

public ref struct OpShiftRightArithmetic : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Shift => Inner.GetOperand<IdRef>("shift") ?? default;

    public OpShiftRightArithmetic(RefInstruction instruction) => Inner = instruction;
    public OpShiftRightArithmetic(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpShiftRightArithmetic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpShiftRightArithmetic instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpShiftRightArithmetic(Span<int> buffer) => new OpShiftRightArithmetic(buffer);
    public static implicit operator OpShiftRightArithmetic(Instruction instruction) => new OpShiftRightArithmetic(instruction.AsRef());
    public static implicit operator OpShiftRightArithmetic(RefInstruction instruction) => new OpShiftRightArithmetic(instruction);
}

public ref struct OpShiftLeftLogical : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Shift => Inner.GetOperand<IdRef>("shift") ?? default;

    public OpShiftLeftLogical(RefInstruction instruction) => Inner = instruction;
    public OpShiftLeftLogical(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpShiftLeftLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpShiftLeftLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpShiftLeftLogical(Span<int> buffer) => new OpShiftLeftLogical(buffer);
    public static implicit operator OpShiftLeftLogical(Instruction instruction) => new OpShiftLeftLogical(instruction.AsRef());
    public static implicit operator OpShiftLeftLogical(RefInstruction instruction) => new OpShiftLeftLogical(instruction);
}

public ref struct OpBitwiseOr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpBitwiseOr(RefInstruction instruction) => Inner = instruction;
    public OpBitwiseOr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitwiseOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitwiseOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitwiseOr(Span<int> buffer) => new OpBitwiseOr(buffer);
    public static implicit operator OpBitwiseOr(Instruction instruction) => new OpBitwiseOr(instruction.AsRef());
    public static implicit operator OpBitwiseOr(RefInstruction instruction) => new OpBitwiseOr(instruction);
}

public ref struct OpBitwiseXor : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpBitwiseXor(RefInstruction instruction) => Inner = instruction;
    public OpBitwiseXor(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitwiseXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitwiseXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitwiseXor(Span<int> buffer) => new OpBitwiseXor(buffer);
    public static implicit operator OpBitwiseXor(Instruction instruction) => new OpBitwiseXor(instruction.AsRef());
    public static implicit operator OpBitwiseXor(RefInstruction instruction) => new OpBitwiseXor(instruction);
}

public ref struct OpBitwiseAnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpBitwiseAnd(RefInstruction instruction) => Inner = instruction;
    public OpBitwiseAnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitwiseAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitwiseAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitwiseAnd(Span<int> buffer) => new OpBitwiseAnd(buffer);
    public static implicit operator OpBitwiseAnd(Instruction instruction) => new OpBitwiseAnd(instruction.AsRef());
    public static implicit operator OpBitwiseAnd(RefInstruction instruction) => new OpBitwiseAnd(instruction);
}

public ref struct OpNot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpNot(RefInstruction instruction) => Inner = instruction;
    public OpNot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpNot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpNot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpNot(Span<int> buffer) => new OpNot(buffer);
    public static implicit operator OpNot(Instruction instruction) => new OpNot(instruction.AsRef());
    public static implicit operator OpNot(RefInstruction instruction) => new OpNot(instruction);
}

public ref struct OpBitFieldInsert : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Insert => Inner.GetOperand<IdRef>("insert") ?? default;
    public IdRef Offset => Inner.GetOperand<IdRef>("offset") ?? default;
    public IdRef Count => Inner.GetOperand<IdRef>("count") ?? default;

    public OpBitFieldInsert(RefInstruction instruction) => Inner = instruction;
    public OpBitFieldInsert(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitFieldInsert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitFieldInsert instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitFieldInsert(Span<int> buffer) => new OpBitFieldInsert(buffer);
    public static implicit operator OpBitFieldInsert(Instruction instruction) => new OpBitFieldInsert(instruction.AsRef());
    public static implicit operator OpBitFieldInsert(RefInstruction instruction) => new OpBitFieldInsert(instruction);
}

public ref struct OpBitFieldSExtract : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Offset => Inner.GetOperand<IdRef>("offset") ?? default;
    public IdRef Count => Inner.GetOperand<IdRef>("count") ?? default;

    public OpBitFieldSExtract(RefInstruction instruction) => Inner = instruction;
    public OpBitFieldSExtract(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitFieldSExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitFieldSExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitFieldSExtract(Span<int> buffer) => new OpBitFieldSExtract(buffer);
    public static implicit operator OpBitFieldSExtract(Instruction instruction) => new OpBitFieldSExtract(instruction.AsRef());
    public static implicit operator OpBitFieldSExtract(RefInstruction instruction) => new OpBitFieldSExtract(instruction);
}

public ref struct OpBitFieldUExtract : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Offset => Inner.GetOperand<IdRef>("offset") ?? default;
    public IdRef Count => Inner.GetOperand<IdRef>("count") ?? default;

    public OpBitFieldUExtract(RefInstruction instruction) => Inner = instruction;
    public OpBitFieldUExtract(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitFieldUExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitFieldUExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitFieldUExtract(Span<int> buffer) => new OpBitFieldUExtract(buffer);
    public static implicit operator OpBitFieldUExtract(Instruction instruction) => new OpBitFieldUExtract(instruction.AsRef());
    public static implicit operator OpBitFieldUExtract(RefInstruction instruction) => new OpBitFieldUExtract(instruction);
}

public ref struct OpBitReverse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;

    public OpBitReverse(RefInstruction instruction) => Inner = instruction;
    public OpBitReverse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitReverse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitReverse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitReverse(Span<int> buffer) => new OpBitReverse(buffer);
    public static implicit operator OpBitReverse(Instruction instruction) => new OpBitReverse(instruction.AsRef());
    public static implicit operator OpBitReverse(RefInstruction instruction) => new OpBitReverse(instruction);
}

public ref struct OpBitCount : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;

    public OpBitCount(RefInstruction instruction) => Inner = instruction;
    public OpBitCount(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBitCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBitCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBitCount(Span<int> buffer) => new OpBitCount(buffer);
    public static implicit operator OpBitCount(Instruction instruction) => new OpBitCount(instruction.AsRef());
    public static implicit operator OpBitCount(RefInstruction instruction) => new OpBitCount(instruction);
}

public ref struct OpDPdx : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdx(RefInstruction instruction) => Inner = instruction;
    public OpDPdx(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdx instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdx instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdx(Span<int> buffer) => new OpDPdx(buffer);
    public static implicit operator OpDPdx(Instruction instruction) => new OpDPdx(instruction.AsRef());
    public static implicit operator OpDPdx(RefInstruction instruction) => new OpDPdx(instruction);
}

public ref struct OpDPdy : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdy(RefInstruction instruction) => Inner = instruction;
    public OpDPdy(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdy instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdy instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdy(Span<int> buffer) => new OpDPdy(buffer);
    public static implicit operator OpDPdy(Instruction instruction) => new OpDPdy(instruction.AsRef());
    public static implicit operator OpDPdy(RefInstruction instruction) => new OpDPdy(instruction);
}

public ref struct OpFwidth : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpFwidth(RefInstruction instruction) => Inner = instruction;
    public OpFwidth(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFwidth instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFwidth instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFwidth(Span<int> buffer) => new OpFwidth(buffer);
    public static implicit operator OpFwidth(Instruction instruction) => new OpFwidth(instruction.AsRef());
    public static implicit operator OpFwidth(RefInstruction instruction) => new OpFwidth(instruction);
}

public ref struct OpDPdxFine : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdxFine(RefInstruction instruction) => Inner = instruction;
    public OpDPdxFine(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdxFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdxFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdxFine(Span<int> buffer) => new OpDPdxFine(buffer);
    public static implicit operator OpDPdxFine(Instruction instruction) => new OpDPdxFine(instruction.AsRef());
    public static implicit operator OpDPdxFine(RefInstruction instruction) => new OpDPdxFine(instruction);
}

public ref struct OpDPdyFine : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdyFine(RefInstruction instruction) => Inner = instruction;
    public OpDPdyFine(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdyFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdyFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdyFine(Span<int> buffer) => new OpDPdyFine(buffer);
    public static implicit operator OpDPdyFine(Instruction instruction) => new OpDPdyFine(instruction.AsRef());
    public static implicit operator OpDPdyFine(RefInstruction instruction) => new OpDPdyFine(instruction);
}

public ref struct OpFwidthFine : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpFwidthFine(RefInstruction instruction) => Inner = instruction;
    public OpFwidthFine(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFwidthFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFwidthFine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFwidthFine(Span<int> buffer) => new OpFwidthFine(buffer);
    public static implicit operator OpFwidthFine(Instruction instruction) => new OpFwidthFine(instruction.AsRef());
    public static implicit operator OpFwidthFine(RefInstruction instruction) => new OpFwidthFine(instruction);
}

public ref struct OpDPdxCoarse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdxCoarse(RefInstruction instruction) => Inner = instruction;
    public OpDPdxCoarse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdxCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdxCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdxCoarse(Span<int> buffer) => new OpDPdxCoarse(buffer);
    public static implicit operator OpDPdxCoarse(Instruction instruction) => new OpDPdxCoarse(instruction.AsRef());
    public static implicit operator OpDPdxCoarse(RefInstruction instruction) => new OpDPdxCoarse(instruction);
}

public ref struct OpDPdyCoarse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpDPdyCoarse(RefInstruction instruction) => Inner = instruction;
    public OpDPdyCoarse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDPdyCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDPdyCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDPdyCoarse(Span<int> buffer) => new OpDPdyCoarse(buffer);
    public static implicit operator OpDPdyCoarse(Instruction instruction) => new OpDPdyCoarse(instruction.AsRef());
    public static implicit operator OpDPdyCoarse(RefInstruction instruction) => new OpDPdyCoarse(instruction);
}

public ref struct OpFwidthCoarse : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpFwidthCoarse(RefInstruction instruction) => Inner = instruction;
    public OpFwidthCoarse(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFwidthCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFwidthCoarse instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFwidthCoarse(Span<int> buffer) => new OpFwidthCoarse(buffer);
    public static implicit operator OpFwidthCoarse(Instruction instruction) => new OpFwidthCoarse(instruction.AsRef());
    public static implicit operator OpFwidthCoarse(RefInstruction instruction) => new OpFwidthCoarse(instruction);
}

public ref struct OpEmitVertex : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpEmitVertex(RefInstruction instruction) => Inner = instruction;
    public OpEmitVertex(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEmitVertex instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEmitVertex instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEmitVertex(Span<int> buffer) => new OpEmitVertex(buffer);
    public static implicit operator OpEmitVertex(Instruction instruction) => new OpEmitVertex(instruction.AsRef());
    public static implicit operator OpEmitVertex(RefInstruction instruction) => new OpEmitVertex(instruction);
}

public ref struct OpEndPrimitive : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpEndPrimitive(RefInstruction instruction) => Inner = instruction;
    public OpEndPrimitive(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEndPrimitive instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEndPrimitive instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEndPrimitive(Span<int> buffer) => new OpEndPrimitive(buffer);
    public static implicit operator OpEndPrimitive(Instruction instruction) => new OpEndPrimitive(instruction.AsRef());
    public static implicit operator OpEndPrimitive(RefInstruction instruction) => new OpEndPrimitive(instruction);
}

public ref struct OpEmitStreamVertex : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Stream => Inner.GetOperand<IdRef>("stream") ?? default;

    public OpEmitStreamVertex(RefInstruction instruction) => Inner = instruction;
    public OpEmitStreamVertex(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEmitStreamVertex instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEmitStreamVertex instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEmitStreamVertex(Span<int> buffer) => new OpEmitStreamVertex(buffer);
    public static implicit operator OpEmitStreamVertex(Instruction instruction) => new OpEmitStreamVertex(instruction.AsRef());
    public static implicit operator OpEmitStreamVertex(RefInstruction instruction) => new OpEmitStreamVertex(instruction);
}

public ref struct OpEndStreamPrimitive : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Stream => Inner.GetOperand<IdRef>("stream") ?? default;

    public OpEndStreamPrimitive(RefInstruction instruction) => Inner = instruction;
    public OpEndStreamPrimitive(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEndStreamPrimitive instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEndStreamPrimitive instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEndStreamPrimitive(Span<int> buffer) => new OpEndStreamPrimitive(buffer);
    public static implicit operator OpEndStreamPrimitive(Instruction instruction) => new OpEndStreamPrimitive(instruction.AsRef());
    public static implicit operator OpEndStreamPrimitive(RefInstruction instruction) => new OpEndStreamPrimitive(instruction);
}

public ref struct OpControlBarrier : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpControlBarrier(RefInstruction instruction) => Inner = instruction;
    public OpControlBarrier(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpControlBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpControlBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpControlBarrier(Span<int> buffer) => new OpControlBarrier(buffer);
    public static implicit operator OpControlBarrier(Instruction instruction) => new OpControlBarrier(instruction.AsRef());
    public static implicit operator OpControlBarrier(RefInstruction instruction) => new OpControlBarrier(instruction);
}

public ref struct OpMemoryBarrier : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpMemoryBarrier(RefInstruction instruction) => Inner = instruction;
    public OpMemoryBarrier(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemoryBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemoryBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemoryBarrier(Span<int> buffer) => new OpMemoryBarrier(buffer);
    public static implicit operator OpMemoryBarrier(Instruction instruction) => new OpMemoryBarrier(instruction.AsRef());
    public static implicit operator OpMemoryBarrier(RefInstruction instruction) => new OpMemoryBarrier(instruction);
}

public ref struct OpAtomicLoad : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpAtomicLoad(RefInstruction instruction) => Inner = instruction;
    public OpAtomicLoad(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicLoad instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicLoad instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicLoad(Span<int> buffer) => new OpAtomicLoad(buffer);
    public static implicit operator OpAtomicLoad(Instruction instruction) => new OpAtomicLoad(instruction.AsRef());
    public static implicit operator OpAtomicLoad(RefInstruction instruction) => new OpAtomicLoad(instruction);
}

public ref struct OpAtomicStore : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicStore(RefInstruction instruction) => Inner = instruction;
    public OpAtomicStore(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicStore instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicStore instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicStore(Span<int> buffer) => new OpAtomicStore(buffer);
    public static implicit operator OpAtomicStore(Instruction instruction) => new OpAtomicStore(instruction.AsRef());
    public static implicit operator OpAtomicStore(RefInstruction instruction) => new OpAtomicStore(instruction);
}

public ref struct OpAtomicExchange : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicExchange(RefInstruction instruction) => Inner = instruction;
    public OpAtomicExchange(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicExchange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicExchange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicExchange(Span<int> buffer) => new OpAtomicExchange(buffer);
    public static implicit operator OpAtomicExchange(Instruction instruction) => new OpAtomicExchange(instruction.AsRef());
    public static implicit operator OpAtomicExchange(RefInstruction instruction) => new OpAtomicExchange(instruction);
}

public ref struct OpAtomicCompareExchange : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Equal => Inner.GetOperand<IdMemorySemantics>("equal") ?? default;
    public IdMemorySemantics Unequal => Inner.GetOperand<IdMemorySemantics>("unequal") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Comparator => Inner.GetOperand<IdRef>("comparator") ?? default;

    public OpAtomicCompareExchange(RefInstruction instruction) => Inner = instruction;
    public OpAtomicCompareExchange(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicCompareExchange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicCompareExchange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicCompareExchange(Span<int> buffer) => new OpAtomicCompareExchange(buffer);
    public static implicit operator OpAtomicCompareExchange(Instruction instruction) => new OpAtomicCompareExchange(instruction.AsRef());
    public static implicit operator OpAtomicCompareExchange(RefInstruction instruction) => new OpAtomicCompareExchange(instruction);
}

public ref struct OpAtomicCompareExchangeWeak : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Equal => Inner.GetOperand<IdMemorySemantics>("equal") ?? default;
    public IdMemorySemantics Unequal => Inner.GetOperand<IdMemorySemantics>("unequal") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Comparator => Inner.GetOperand<IdRef>("comparator") ?? default;

    public OpAtomicCompareExchangeWeak(RefInstruction instruction) => Inner = instruction;
    public OpAtomicCompareExchangeWeak(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicCompareExchangeWeak instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicCompareExchangeWeak instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicCompareExchangeWeak(Span<int> buffer) => new OpAtomicCompareExchangeWeak(buffer);
    public static implicit operator OpAtomicCompareExchangeWeak(Instruction instruction) => new OpAtomicCompareExchangeWeak(instruction.AsRef());
    public static implicit operator OpAtomicCompareExchangeWeak(RefInstruction instruction) => new OpAtomicCompareExchangeWeak(instruction);
}

public ref struct OpAtomicIIncrement : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpAtomicIIncrement(RefInstruction instruction) => Inner = instruction;
    public OpAtomicIIncrement(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicIIncrement instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicIIncrement instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicIIncrement(Span<int> buffer) => new OpAtomicIIncrement(buffer);
    public static implicit operator OpAtomicIIncrement(Instruction instruction) => new OpAtomicIIncrement(instruction.AsRef());
    public static implicit operator OpAtomicIIncrement(RefInstruction instruction) => new OpAtomicIIncrement(instruction);
}

public ref struct OpAtomicIDecrement : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpAtomicIDecrement(RefInstruction instruction) => Inner = instruction;
    public OpAtomicIDecrement(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicIDecrement instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicIDecrement instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicIDecrement(Span<int> buffer) => new OpAtomicIDecrement(buffer);
    public static implicit operator OpAtomicIDecrement(Instruction instruction) => new OpAtomicIDecrement(instruction.AsRef());
    public static implicit operator OpAtomicIDecrement(RefInstruction instruction) => new OpAtomicIDecrement(instruction);
}

public ref struct OpAtomicIAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicIAdd(RefInstruction instruction) => Inner = instruction;
    public OpAtomicIAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicIAdd(Span<int> buffer) => new OpAtomicIAdd(buffer);
    public static implicit operator OpAtomicIAdd(Instruction instruction) => new OpAtomicIAdd(instruction.AsRef());
    public static implicit operator OpAtomicIAdd(RefInstruction instruction) => new OpAtomicIAdd(instruction);
}

public ref struct OpAtomicISub : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicISub(RefInstruction instruction) => Inner = instruction;
    public OpAtomicISub(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicISub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicISub instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicISub(Span<int> buffer) => new OpAtomicISub(buffer);
    public static implicit operator OpAtomicISub(Instruction instruction) => new OpAtomicISub(instruction.AsRef());
    public static implicit operator OpAtomicISub(RefInstruction instruction) => new OpAtomicISub(instruction);
}

public ref struct OpAtomicSMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicSMin(RefInstruction instruction) => Inner = instruction;
    public OpAtomicSMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicSMin(Span<int> buffer) => new OpAtomicSMin(buffer);
    public static implicit operator OpAtomicSMin(Instruction instruction) => new OpAtomicSMin(instruction.AsRef());
    public static implicit operator OpAtomicSMin(RefInstruction instruction) => new OpAtomicSMin(instruction);
}

public ref struct OpAtomicUMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicUMin(RefInstruction instruction) => Inner = instruction;
    public OpAtomicUMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicUMin(Span<int> buffer) => new OpAtomicUMin(buffer);
    public static implicit operator OpAtomicUMin(Instruction instruction) => new OpAtomicUMin(instruction.AsRef());
    public static implicit operator OpAtomicUMin(RefInstruction instruction) => new OpAtomicUMin(instruction);
}

public ref struct OpAtomicSMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicSMax(RefInstruction instruction) => Inner = instruction;
    public OpAtomicSMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicSMax(Span<int> buffer) => new OpAtomicSMax(buffer);
    public static implicit operator OpAtomicSMax(Instruction instruction) => new OpAtomicSMax(instruction.AsRef());
    public static implicit operator OpAtomicSMax(RefInstruction instruction) => new OpAtomicSMax(instruction);
}

public ref struct OpAtomicUMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicUMax(RefInstruction instruction) => Inner = instruction;
    public OpAtomicUMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicUMax(Span<int> buffer) => new OpAtomicUMax(buffer);
    public static implicit operator OpAtomicUMax(Instruction instruction) => new OpAtomicUMax(instruction.AsRef());
    public static implicit operator OpAtomicUMax(RefInstruction instruction) => new OpAtomicUMax(instruction);
}

public ref struct OpAtomicAnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicAnd(RefInstruction instruction) => Inner = instruction;
    public OpAtomicAnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicAnd(Span<int> buffer) => new OpAtomicAnd(buffer);
    public static implicit operator OpAtomicAnd(Instruction instruction) => new OpAtomicAnd(instruction.AsRef());
    public static implicit operator OpAtomicAnd(RefInstruction instruction) => new OpAtomicAnd(instruction);
}

public ref struct OpAtomicOr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicOr(RefInstruction instruction) => Inner = instruction;
    public OpAtomicOr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicOr(Span<int> buffer) => new OpAtomicOr(buffer);
    public static implicit operator OpAtomicOr(Instruction instruction) => new OpAtomicOr(instruction.AsRef());
    public static implicit operator OpAtomicOr(RefInstruction instruction) => new OpAtomicOr(instruction);
}

public ref struct OpAtomicXor : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicXor(RefInstruction instruction) => Inner = instruction;
    public OpAtomicXor(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicXor(Span<int> buffer) => new OpAtomicXor(buffer);
    public static implicit operator OpAtomicXor(Instruction instruction) => new OpAtomicXor(instruction.AsRef());
    public static implicit operator OpAtomicXor(RefInstruction instruction) => new OpAtomicXor(instruction);
}

public ref struct OpPhi : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public PairIdRefIdRef VariableParent => Inner.GetOperand<PairIdRefIdRef>("variableParent") ?? default;

    public OpPhi(RefInstruction instruction) => Inner = instruction;
    public OpPhi(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPhi instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPhi instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPhi(Span<int> buffer) => new OpPhi(buffer);
    public static implicit operator OpPhi(Instruction instruction) => new OpPhi(instruction.AsRef());
    public static implicit operator OpPhi(RefInstruction instruction) => new OpPhi(instruction);
}

public ref struct OpLoopMerge : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef MergeBlock => Inner.GetOperand<IdRef>("mergeBlock") ?? default;
    public IdRef ContinueTarget => Inner.GetOperand<IdRef>("continueTarget") ?? default;
    public LoopControlMask LoopControl => Inner.GetEnumOperand<LoopControlMask>("loopcontrol");

    public OpLoopMerge(RefInstruction instruction) => Inner = instruction;
    public OpLoopMerge(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLoopMerge instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLoopMerge instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLoopMerge(Span<int> buffer) => new OpLoopMerge(buffer);
    public static implicit operator OpLoopMerge(Instruction instruction) => new OpLoopMerge(instruction.AsRef());
    public static implicit operator OpLoopMerge(RefInstruction instruction) => new OpLoopMerge(instruction);
}

public ref struct OpSelectionMerge : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef MergeBlock => Inner.GetOperand<IdRef>("mergeBlock") ?? default;
    public SelectionControlMask SelectionControl => Inner.GetEnumOperand<SelectionControlMask>("selectioncontrol");

    public OpSelectionMerge(RefInstruction instruction) => Inner = instruction;
    public OpSelectionMerge(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSelectionMerge instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSelectionMerge instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSelectionMerge(Span<int> buffer) => new OpSelectionMerge(buffer);
    public static implicit operator OpSelectionMerge(Instruction instruction) => new OpSelectionMerge(instruction.AsRef());
    public static implicit operator OpSelectionMerge(RefInstruction instruction) => new OpSelectionMerge(instruction);
}

public ref struct OpLabel : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpLabel(RefInstruction instruction) => Inner = instruction;
    public OpLabel(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLabel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLabel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLabel(Span<int> buffer) => new OpLabel(buffer);
    public static implicit operator OpLabel(Instruction instruction) => new OpLabel(instruction.AsRef());
    public static implicit operator OpLabel(RefInstruction instruction) => new OpLabel(instruction);
}

public ref struct OpBranch : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef TargetLabel => Inner.GetOperand<IdRef>("targetLabel") ?? default;

    public OpBranch(RefInstruction instruction) => Inner = instruction;
    public OpBranch(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBranch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBranch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBranch(Span<int> buffer) => new OpBranch(buffer);
    public static implicit operator OpBranch(Instruction instruction) => new OpBranch(instruction.AsRef());
    public static implicit operator OpBranch(RefInstruction instruction) => new OpBranch(instruction);
}

public ref struct OpBranchConditional : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Condition => Inner.GetOperand<IdRef>("condition") ?? default;
    public IdRef TrueLabel => Inner.GetOperand<IdRef>("trueLabel") ?? default;
    public IdRef FalseLabel => Inner.GetOperand<IdRef>("falseLabel") ?? default;
    public LiteralInteger Branchweights => Inner.GetOperand<LiteralInteger>("branchweights") ?? default;

    public OpBranchConditional(RefInstruction instruction) => Inner = instruction;
    public OpBranchConditional(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBranchConditional instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBranchConditional instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBranchConditional(Span<int> buffer) => new OpBranchConditional(buffer);
    public static implicit operator OpBranchConditional(Instruction instruction) => new OpBranchConditional(instruction.AsRef());
    public static implicit operator OpBranchConditional(RefInstruction instruction) => new OpBranchConditional(instruction);
}

public ref struct OpSwitch : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Selector => Inner.GetOperand<IdRef>("selector") ?? default;
    public IdRef Default => Inner.GetOperand<IdRef>("defaultId") ?? default;
    public PairLiteralIntegerIdRef Target => Inner.GetOperand<PairLiteralIntegerIdRef>("target") ?? default;

    public OpSwitch(RefInstruction instruction) => Inner = instruction;
    public OpSwitch(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSwitch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSwitch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSwitch(Span<int> buffer) => new OpSwitch(buffer);
    public static implicit operator OpSwitch(Instruction instruction) => new OpSwitch(instruction.AsRef());
    public static implicit operator OpSwitch(RefInstruction instruction) => new OpSwitch(instruction);
}

public ref struct OpKill : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpKill(RefInstruction instruction) => Inner = instruction;
    public OpKill(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpKill instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpKill instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpKill(Span<int> buffer) => new OpKill(buffer);
    public static implicit operator OpKill(Instruction instruction) => new OpKill(instruction.AsRef());
    public static implicit operator OpKill(RefInstruction instruction) => new OpKill(instruction);
}

public ref struct OpReturn : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpReturn(RefInstruction instruction) => Inner = instruction;
    public OpReturn(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReturn instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReturn instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReturn(Span<int> buffer) => new OpReturn(buffer);
    public static implicit operator OpReturn(Instruction instruction) => new OpReturn(instruction.AsRef());
    public static implicit operator OpReturn(RefInstruction instruction) => new OpReturn(instruction);
}

public ref struct OpReturnValue : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpReturnValue(RefInstruction instruction) => Inner = instruction;
    public OpReturnValue(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReturnValue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReturnValue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReturnValue(Span<int> buffer) => new OpReturnValue(buffer);
    public static implicit operator OpReturnValue(Instruction instruction) => new OpReturnValue(instruction.AsRef());
    public static implicit operator OpReturnValue(RefInstruction instruction) => new OpReturnValue(instruction);
}

public ref struct OpUnreachable : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpUnreachable(RefInstruction instruction) => Inner = instruction;
    public OpUnreachable(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUnreachable instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUnreachable instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUnreachable(Span<int> buffer) => new OpUnreachable(buffer);
    public static implicit operator OpUnreachable(Instruction instruction) => new OpUnreachable(instruction.AsRef());
    public static implicit operator OpUnreachable(RefInstruction instruction) => new OpUnreachable(instruction);
}

public ref struct OpLifetimeStart : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public LiteralInteger Size => Inner.GetOperand<LiteralInteger>("size") ?? default;

    public OpLifetimeStart(RefInstruction instruction) => Inner = instruction;
    public OpLifetimeStart(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLifetimeStart instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLifetimeStart instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLifetimeStart(Span<int> buffer) => new OpLifetimeStart(buffer);
    public static implicit operator OpLifetimeStart(Instruction instruction) => new OpLifetimeStart(instruction.AsRef());
    public static implicit operator OpLifetimeStart(RefInstruction instruction) => new OpLifetimeStart(instruction);
}

public ref struct OpLifetimeStop : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public LiteralInteger Size => Inner.GetOperand<LiteralInteger>("size") ?? default;

    public OpLifetimeStop(RefInstruction instruction) => Inner = instruction;
    public OpLifetimeStop(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLifetimeStop instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLifetimeStop instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLifetimeStop(Span<int> buffer) => new OpLifetimeStop(buffer);
    public static implicit operator OpLifetimeStop(Instruction instruction) => new OpLifetimeStop(instruction.AsRef());
    public static implicit operator OpLifetimeStop(RefInstruction instruction) => new OpLifetimeStop(instruction);
}

public ref struct OpGroupAsyncCopy : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Destination => Inner.GetOperand<IdRef>("destination") ?? default;
    public IdRef Source => Inner.GetOperand<IdRef>("source") ?? default;
    public IdRef NumElements => Inner.GetOperand<IdRef>("numElements") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;

    public OpGroupAsyncCopy(RefInstruction instruction) => Inner = instruction;
    public OpGroupAsyncCopy(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupAsyncCopy instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupAsyncCopy instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupAsyncCopy(Span<int> buffer) => new OpGroupAsyncCopy(buffer);
    public static implicit operator OpGroupAsyncCopy(Instruction instruction) => new OpGroupAsyncCopy(instruction.AsRef());
    public static implicit operator OpGroupAsyncCopy(RefInstruction instruction) => new OpGroupAsyncCopy(instruction);
}

public ref struct OpGroupWaitEvents : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef NumEvents => Inner.GetOperand<IdRef>("numEvents") ?? default;
    public IdRef EventsList => Inner.GetOperand<IdRef>("eventsList") ?? default;

    public OpGroupWaitEvents(RefInstruction instruction) => Inner = instruction;
    public OpGroupWaitEvents(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupWaitEvents instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupWaitEvents instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupWaitEvents(Span<int> buffer) => new OpGroupWaitEvents(buffer);
    public static implicit operator OpGroupWaitEvents(Instruction instruction) => new OpGroupWaitEvents(instruction.AsRef());
    public static implicit operator OpGroupWaitEvents(RefInstruction instruction) => new OpGroupWaitEvents(instruction);
}

public ref struct OpGroupAll : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupAll(RefInstruction instruction) => Inner = instruction;
    public OpGroupAll(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupAll(Span<int> buffer) => new OpGroupAll(buffer);
    public static implicit operator OpGroupAll(Instruction instruction) => new OpGroupAll(instruction.AsRef());
    public static implicit operator OpGroupAll(RefInstruction instruction) => new OpGroupAll(instruction);
}

public ref struct OpGroupAny : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupAny(RefInstruction instruction) => Inner = instruction;
    public OpGroupAny(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupAny(Span<int> buffer) => new OpGroupAny(buffer);
    public static implicit operator OpGroupAny(Instruction instruction) => new OpGroupAny(instruction.AsRef());
    public static implicit operator OpGroupAny(RefInstruction instruction) => new OpGroupAny(instruction);
}

public ref struct OpGroupBroadcast : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef LocalId => Inner.GetOperand<IdRef>("localId") ?? default;

    public OpGroupBroadcast(RefInstruction instruction) => Inner = instruction;
    public OpGroupBroadcast(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupBroadcast(Span<int> buffer) => new OpGroupBroadcast(buffer);
    public static implicit operator OpGroupBroadcast(Instruction instruction) => new OpGroupBroadcast(instruction.AsRef());
    public static implicit operator OpGroupBroadcast(RefInstruction instruction) => new OpGroupBroadcast(instruction);
}

public ref struct OpGroupIAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupIAdd(RefInstruction instruction) => Inner = instruction;
    public OpGroupIAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupIAdd(Span<int> buffer) => new OpGroupIAdd(buffer);
    public static implicit operator OpGroupIAdd(Instruction instruction) => new OpGroupIAdd(instruction.AsRef());
    public static implicit operator OpGroupIAdd(RefInstruction instruction) => new OpGroupIAdd(instruction);
}

public ref struct OpGroupFAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFAdd(RefInstruction instruction) => Inner = instruction;
    public OpGroupFAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFAdd(Span<int> buffer) => new OpGroupFAdd(buffer);
    public static implicit operator OpGroupFAdd(Instruction instruction) => new OpGroupFAdd(instruction.AsRef());
    public static implicit operator OpGroupFAdd(RefInstruction instruction) => new OpGroupFAdd(instruction);
}

public ref struct OpGroupFMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupFMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFMin(Span<int> buffer) => new OpGroupFMin(buffer);
    public static implicit operator OpGroupFMin(Instruction instruction) => new OpGroupFMin(instruction.AsRef());
    public static implicit operator OpGroupFMin(RefInstruction instruction) => new OpGroupFMin(instruction);
}

public ref struct OpGroupUMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupUMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupUMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupUMin(Span<int> buffer) => new OpGroupUMin(buffer);
    public static implicit operator OpGroupUMin(Instruction instruction) => new OpGroupUMin(instruction.AsRef());
    public static implicit operator OpGroupUMin(RefInstruction instruction) => new OpGroupUMin(instruction);
}

public ref struct OpGroupSMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupSMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupSMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupSMin(Span<int> buffer) => new OpGroupSMin(buffer);
    public static implicit operator OpGroupSMin(Instruction instruction) => new OpGroupSMin(instruction.AsRef());
    public static implicit operator OpGroupSMin(RefInstruction instruction) => new OpGroupSMin(instruction);
}

public ref struct OpGroupFMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupFMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFMax(Span<int> buffer) => new OpGroupFMax(buffer);
    public static implicit operator OpGroupFMax(Instruction instruction) => new OpGroupFMax(instruction.AsRef());
    public static implicit operator OpGroupFMax(RefInstruction instruction) => new OpGroupFMax(instruction);
}

public ref struct OpGroupUMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupUMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupUMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupUMax(Span<int> buffer) => new OpGroupUMax(buffer);
    public static implicit operator OpGroupUMax(Instruction instruction) => new OpGroupUMax(instruction.AsRef());
    public static implicit operator OpGroupUMax(RefInstruction instruction) => new OpGroupUMax(instruction);
}

public ref struct OpGroupSMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupSMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupSMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupSMax(Span<int> buffer) => new OpGroupSMax(buffer);
    public static implicit operator OpGroupSMax(Instruction instruction) => new OpGroupSMax(instruction.AsRef());
    public static implicit operator OpGroupSMax(RefInstruction instruction) => new OpGroupSMax(instruction);
}

public ref struct OpReadPipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReadPipe(RefInstruction instruction) => Inner = instruction;
    public OpReadPipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReadPipe(Span<int> buffer) => new OpReadPipe(buffer);
    public static implicit operator OpReadPipe(Instruction instruction) => new OpReadPipe(instruction.AsRef());
    public static implicit operator OpReadPipe(RefInstruction instruction) => new OpReadPipe(instruction);
}

public ref struct OpWritePipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpWritePipe(RefInstruction instruction) => Inner = instruction;
    public OpWritePipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpWritePipe(Span<int> buffer) => new OpWritePipe(buffer);
    public static implicit operator OpWritePipe(Instruction instruction) => new OpWritePipe(instruction.AsRef());
    public static implicit operator OpWritePipe(RefInstruction instruction) => new OpWritePipe(instruction);
}

public ref struct OpReservedReadPipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReservedReadPipe(RefInstruction instruction) => Inner = instruction;
    public OpReservedReadPipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReservedReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReservedReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReservedReadPipe(Span<int> buffer) => new OpReservedReadPipe(buffer);
    public static implicit operator OpReservedReadPipe(Instruction instruction) => new OpReservedReadPipe(instruction.AsRef());
    public static implicit operator OpReservedReadPipe(RefInstruction instruction) => new OpReservedReadPipe(instruction);
}

public ref struct OpReservedWritePipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReservedWritePipe(RefInstruction instruction) => Inner = instruction;
    public OpReservedWritePipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReservedWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReservedWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReservedWritePipe(Span<int> buffer) => new OpReservedWritePipe(buffer);
    public static implicit operator OpReservedWritePipe(Instruction instruction) => new OpReservedWritePipe(instruction.AsRef());
    public static implicit operator OpReservedWritePipe(RefInstruction instruction) => new OpReservedWritePipe(instruction);
}

public ref struct OpReserveReadPipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef NumPackets => Inner.GetOperand<IdRef>("numPackets") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReserveReadPipePackets(RefInstruction instruction) => Inner = instruction;
    public OpReserveReadPipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReserveReadPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReserveReadPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReserveReadPipePackets(Span<int> buffer) => new OpReserveReadPipePackets(buffer);
    public static implicit operator OpReserveReadPipePackets(Instruction instruction) => new OpReserveReadPipePackets(instruction.AsRef());
    public static implicit operator OpReserveReadPipePackets(RefInstruction instruction) => new OpReserveReadPipePackets(instruction);
}

public ref struct OpReserveWritePipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef NumPackets => Inner.GetOperand<IdRef>("numPackets") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReserveWritePipePackets(RefInstruction instruction) => Inner = instruction;
    public OpReserveWritePipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReserveWritePipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReserveWritePipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReserveWritePipePackets(Span<int> buffer) => new OpReserveWritePipePackets(buffer);
    public static implicit operator OpReserveWritePipePackets(Instruction instruction) => new OpReserveWritePipePackets(instruction.AsRef());
    public static implicit operator OpReserveWritePipePackets(RefInstruction instruction) => new OpReserveWritePipePackets(instruction);
}

public ref struct OpCommitReadPipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpCommitReadPipe(RefInstruction instruction) => Inner = instruction;
    public OpCommitReadPipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCommitReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCommitReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCommitReadPipe(Span<int> buffer) => new OpCommitReadPipe(buffer);
    public static implicit operator OpCommitReadPipe(Instruction instruction) => new OpCommitReadPipe(instruction.AsRef());
    public static implicit operator OpCommitReadPipe(RefInstruction instruction) => new OpCommitReadPipe(instruction);
}

public ref struct OpCommitWritePipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpCommitWritePipe(RefInstruction instruction) => Inner = instruction;
    public OpCommitWritePipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCommitWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCommitWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCommitWritePipe(Span<int> buffer) => new OpCommitWritePipe(buffer);
    public static implicit operator OpCommitWritePipe(Instruction instruction) => new OpCommitWritePipe(instruction.AsRef());
    public static implicit operator OpCommitWritePipe(RefInstruction instruction) => new OpCommitWritePipe(instruction);
}

public ref struct OpIsValidReserveId : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;

    public OpIsValidReserveId(RefInstruction instruction) => Inner = instruction;
    public OpIsValidReserveId(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsValidReserveId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsValidReserveId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsValidReserveId(Span<int> buffer) => new OpIsValidReserveId(buffer);
    public static implicit operator OpIsValidReserveId(Instruction instruction) => new OpIsValidReserveId(instruction.AsRef());
    public static implicit operator OpIsValidReserveId(RefInstruction instruction) => new OpIsValidReserveId(instruction);
}

public ref struct OpGetNumPipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGetNumPipePackets(RefInstruction instruction) => Inner = instruction;
    public OpGetNumPipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetNumPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetNumPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetNumPipePackets(Span<int> buffer) => new OpGetNumPipePackets(buffer);
    public static implicit operator OpGetNumPipePackets(Instruction instruction) => new OpGetNumPipePackets(instruction.AsRef());
    public static implicit operator OpGetNumPipePackets(RefInstruction instruction) => new OpGetNumPipePackets(instruction);
}

public ref struct OpGetMaxPipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGetMaxPipePackets(RefInstruction instruction) => Inner = instruction;
    public OpGetMaxPipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetMaxPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetMaxPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetMaxPipePackets(Span<int> buffer) => new OpGetMaxPipePackets(buffer);
    public static implicit operator OpGetMaxPipePackets(Instruction instruction) => new OpGetMaxPipePackets(instruction.AsRef());
    public static implicit operator OpGetMaxPipePackets(RefInstruction instruction) => new OpGetMaxPipePackets(instruction);
}

public ref struct OpGroupReserveReadPipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef NumPackets => Inner.GetOperand<IdRef>("numPackets") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGroupReserveReadPipePackets(RefInstruction instruction) => Inner = instruction;
    public OpGroupReserveReadPipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupReserveReadPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupReserveReadPipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupReserveReadPipePackets(Span<int> buffer) => new OpGroupReserveReadPipePackets(buffer);
    public static implicit operator OpGroupReserveReadPipePackets(Instruction instruction) => new OpGroupReserveReadPipePackets(instruction.AsRef());
    public static implicit operator OpGroupReserveReadPipePackets(RefInstruction instruction) => new OpGroupReserveReadPipePackets(instruction);
}

public ref struct OpGroupReserveWritePipePackets : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef NumPackets => Inner.GetOperand<IdRef>("numPackets") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGroupReserveWritePipePackets(RefInstruction instruction) => Inner = instruction;
    public OpGroupReserveWritePipePackets(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupReserveWritePipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupReserveWritePipePackets instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupReserveWritePipePackets(Span<int> buffer) => new OpGroupReserveWritePipePackets(buffer);
    public static implicit operator OpGroupReserveWritePipePackets(Instruction instruction) => new OpGroupReserveWritePipePackets(instruction.AsRef());
    public static implicit operator OpGroupReserveWritePipePackets(RefInstruction instruction) => new OpGroupReserveWritePipePackets(instruction);
}

public ref struct OpGroupCommitReadPipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGroupCommitReadPipe(RefInstruction instruction) => Inner = instruction;
    public OpGroupCommitReadPipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupCommitReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupCommitReadPipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupCommitReadPipe(Span<int> buffer) => new OpGroupCommitReadPipe(buffer);
    public static implicit operator OpGroupCommitReadPipe(Instruction instruction) => new OpGroupCommitReadPipe(instruction.AsRef());
    public static implicit operator OpGroupCommitReadPipe(RefInstruction instruction) => new OpGroupCommitReadPipe(instruction);
}

public ref struct OpGroupCommitWritePipe : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Pipe => Inner.GetOperand<IdRef>("pipe") ?? default;
    public IdRef ReserveId => Inner.GetOperand<IdRef>("reserveId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpGroupCommitWritePipe(RefInstruction instruction) => Inner = instruction;
    public OpGroupCommitWritePipe(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupCommitWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupCommitWritePipe instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupCommitWritePipe(Span<int> buffer) => new OpGroupCommitWritePipe(buffer);
    public static implicit operator OpGroupCommitWritePipe(Instruction instruction) => new OpGroupCommitWritePipe(instruction.AsRef());
    public static implicit operator OpGroupCommitWritePipe(RefInstruction instruction) => new OpGroupCommitWritePipe(instruction);
}

public ref struct OpEnqueueMarker : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Queue => Inner.GetOperand<IdRef>("queue") ?? default;
    public IdRef NumEvents => Inner.GetOperand<IdRef>("numEvents") ?? default;
    public IdRef WaitEvents => Inner.GetOperand<IdRef>("waitEvents") ?? default;
    public IdRef RetEvent => Inner.GetOperand<IdRef>("retEvent") ?? default;

    public OpEnqueueMarker(RefInstruction instruction) => Inner = instruction;
    public OpEnqueueMarker(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEnqueueMarker instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEnqueueMarker instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEnqueueMarker(Span<int> buffer) => new OpEnqueueMarker(buffer);
    public static implicit operator OpEnqueueMarker(Instruction instruction) => new OpEnqueueMarker(instruction.AsRef());
    public static implicit operator OpEnqueueMarker(RefInstruction instruction) => new OpEnqueueMarker(instruction);
}

public ref struct OpEnqueueKernel : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Queue => Inner.GetOperand<IdRef>("queue") ?? default;
    public IdRef Flags => Inner.GetOperand<IdRef>("flags") ?? default;
    public IdRef NDRange => Inner.GetOperand<IdRef>("nDRange") ?? default;
    public IdRef NumEvents => Inner.GetOperand<IdRef>("numEvents") ?? default;
    public IdRef WaitEvents => Inner.GetOperand<IdRef>("waitEvents") ?? default;
    public IdRef RetEvent => Inner.GetOperand<IdRef>("retEvent") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;
    public IdRef LocalSize => Inner.GetOperand<IdRef>("localSize") ?? default;

    public OpEnqueueKernel(RefInstruction instruction) => Inner = instruction;
    public OpEnqueueKernel(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEnqueueKernel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEnqueueKernel instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEnqueueKernel(Span<int> buffer) => new OpEnqueueKernel(buffer);
    public static implicit operator OpEnqueueKernel(Instruction instruction) => new OpEnqueueKernel(instruction.AsRef());
    public static implicit operator OpEnqueueKernel(RefInstruction instruction) => new OpEnqueueKernel(instruction);
}

public ref struct OpGetKernelNDrangeSubGroupCount : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef NDRange => Inner.GetOperand<IdRef>("nDRange") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelNDrangeSubGroupCount(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelNDrangeSubGroupCount(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelNDrangeSubGroupCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelNDrangeSubGroupCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelNDrangeSubGroupCount(Span<int> buffer) => new OpGetKernelNDrangeSubGroupCount(buffer);
    public static implicit operator OpGetKernelNDrangeSubGroupCount(Instruction instruction) => new OpGetKernelNDrangeSubGroupCount(instruction.AsRef());
    public static implicit operator OpGetKernelNDrangeSubGroupCount(RefInstruction instruction) => new OpGetKernelNDrangeSubGroupCount(instruction);
}

public ref struct OpGetKernelNDrangeMaxSubGroupSize : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef NDRange => Inner.GetOperand<IdRef>("nDRange") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelNDrangeMaxSubGroupSize(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelNDrangeMaxSubGroupSize(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelNDrangeMaxSubGroupSize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelNDrangeMaxSubGroupSize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelNDrangeMaxSubGroupSize(Span<int> buffer) => new OpGetKernelNDrangeMaxSubGroupSize(buffer);
    public static implicit operator OpGetKernelNDrangeMaxSubGroupSize(Instruction instruction) => new OpGetKernelNDrangeMaxSubGroupSize(instruction.AsRef());
    public static implicit operator OpGetKernelNDrangeMaxSubGroupSize(RefInstruction instruction) => new OpGetKernelNDrangeMaxSubGroupSize(instruction);
}

public ref struct OpGetKernelWorkGroupSize : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelWorkGroupSize(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelWorkGroupSize(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelWorkGroupSize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelWorkGroupSize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelWorkGroupSize(Span<int> buffer) => new OpGetKernelWorkGroupSize(buffer);
    public static implicit operator OpGetKernelWorkGroupSize(Instruction instruction) => new OpGetKernelWorkGroupSize(instruction.AsRef());
    public static implicit operator OpGetKernelWorkGroupSize(RefInstruction instruction) => new OpGetKernelWorkGroupSize(instruction);
}

public ref struct OpGetKernelPreferredWorkGroupSizeMultiple : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelPreferredWorkGroupSizeMultiple(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelPreferredWorkGroupSizeMultiple(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelPreferredWorkGroupSizeMultiple instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelPreferredWorkGroupSizeMultiple instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelPreferredWorkGroupSizeMultiple(Span<int> buffer) => new OpGetKernelPreferredWorkGroupSizeMultiple(buffer);
    public static implicit operator OpGetKernelPreferredWorkGroupSizeMultiple(Instruction instruction) => new OpGetKernelPreferredWorkGroupSizeMultiple(instruction.AsRef());
    public static implicit operator OpGetKernelPreferredWorkGroupSizeMultiple(RefInstruction instruction) => new OpGetKernelPreferredWorkGroupSizeMultiple(instruction);
}

public ref struct OpRetainEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;

    public OpRetainEvent(RefInstruction instruction) => Inner = instruction;
    public OpRetainEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRetainEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRetainEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRetainEvent(Span<int> buffer) => new OpRetainEvent(buffer);
    public static implicit operator OpRetainEvent(Instruction instruction) => new OpRetainEvent(instruction.AsRef());
    public static implicit operator OpRetainEvent(RefInstruction instruction) => new OpRetainEvent(instruction);
}

public ref struct OpReleaseEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;

    public OpReleaseEvent(RefInstruction instruction) => Inner = instruction;
    public OpReleaseEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReleaseEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReleaseEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReleaseEvent(Span<int> buffer) => new OpReleaseEvent(buffer);
    public static implicit operator OpReleaseEvent(Instruction instruction) => new OpReleaseEvent(instruction.AsRef());
    public static implicit operator OpReleaseEvent(RefInstruction instruction) => new OpReleaseEvent(instruction);
}

public ref struct OpCreateUserEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpCreateUserEvent(RefInstruction instruction) => Inner = instruction;
    public OpCreateUserEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCreateUserEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCreateUserEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCreateUserEvent(Span<int> buffer) => new OpCreateUserEvent(buffer);
    public static implicit operator OpCreateUserEvent(Instruction instruction) => new OpCreateUserEvent(instruction.AsRef());
    public static implicit operator OpCreateUserEvent(RefInstruction instruction) => new OpCreateUserEvent(instruction);
}

public ref struct OpIsValidEvent : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;

    public OpIsValidEvent(RefInstruction instruction) => Inner = instruction;
    public OpIsValidEvent(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsValidEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsValidEvent instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsValidEvent(Span<int> buffer) => new OpIsValidEvent(buffer);
    public static implicit operator OpIsValidEvent(Instruction instruction) => new OpIsValidEvent(instruction.AsRef());
    public static implicit operator OpIsValidEvent(RefInstruction instruction) => new OpIsValidEvent(instruction);
}

public ref struct OpSetUserEventStatus : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;
    public IdRef Status => Inner.GetOperand<IdRef>("status") ?? default;

    public OpSetUserEventStatus(RefInstruction instruction) => Inner = instruction;
    public OpSetUserEventStatus(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSetUserEventStatus instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSetUserEventStatus instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSetUserEventStatus(Span<int> buffer) => new OpSetUserEventStatus(buffer);
    public static implicit operator OpSetUserEventStatus(Instruction instruction) => new OpSetUserEventStatus(instruction.AsRef());
    public static implicit operator OpSetUserEventStatus(RefInstruction instruction) => new OpSetUserEventStatus(instruction);
}

public ref struct OpCaptureEventProfilingInfo : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Event => Inner.GetOperand<IdRef>("eventId") ?? default;
    public IdRef ProfilingInfo => Inner.GetOperand<IdRef>("profilingInfo") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpCaptureEventProfilingInfo(RefInstruction instruction) => Inner = instruction;
    public OpCaptureEventProfilingInfo(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCaptureEventProfilingInfo instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCaptureEventProfilingInfo instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCaptureEventProfilingInfo(Span<int> buffer) => new OpCaptureEventProfilingInfo(buffer);
    public static implicit operator OpCaptureEventProfilingInfo(Instruction instruction) => new OpCaptureEventProfilingInfo(instruction.AsRef());
    public static implicit operator OpCaptureEventProfilingInfo(RefInstruction instruction) => new OpCaptureEventProfilingInfo(instruction);
}

public ref struct OpGetDefaultQueue : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpGetDefaultQueue(RefInstruction instruction) => Inner = instruction;
    public OpGetDefaultQueue(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetDefaultQueue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetDefaultQueue instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetDefaultQueue(Span<int> buffer) => new OpGetDefaultQueue(buffer);
    public static implicit operator OpGetDefaultQueue(Instruction instruction) => new OpGetDefaultQueue(instruction.AsRef());
    public static implicit operator OpGetDefaultQueue(RefInstruction instruction) => new OpGetDefaultQueue(instruction);
}

public ref struct OpBuildNDRange : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef GlobalWorkSize => Inner.GetOperand<IdRef>("globalWorkSize") ?? default;
    public IdRef LocalWorkSize => Inner.GetOperand<IdRef>("localWorkSize") ?? default;
    public IdRef GlobalWorkOffset => Inner.GetOperand<IdRef>("globalWorkOffset") ?? default;

    public OpBuildNDRange(RefInstruction instruction) => Inner = instruction;
    public OpBuildNDRange(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBuildNDRange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBuildNDRange instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBuildNDRange(Span<int> buffer) => new OpBuildNDRange(buffer);
    public static implicit operator OpBuildNDRange(Instruction instruction) => new OpBuildNDRange(instruction.AsRef());
    public static implicit operator OpBuildNDRange(RefInstruction instruction) => new OpBuildNDRange(instruction);
}

public ref struct OpImageSparseSampleImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleImplicitLod(Span<int> buffer) => new OpImageSparseSampleImplicitLod(buffer);
    public static implicit operator OpImageSparseSampleImplicitLod(Instruction instruction) => new OpImageSparseSampleImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleImplicitLod(RefInstruction instruction) => new OpImageSparseSampleImplicitLod(instruction);
}

public ref struct OpImageSparseSampleExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleExplicitLod(Span<int> buffer) => new OpImageSparseSampleExplicitLod(buffer);
    public static implicit operator OpImageSparseSampleExplicitLod(Instruction instruction) => new OpImageSparseSampleExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleExplicitLod(RefInstruction instruction) => new OpImageSparseSampleExplicitLod(instruction);
}

public ref struct OpImageSparseSampleDrefImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleDrefImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleDrefImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleDrefImplicitLod(Span<int> buffer) => new OpImageSparseSampleDrefImplicitLod(buffer);
    public static implicit operator OpImageSparseSampleDrefImplicitLod(Instruction instruction) => new OpImageSparseSampleDrefImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleDrefImplicitLod(RefInstruction instruction) => new OpImageSparseSampleDrefImplicitLod(instruction);
}

public ref struct OpImageSparseSampleDrefExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleDrefExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleDrefExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleDrefExplicitLod(Span<int> buffer) => new OpImageSparseSampleDrefExplicitLod(buffer);
    public static implicit operator OpImageSparseSampleDrefExplicitLod(Instruction instruction) => new OpImageSparseSampleDrefExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleDrefExplicitLod(RefInstruction instruction) => new OpImageSparseSampleDrefExplicitLod(instruction);
}

public ref struct OpImageSparseSampleProjImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleProjImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleProjImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleProjImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleProjImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleProjImplicitLod(Span<int> buffer) => new OpImageSparseSampleProjImplicitLod(buffer);
    public static implicit operator OpImageSparseSampleProjImplicitLod(Instruction instruction) => new OpImageSparseSampleProjImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleProjImplicitLod(RefInstruction instruction) => new OpImageSparseSampleProjImplicitLod(instruction);
}

public ref struct OpImageSparseSampleProjExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleProjExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleProjExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleProjExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleProjExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleProjExplicitLod(Span<int> buffer) => new OpImageSparseSampleProjExplicitLod(buffer);
    public static implicit operator OpImageSparseSampleProjExplicitLod(Instruction instruction) => new OpImageSparseSampleProjExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleProjExplicitLod(RefInstruction instruction) => new OpImageSparseSampleProjExplicitLod(instruction);
}

public ref struct OpImageSparseSampleProjDrefImplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleProjDrefImplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleProjDrefImplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleProjDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleProjDrefImplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleProjDrefImplicitLod(Span<int> buffer) => new OpImageSparseSampleProjDrefImplicitLod(buffer);
    public static implicit operator OpImageSparseSampleProjDrefImplicitLod(Instruction instruction) => new OpImageSparseSampleProjDrefImplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleProjDrefImplicitLod(RefInstruction instruction) => new OpImageSparseSampleProjDrefImplicitLod(instruction);
}

public ref struct OpImageSparseSampleProjDrefExplicitLod : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseSampleProjDrefExplicitLod(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseSampleProjDrefExplicitLod(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseSampleProjDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseSampleProjDrefExplicitLod instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseSampleProjDrefExplicitLod(Span<int> buffer) => new OpImageSparseSampleProjDrefExplicitLod(buffer);
    public static implicit operator OpImageSparseSampleProjDrefExplicitLod(Instruction instruction) => new OpImageSparseSampleProjDrefExplicitLod(instruction.AsRef());
    public static implicit operator OpImageSparseSampleProjDrefExplicitLod(RefInstruction instruction) => new OpImageSparseSampleProjDrefExplicitLod(instruction);
}

public ref struct OpImageSparseFetch : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseFetch(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseFetch(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseFetch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseFetch instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseFetch(Span<int> buffer) => new OpImageSparseFetch(buffer);
    public static implicit operator OpImageSparseFetch(Instruction instruction) => new OpImageSparseFetch(instruction.AsRef());
    public static implicit operator OpImageSparseFetch(RefInstruction instruction) => new OpImageSparseFetch(instruction);
}

public ref struct OpImageSparseGather : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Component => Inner.GetOperand<IdRef>("component") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseGather(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseGather(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseGather(Span<int> buffer) => new OpImageSparseGather(buffer);
    public static implicit operator OpImageSparseGather(Instruction instruction) => new OpImageSparseGather(instruction.AsRef());
    public static implicit operator OpImageSparseGather(RefInstruction instruction) => new OpImageSparseGather(instruction);
}

public ref struct OpImageSparseDrefGather : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Dref => Inner.GetOperand<IdRef>("dref") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseDrefGather(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseDrefGather(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseDrefGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseDrefGather instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseDrefGather(Span<int> buffer) => new OpImageSparseDrefGather(buffer);
    public static implicit operator OpImageSparseDrefGather(Instruction instruction) => new OpImageSparseDrefGather(instruction.AsRef());
    public static implicit operator OpImageSparseDrefGather(RefInstruction instruction) => new OpImageSparseDrefGather(instruction);
}

public ref struct OpImageSparseTexelsResident : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ResidentCode => Inner.GetOperand<IdRef>("residentCode") ?? default;

    public OpImageSparseTexelsResident(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseTexelsResident(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseTexelsResident instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseTexelsResident instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseTexelsResident(Span<int> buffer) => new OpImageSparseTexelsResident(buffer);
    public static implicit operator OpImageSparseTexelsResident(Instruction instruction) => new OpImageSparseTexelsResident(instruction.AsRef());
    public static implicit operator OpImageSparseTexelsResident(RefInstruction instruction) => new OpImageSparseTexelsResident(instruction);
}

public ref struct OpNoLine : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpNoLine(RefInstruction instruction) => Inner = instruction;
    public OpNoLine(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpNoLine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpNoLine instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpNoLine(Span<int> buffer) => new OpNoLine(buffer);
    public static implicit operator OpNoLine(Instruction instruction) => new OpNoLine(instruction.AsRef());
    public static implicit operator OpNoLine(RefInstruction instruction) => new OpNoLine(instruction);
}

public ref struct OpAtomicFlagTestAndSet : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpAtomicFlagTestAndSet(RefInstruction instruction) => Inner = instruction;
    public OpAtomicFlagTestAndSet(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicFlagTestAndSet instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicFlagTestAndSet instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicFlagTestAndSet(Span<int> buffer) => new OpAtomicFlagTestAndSet(buffer);
    public static implicit operator OpAtomicFlagTestAndSet(Instruction instruction) => new OpAtomicFlagTestAndSet(instruction.AsRef());
    public static implicit operator OpAtomicFlagTestAndSet(RefInstruction instruction) => new OpAtomicFlagTestAndSet(instruction);
}

public ref struct OpAtomicFlagClear : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpAtomicFlagClear(RefInstruction instruction) => Inner = instruction;
    public OpAtomicFlagClear(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicFlagClear instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicFlagClear instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicFlagClear(Span<int> buffer) => new OpAtomicFlagClear(buffer);
    public static implicit operator OpAtomicFlagClear(Instruction instruction) => new OpAtomicFlagClear(instruction.AsRef());
    public static implicit operator OpAtomicFlagClear(RefInstruction instruction) => new OpAtomicFlagClear(instruction);
}

public ref struct OpImageSparseRead : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSparseRead(RefInstruction instruction) => Inner = instruction;
    public OpImageSparseRead(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSparseRead instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSparseRead instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSparseRead(Span<int> buffer) => new OpImageSparseRead(buffer);
    public static implicit operator OpImageSparseRead(Instruction instruction) => new OpImageSparseRead(instruction.AsRef());
    public static implicit operator OpImageSparseRead(RefInstruction instruction) => new OpImageSparseRead(instruction);
}

public ref struct OpSizeOf : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpSizeOf(RefInstruction instruction) => Inner = instruction;
    public OpSizeOf(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSizeOf instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSizeOf instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSizeOf(Span<int> buffer) => new OpSizeOf(buffer);
    public static implicit operator OpSizeOf(Instruction instruction) => new OpSizeOf(instruction.AsRef());
    public static implicit operator OpSizeOf(RefInstruction instruction) => new OpSizeOf(instruction);
}

public ref struct OpTypePipeStorage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypePipeStorage(RefInstruction instruction) => Inner = instruction;
    public OpTypePipeStorage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypePipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypePipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypePipeStorage(Span<int> buffer) => new OpTypePipeStorage(buffer);
    public static implicit operator OpTypePipeStorage(Instruction instruction) => new OpTypePipeStorage(instruction.AsRef());
    public static implicit operator OpTypePipeStorage(RefInstruction instruction) => new OpTypePipeStorage(instruction);
}

public ref struct OpConstantPipeStorage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralInteger PacketSize => Inner.GetOperand<LiteralInteger>("packetSize") ?? default;
    public LiteralInteger PacketAlignment => Inner.GetOperand<LiteralInteger>("packetAlignment") ?? default;
    public LiteralInteger Capacity => Inner.GetOperand<LiteralInteger>("capacity") ?? default;

    public OpConstantPipeStorage(RefInstruction instruction) => Inner = instruction;
    public OpConstantPipeStorage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantPipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantPipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantPipeStorage(Span<int> buffer) => new OpConstantPipeStorage(buffer);
    public static implicit operator OpConstantPipeStorage(Instruction instruction) => new OpConstantPipeStorage(instruction.AsRef());
    public static implicit operator OpConstantPipeStorage(RefInstruction instruction) => new OpConstantPipeStorage(instruction);
}

public ref struct OpCreatePipeFromPipeStorage : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PipeStorage => Inner.GetOperand<IdRef>("pipeStorage") ?? default;

    public OpCreatePipeFromPipeStorage(RefInstruction instruction) => Inner = instruction;
    public OpCreatePipeFromPipeStorage(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCreatePipeFromPipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCreatePipeFromPipeStorage instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCreatePipeFromPipeStorage(Span<int> buffer) => new OpCreatePipeFromPipeStorage(buffer);
    public static implicit operator OpCreatePipeFromPipeStorage(Instruction instruction) => new OpCreatePipeFromPipeStorage(instruction.AsRef());
    public static implicit operator OpCreatePipeFromPipeStorage(RefInstruction instruction) => new OpCreatePipeFromPipeStorage(instruction);
}

public ref struct OpGetKernelLocalSizeForSubgroupCount : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SubgroupCount => Inner.GetOperand<IdRef>("subgroupCount") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelLocalSizeForSubgroupCount(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelLocalSizeForSubgroupCount(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelLocalSizeForSubgroupCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelLocalSizeForSubgroupCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelLocalSizeForSubgroupCount(Span<int> buffer) => new OpGetKernelLocalSizeForSubgroupCount(buffer);
    public static implicit operator OpGetKernelLocalSizeForSubgroupCount(Instruction instruction) => new OpGetKernelLocalSizeForSubgroupCount(instruction.AsRef());
    public static implicit operator OpGetKernelLocalSizeForSubgroupCount(RefInstruction instruction) => new OpGetKernelLocalSizeForSubgroupCount(instruction);
}

public ref struct OpGetKernelMaxNumSubgroups : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Invoke => Inner.GetOperand<IdRef>("invoke") ?? default;
    public IdRef Param => Inner.GetOperand<IdRef>("param") ?? default;
    public IdRef ParamSize => Inner.GetOperand<IdRef>("paramSize") ?? default;
    public IdRef ParamAlign => Inner.GetOperand<IdRef>("paramAlign") ?? default;

    public OpGetKernelMaxNumSubgroups(RefInstruction instruction) => Inner = instruction;
    public OpGetKernelMaxNumSubgroups(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGetKernelMaxNumSubgroups instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGetKernelMaxNumSubgroups instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGetKernelMaxNumSubgroups(Span<int> buffer) => new OpGetKernelMaxNumSubgroups(buffer);
    public static implicit operator OpGetKernelMaxNumSubgroups(Instruction instruction) => new OpGetKernelMaxNumSubgroups(instruction.AsRef());
    public static implicit operator OpGetKernelMaxNumSubgroups(RefInstruction instruction) => new OpGetKernelMaxNumSubgroups(instruction);
}

public ref struct OpTypeNamedBarrier : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeNamedBarrier(RefInstruction instruction) => Inner = instruction;
    public OpTypeNamedBarrier(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeNamedBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeNamedBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeNamedBarrier(Span<int> buffer) => new OpTypeNamedBarrier(buffer);
    public static implicit operator OpTypeNamedBarrier(Instruction instruction) => new OpTypeNamedBarrier(instruction.AsRef());
    public static implicit operator OpTypeNamedBarrier(RefInstruction instruction) => new OpTypeNamedBarrier(instruction);
}

public ref struct OpNamedBarrierInitialize : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SubgroupCount => Inner.GetOperand<IdRef>("subgroupCount") ?? default;

    public OpNamedBarrierInitialize(RefInstruction instruction) => Inner = instruction;
    public OpNamedBarrierInitialize(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpNamedBarrierInitialize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpNamedBarrierInitialize instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpNamedBarrierInitialize(Span<int> buffer) => new OpNamedBarrierInitialize(buffer);
    public static implicit operator OpNamedBarrierInitialize(Instruction instruction) => new OpNamedBarrierInitialize(instruction.AsRef());
    public static implicit operator OpNamedBarrierInitialize(RefInstruction instruction) => new OpNamedBarrierInitialize(instruction);
}

public ref struct OpMemoryNamedBarrier : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef NamedBarrier => Inner.GetOperand<IdRef>("namedBarrier") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpMemoryNamedBarrier(RefInstruction instruction) => Inner = instruction;
    public OpMemoryNamedBarrier(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemoryNamedBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemoryNamedBarrier instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemoryNamedBarrier(Span<int> buffer) => new OpMemoryNamedBarrier(buffer);
    public static implicit operator OpMemoryNamedBarrier(Instruction instruction) => new OpMemoryNamedBarrier(instruction.AsRef());
    public static implicit operator OpMemoryNamedBarrier(RefInstruction instruction) => new OpMemoryNamedBarrier(instruction);
}

public ref struct OpModuleProcessed : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralString Process => Inner.GetOperand<LiteralString>("process") ?? default;

    public OpModuleProcessed(RefInstruction instruction) => Inner = instruction;
    public OpModuleProcessed(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpModuleProcessed instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpModuleProcessed instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpModuleProcessed(Span<int> buffer) => new OpModuleProcessed(buffer);
    public static implicit operator OpModuleProcessed(Instruction instruction) => new OpModuleProcessed(instruction.AsRef());
    public static implicit operator OpModuleProcessed(RefInstruction instruction) => new OpModuleProcessed(instruction);
}

public ref struct OpExecutionModeId : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef EntryPoint => Inner.GetOperand<IdRef>("entryPoint") ?? default;
    public ExecutionMode Mode => Inner.GetEnumOperand<ExecutionMode>("mode");

    public OpExecutionModeId(RefInstruction instruction) => Inner = instruction;
    public OpExecutionModeId(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExecutionModeId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExecutionModeId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExecutionModeId(Span<int> buffer) => new OpExecutionModeId(buffer);
    public static implicit operator OpExecutionModeId(Instruction instruction) => new OpExecutionModeId(instruction.AsRef());
    public static implicit operator OpExecutionModeId(RefInstruction instruction) => new OpExecutionModeId(instruction);
}

public ref struct OpDecorateId : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public Decoration Decoration => Inner.GetEnumOperand<Decoration>("decoration");

    public OpDecorateId(RefInstruction instruction) => Inner = instruction;
    public OpDecorateId(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDecorateId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDecorateId instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDecorateId(Span<int> buffer) => new OpDecorateId(buffer);
    public static implicit operator OpDecorateId(Instruction instruction) => new OpDecorateId(instruction.AsRef());
    public static implicit operator OpDecorateId(RefInstruction instruction) => new OpDecorateId(instruction);
}

public ref struct OpGroupNonUniformElect : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;

    public OpGroupNonUniformElect(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformElect(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformElect instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformElect instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformElect(Span<int> buffer) => new OpGroupNonUniformElect(buffer);
    public static implicit operator OpGroupNonUniformElect(Instruction instruction) => new OpGroupNonUniformElect(instruction.AsRef());
    public static implicit operator OpGroupNonUniformElect(RefInstruction instruction) => new OpGroupNonUniformElect(instruction);
}

public ref struct OpGroupNonUniformAll : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupNonUniformAll(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformAll(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformAll instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformAll(Span<int> buffer) => new OpGroupNonUniformAll(buffer);
    public static implicit operator OpGroupNonUniformAll(Instruction instruction) => new OpGroupNonUniformAll(instruction.AsRef());
    public static implicit operator OpGroupNonUniformAll(RefInstruction instruction) => new OpGroupNonUniformAll(instruction);
}

public ref struct OpGroupNonUniformAny : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupNonUniformAny(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformAny(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformAny instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformAny(Span<int> buffer) => new OpGroupNonUniformAny(buffer);
    public static implicit operator OpGroupNonUniformAny(Instruction instruction) => new OpGroupNonUniformAny(instruction.AsRef());
    public static implicit operator OpGroupNonUniformAny(RefInstruction instruction) => new OpGroupNonUniformAny(instruction);
}

public ref struct OpGroupNonUniformAllEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformAllEqual(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformAllEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformAllEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformAllEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformAllEqual(Span<int> buffer) => new OpGroupNonUniformAllEqual(buffer);
    public static implicit operator OpGroupNonUniformAllEqual(Instruction instruction) => new OpGroupNonUniformAllEqual(instruction.AsRef());
    public static implicit operator OpGroupNonUniformAllEqual(RefInstruction instruction) => new OpGroupNonUniformAllEqual(instruction);
}

public ref struct OpGroupNonUniformBroadcast : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Id => Inner.GetOperand<IdRef>("id") ?? default;

    public OpGroupNonUniformBroadcast(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBroadcast(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBroadcast(Span<int> buffer) => new OpGroupNonUniformBroadcast(buffer);
    public static implicit operator OpGroupNonUniformBroadcast(Instruction instruction) => new OpGroupNonUniformBroadcast(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBroadcast(RefInstruction instruction) => new OpGroupNonUniformBroadcast(instruction);
}

public ref struct OpGroupNonUniformBroadcastFirst : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformBroadcastFirst(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBroadcastFirst(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBroadcastFirst instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBroadcastFirst instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBroadcastFirst(Span<int> buffer) => new OpGroupNonUniformBroadcastFirst(buffer);
    public static implicit operator OpGroupNonUniformBroadcastFirst(Instruction instruction) => new OpGroupNonUniformBroadcastFirst(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBroadcastFirst(RefInstruction instruction) => new OpGroupNonUniformBroadcastFirst(instruction);
}

public ref struct OpGroupNonUniformBallot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupNonUniformBallot(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBallot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBallot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBallot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBallot(Span<int> buffer) => new OpGroupNonUniformBallot(buffer);
    public static implicit operator OpGroupNonUniformBallot(Instruction instruction) => new OpGroupNonUniformBallot(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBallot(RefInstruction instruction) => new OpGroupNonUniformBallot(instruction);
}

public ref struct OpGroupNonUniformInverseBallot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformInverseBallot(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformInverseBallot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformInverseBallot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformInverseBallot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformInverseBallot(Span<int> buffer) => new OpGroupNonUniformInverseBallot(buffer);
    public static implicit operator OpGroupNonUniformInverseBallot(Instruction instruction) => new OpGroupNonUniformInverseBallot(instruction.AsRef());
    public static implicit operator OpGroupNonUniformInverseBallot(RefInstruction instruction) => new OpGroupNonUniformInverseBallot(instruction);
}

public ref struct OpGroupNonUniformBallotBitExtract : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;

    public OpGroupNonUniformBallotBitExtract(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBallotBitExtract(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBallotBitExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBallotBitExtract instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBallotBitExtract(Span<int> buffer) => new OpGroupNonUniformBallotBitExtract(buffer);
    public static implicit operator OpGroupNonUniformBallotBitExtract(Instruction instruction) => new OpGroupNonUniformBallotBitExtract(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBallotBitExtract(RefInstruction instruction) => new OpGroupNonUniformBallotBitExtract(instruction);
}

public ref struct OpGroupNonUniformBallotBitCount : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformBallotBitCount(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBallotBitCount(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBallotBitCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBallotBitCount instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBallotBitCount(Span<int> buffer) => new OpGroupNonUniformBallotBitCount(buffer);
    public static implicit operator OpGroupNonUniformBallotBitCount(Instruction instruction) => new OpGroupNonUniformBallotBitCount(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBallotBitCount(RefInstruction instruction) => new OpGroupNonUniformBallotBitCount(instruction);
}

public ref struct OpGroupNonUniformBallotFindLSB : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformBallotFindLSB(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBallotFindLSB(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBallotFindLSB instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBallotFindLSB instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBallotFindLSB(Span<int> buffer) => new OpGroupNonUniformBallotFindLSB(buffer);
    public static implicit operator OpGroupNonUniformBallotFindLSB(Instruction instruction) => new OpGroupNonUniformBallotFindLSB(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBallotFindLSB(RefInstruction instruction) => new OpGroupNonUniformBallotFindLSB(instruction);
}

public ref struct OpGroupNonUniformBallotFindMSB : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformBallotFindMSB(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBallotFindMSB(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBallotFindMSB instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBallotFindMSB instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBallotFindMSB(Span<int> buffer) => new OpGroupNonUniformBallotFindMSB(buffer);
    public static implicit operator OpGroupNonUniformBallotFindMSB(Instruction instruction) => new OpGroupNonUniformBallotFindMSB(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBallotFindMSB(RefInstruction instruction) => new OpGroupNonUniformBallotFindMSB(instruction);
}

public ref struct OpGroupNonUniformShuffle : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Id => Inner.GetOperand<IdRef>("id") ?? default;

    public OpGroupNonUniformShuffle(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformShuffle(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformShuffle instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformShuffle instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformShuffle(Span<int> buffer) => new OpGroupNonUniformShuffle(buffer);
    public static implicit operator OpGroupNonUniformShuffle(Instruction instruction) => new OpGroupNonUniformShuffle(instruction.AsRef());
    public static implicit operator OpGroupNonUniformShuffle(RefInstruction instruction) => new OpGroupNonUniformShuffle(instruction);
}

public ref struct OpGroupNonUniformShuffleXor : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Mask => Inner.GetOperand<IdRef>("mask") ?? default;

    public OpGroupNonUniformShuffleXor(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformShuffleXor(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformShuffleXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformShuffleXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformShuffleXor(Span<int> buffer) => new OpGroupNonUniformShuffleXor(buffer);
    public static implicit operator OpGroupNonUniformShuffleXor(Instruction instruction) => new OpGroupNonUniformShuffleXor(instruction.AsRef());
    public static implicit operator OpGroupNonUniformShuffleXor(RefInstruction instruction) => new OpGroupNonUniformShuffleXor(instruction);
}

public ref struct OpGroupNonUniformShuffleUp : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Delta => Inner.GetOperand<IdRef>("delta") ?? default;

    public OpGroupNonUniformShuffleUp(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformShuffleUp(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformShuffleUp instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformShuffleUp instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformShuffleUp(Span<int> buffer) => new OpGroupNonUniformShuffleUp(buffer);
    public static implicit operator OpGroupNonUniformShuffleUp(Instruction instruction) => new OpGroupNonUniformShuffleUp(instruction.AsRef());
    public static implicit operator OpGroupNonUniformShuffleUp(RefInstruction instruction) => new OpGroupNonUniformShuffleUp(instruction);
}

public ref struct OpGroupNonUniformShuffleDown : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Delta => Inner.GetOperand<IdRef>("delta") ?? default;

    public OpGroupNonUniformShuffleDown(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformShuffleDown(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformShuffleDown instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformShuffleDown instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformShuffleDown(Span<int> buffer) => new OpGroupNonUniformShuffleDown(buffer);
    public static implicit operator OpGroupNonUniformShuffleDown(Instruction instruction) => new OpGroupNonUniformShuffleDown(instruction.AsRef());
    public static implicit operator OpGroupNonUniformShuffleDown(RefInstruction instruction) => new OpGroupNonUniformShuffleDown(instruction);
}

public ref struct OpGroupNonUniformIAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformIAdd(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformIAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformIAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformIAdd(Span<int> buffer) => new OpGroupNonUniformIAdd(buffer);
    public static implicit operator OpGroupNonUniformIAdd(Instruction instruction) => new OpGroupNonUniformIAdd(instruction.AsRef());
    public static implicit operator OpGroupNonUniformIAdd(RefInstruction instruction) => new OpGroupNonUniformIAdd(instruction);
}

public ref struct OpGroupNonUniformFAdd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformFAdd(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformFAdd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformFAdd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformFAdd(Span<int> buffer) => new OpGroupNonUniformFAdd(buffer);
    public static implicit operator OpGroupNonUniformFAdd(Instruction instruction) => new OpGroupNonUniformFAdd(instruction.AsRef());
    public static implicit operator OpGroupNonUniformFAdd(RefInstruction instruction) => new OpGroupNonUniformFAdd(instruction);
}

public ref struct OpGroupNonUniformIMul : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformIMul(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformIMul(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformIMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformIMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformIMul(Span<int> buffer) => new OpGroupNonUniformIMul(buffer);
    public static implicit operator OpGroupNonUniformIMul(Instruction instruction) => new OpGroupNonUniformIMul(instruction.AsRef());
    public static implicit operator OpGroupNonUniformIMul(RefInstruction instruction) => new OpGroupNonUniformIMul(instruction);
}

public ref struct OpGroupNonUniformFMul : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformFMul(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformFMul(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformFMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformFMul instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformFMul(Span<int> buffer) => new OpGroupNonUniformFMul(buffer);
    public static implicit operator OpGroupNonUniformFMul(Instruction instruction) => new OpGroupNonUniformFMul(instruction.AsRef());
    public static implicit operator OpGroupNonUniformFMul(RefInstruction instruction) => new OpGroupNonUniformFMul(instruction);
}

public ref struct OpGroupNonUniformSMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformSMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformSMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformSMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformSMin(Span<int> buffer) => new OpGroupNonUniformSMin(buffer);
    public static implicit operator OpGroupNonUniformSMin(Instruction instruction) => new OpGroupNonUniformSMin(instruction.AsRef());
    public static implicit operator OpGroupNonUniformSMin(RefInstruction instruction) => new OpGroupNonUniformSMin(instruction);
}

public ref struct OpGroupNonUniformUMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformUMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformUMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformUMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformUMin(Span<int> buffer) => new OpGroupNonUniformUMin(buffer);
    public static implicit operator OpGroupNonUniformUMin(Instruction instruction) => new OpGroupNonUniformUMin(instruction.AsRef());
    public static implicit operator OpGroupNonUniformUMin(RefInstruction instruction) => new OpGroupNonUniformUMin(instruction);
}

public ref struct OpGroupNonUniformFMin : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformFMin(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformFMin(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformFMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformFMin instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformFMin(Span<int> buffer) => new OpGroupNonUniformFMin(buffer);
    public static implicit operator OpGroupNonUniformFMin(Instruction instruction) => new OpGroupNonUniformFMin(instruction.AsRef());
    public static implicit operator OpGroupNonUniformFMin(RefInstruction instruction) => new OpGroupNonUniformFMin(instruction);
}

public ref struct OpGroupNonUniformSMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformSMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformSMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformSMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformSMax(Span<int> buffer) => new OpGroupNonUniformSMax(buffer);
    public static implicit operator OpGroupNonUniformSMax(Instruction instruction) => new OpGroupNonUniformSMax(instruction.AsRef());
    public static implicit operator OpGroupNonUniformSMax(RefInstruction instruction) => new OpGroupNonUniformSMax(instruction);
}

public ref struct OpGroupNonUniformUMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformUMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformUMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformUMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformUMax(Span<int> buffer) => new OpGroupNonUniformUMax(buffer);
    public static implicit operator OpGroupNonUniformUMax(Instruction instruction) => new OpGroupNonUniformUMax(instruction.AsRef());
    public static implicit operator OpGroupNonUniformUMax(RefInstruction instruction) => new OpGroupNonUniformUMax(instruction);
}

public ref struct OpGroupNonUniformFMax : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformFMax(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformFMax(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformFMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformFMax instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformFMax(Span<int> buffer) => new OpGroupNonUniformFMax(buffer);
    public static implicit operator OpGroupNonUniformFMax(Instruction instruction) => new OpGroupNonUniformFMax(instruction.AsRef());
    public static implicit operator OpGroupNonUniformFMax(RefInstruction instruction) => new OpGroupNonUniformFMax(instruction);
}

public ref struct OpGroupNonUniformBitwiseAnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformBitwiseAnd(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBitwiseAnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBitwiseAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBitwiseAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBitwiseAnd(Span<int> buffer) => new OpGroupNonUniformBitwiseAnd(buffer);
    public static implicit operator OpGroupNonUniformBitwiseAnd(Instruction instruction) => new OpGroupNonUniformBitwiseAnd(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBitwiseAnd(RefInstruction instruction) => new OpGroupNonUniformBitwiseAnd(instruction);
}

public ref struct OpGroupNonUniformBitwiseOr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformBitwiseOr(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBitwiseOr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBitwiseOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBitwiseOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBitwiseOr(Span<int> buffer) => new OpGroupNonUniformBitwiseOr(buffer);
    public static implicit operator OpGroupNonUniformBitwiseOr(Instruction instruction) => new OpGroupNonUniformBitwiseOr(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBitwiseOr(RefInstruction instruction) => new OpGroupNonUniformBitwiseOr(instruction);
}

public ref struct OpGroupNonUniformBitwiseXor : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformBitwiseXor(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformBitwiseXor(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformBitwiseXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformBitwiseXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformBitwiseXor(Span<int> buffer) => new OpGroupNonUniformBitwiseXor(buffer);
    public static implicit operator OpGroupNonUniformBitwiseXor(Instruction instruction) => new OpGroupNonUniformBitwiseXor(instruction.AsRef());
    public static implicit operator OpGroupNonUniformBitwiseXor(RefInstruction instruction) => new OpGroupNonUniformBitwiseXor(instruction);
}

public ref struct OpGroupNonUniformLogicalAnd : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformLogicalAnd(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformLogicalAnd(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformLogicalAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformLogicalAnd instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformLogicalAnd(Span<int> buffer) => new OpGroupNonUniformLogicalAnd(buffer);
    public static implicit operator OpGroupNonUniformLogicalAnd(Instruction instruction) => new OpGroupNonUniformLogicalAnd(instruction.AsRef());
    public static implicit operator OpGroupNonUniformLogicalAnd(RefInstruction instruction) => new OpGroupNonUniformLogicalAnd(instruction);
}

public ref struct OpGroupNonUniformLogicalOr : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformLogicalOr(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformLogicalOr(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformLogicalOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformLogicalOr instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformLogicalOr(Span<int> buffer) => new OpGroupNonUniformLogicalOr(buffer);
    public static implicit operator OpGroupNonUniformLogicalOr(Instruction instruction) => new OpGroupNonUniformLogicalOr(instruction.AsRef());
    public static implicit operator OpGroupNonUniformLogicalOr(RefInstruction instruction) => new OpGroupNonUniformLogicalOr(instruction);
}

public ref struct OpGroupNonUniformLogicalXor : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformLogicalXor(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformLogicalXor(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformLogicalXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformLogicalXor instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformLogicalXor(Span<int> buffer) => new OpGroupNonUniformLogicalXor(buffer);
    public static implicit operator OpGroupNonUniformLogicalXor(Instruction instruction) => new OpGroupNonUniformLogicalXor(instruction.AsRef());
    public static implicit operator OpGroupNonUniformLogicalXor(RefInstruction instruction) => new OpGroupNonUniformLogicalXor(instruction);
}

public ref struct OpGroupNonUniformQuadBroadcast : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;

    public OpGroupNonUniformQuadBroadcast(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformQuadBroadcast(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformQuadBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformQuadBroadcast instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformQuadBroadcast(Span<int> buffer) => new OpGroupNonUniformQuadBroadcast(buffer);
    public static implicit operator OpGroupNonUniformQuadBroadcast(Instruction instruction) => new OpGroupNonUniformQuadBroadcast(instruction.AsRef());
    public static implicit operator OpGroupNonUniformQuadBroadcast(RefInstruction instruction) => new OpGroupNonUniformQuadBroadcast(instruction);
}

public ref struct OpGroupNonUniformQuadSwap : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;

    public OpGroupNonUniformQuadSwap(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformQuadSwap(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformQuadSwap instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformQuadSwap instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformQuadSwap(Span<int> buffer) => new OpGroupNonUniformQuadSwap(buffer);
    public static implicit operator OpGroupNonUniformQuadSwap(Instruction instruction) => new OpGroupNonUniformQuadSwap(instruction.AsRef());
    public static implicit operator OpGroupNonUniformQuadSwap(RefInstruction instruction) => new OpGroupNonUniformQuadSwap(instruction);
}

public ref struct OpCopyLogical : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpCopyLogical(RefInstruction instruction) => Inner = instruction;
    public OpCopyLogical(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCopyLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCopyLogical instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCopyLogical(Span<int> buffer) => new OpCopyLogical(buffer);
    public static implicit operator OpCopyLogical(Instruction instruction) => new OpCopyLogical(instruction.AsRef());
    public static implicit operator OpCopyLogical(RefInstruction instruction) => new OpCopyLogical(instruction);
}

public ref struct OpPtrEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpPtrEqual(RefInstruction instruction) => Inner = instruction;
    public OpPtrEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrEqual(Span<int> buffer) => new OpPtrEqual(buffer);
    public static implicit operator OpPtrEqual(Instruction instruction) => new OpPtrEqual(instruction.AsRef());
    public static implicit operator OpPtrEqual(RefInstruction instruction) => new OpPtrEqual(instruction);
}

public ref struct OpPtrNotEqual : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpPtrNotEqual(RefInstruction instruction) => Inner = instruction;
    public OpPtrNotEqual(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrNotEqual instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrNotEqual(Span<int> buffer) => new OpPtrNotEqual(buffer);
    public static implicit operator OpPtrNotEqual(Instruction instruction) => new OpPtrNotEqual(instruction.AsRef());
    public static implicit operator OpPtrNotEqual(RefInstruction instruction) => new OpPtrNotEqual(instruction);
}

public ref struct OpPtrDiff : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpPtrDiff(RefInstruction instruction) => Inner = instruction;
    public OpPtrDiff(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrDiff instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrDiff instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrDiff(Span<int> buffer) => new OpPtrDiff(buffer);
    public static implicit operator OpPtrDiff(Instruction instruction) => new OpPtrDiff(instruction.AsRef());
    public static implicit operator OpPtrDiff(RefInstruction instruction) => new OpPtrDiff(instruction);
}

public ref struct OpColorAttachmentReadEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Attachment => Inner.GetOperand<IdRef>("attachment") ?? default;
    public IdRef Sample => Inner.GetOperand<IdRef>("sample") ?? default;

    public OpColorAttachmentReadEXT(RefInstruction instruction) => Inner = instruction;
    public OpColorAttachmentReadEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpColorAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpColorAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpColorAttachmentReadEXT(Span<int> buffer) => new OpColorAttachmentReadEXT(buffer);
    public static implicit operator OpColorAttachmentReadEXT(Instruction instruction) => new OpColorAttachmentReadEXT(instruction.AsRef());
    public static implicit operator OpColorAttachmentReadEXT(RefInstruction instruction) => new OpColorAttachmentReadEXT(instruction);
}

public ref struct OpDepthAttachmentReadEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Sample => Inner.GetOperand<IdRef>("sample") ?? default;

    public OpDepthAttachmentReadEXT(RefInstruction instruction) => Inner = instruction;
    public OpDepthAttachmentReadEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDepthAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDepthAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDepthAttachmentReadEXT(Span<int> buffer) => new OpDepthAttachmentReadEXT(buffer);
    public static implicit operator OpDepthAttachmentReadEXT(Instruction instruction) => new OpDepthAttachmentReadEXT(instruction.AsRef());
    public static implicit operator OpDepthAttachmentReadEXT(RefInstruction instruction) => new OpDepthAttachmentReadEXT(instruction);
}

public ref struct OpStencilAttachmentReadEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Sample => Inner.GetOperand<IdRef>("sample") ?? default;

    public OpStencilAttachmentReadEXT(RefInstruction instruction) => Inner = instruction;
    public OpStencilAttachmentReadEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpStencilAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpStencilAttachmentReadEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpStencilAttachmentReadEXT(Span<int> buffer) => new OpStencilAttachmentReadEXT(buffer);
    public static implicit operator OpStencilAttachmentReadEXT(Instruction instruction) => new OpStencilAttachmentReadEXT(instruction.AsRef());
    public static implicit operator OpStencilAttachmentReadEXT(RefInstruction instruction) => new OpStencilAttachmentReadEXT(instruction);
}

public ref struct OpTerminateInvocation : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpTerminateInvocation(RefInstruction instruction) => Inner = instruction;
    public OpTerminateInvocation(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTerminateInvocation instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTerminateInvocation instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTerminateInvocation(Span<int> buffer) => new OpTerminateInvocation(buffer);
    public static implicit operator OpTerminateInvocation(Instruction instruction) => new OpTerminateInvocation(instruction.AsRef());
    public static implicit operator OpTerminateInvocation(RefInstruction instruction) => new OpTerminateInvocation(instruction);
}

public ref struct OpTypeUntypedPointerKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public StorageClass StorageClass => Inner.GetEnumOperand<StorageClass>("storageclass");

    public OpTypeUntypedPointerKHR(RefInstruction instruction) => Inner = instruction;
    public OpTypeUntypedPointerKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeUntypedPointerKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeUntypedPointerKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeUntypedPointerKHR(Span<int> buffer) => new OpTypeUntypedPointerKHR(buffer);
    public static implicit operator OpTypeUntypedPointerKHR(Instruction instruction) => new OpTypeUntypedPointerKHR(instruction.AsRef());
    public static implicit operator OpTypeUntypedPointerKHR(RefInstruction instruction) => new OpTypeUntypedPointerKHR(instruction);
}

public ref struct OpUntypedVariableKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public StorageClass StorageClass => Inner.GetEnumOperand<StorageClass>("storageclass");
    public IdRef DataType => Inner.GetOperand<IdRef>("dataType") ?? default;
    public IdRef Initializer => Inner.GetOperand<IdRef>("initializer") ?? default;

    public OpUntypedVariableKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedVariableKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedVariableKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedVariableKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedVariableKHR(Span<int> buffer) => new OpUntypedVariableKHR(buffer);
    public static implicit operator OpUntypedVariableKHR(Instruction instruction) => new OpUntypedVariableKHR(instruction.AsRef());
    public static implicit operator OpUntypedVariableKHR(RefInstruction instruction) => new OpUntypedVariableKHR(instruction);
}

public ref struct OpUntypedAccessChainKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BaseType => Inner.GetOperand<IdRef>("baseType") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpUntypedAccessChainKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedAccessChainKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedAccessChainKHR(Span<int> buffer) => new OpUntypedAccessChainKHR(buffer);
    public static implicit operator OpUntypedAccessChainKHR(Instruction instruction) => new OpUntypedAccessChainKHR(instruction.AsRef());
    public static implicit operator OpUntypedAccessChainKHR(RefInstruction instruction) => new OpUntypedAccessChainKHR(instruction);
}

public ref struct OpUntypedInBoundsAccessChainKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BaseType => Inner.GetOperand<IdRef>("baseType") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpUntypedInBoundsAccessChainKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedInBoundsAccessChainKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedInBoundsAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedInBoundsAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedInBoundsAccessChainKHR(Span<int> buffer) => new OpUntypedInBoundsAccessChainKHR(buffer);
    public static implicit operator OpUntypedInBoundsAccessChainKHR(Instruction instruction) => new OpUntypedInBoundsAccessChainKHR(instruction.AsRef());
    public static implicit operator OpUntypedInBoundsAccessChainKHR(RefInstruction instruction) => new OpUntypedInBoundsAccessChainKHR(instruction);
}

public ref struct OpSubgroupBallotKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpSubgroupBallotKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupBallotKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupBallotKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupBallotKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupBallotKHR(Span<int> buffer) => new OpSubgroupBallotKHR(buffer);
    public static implicit operator OpSubgroupBallotKHR(Instruction instruction) => new OpSubgroupBallotKHR(instruction.AsRef());
    public static implicit operator OpSubgroupBallotKHR(RefInstruction instruction) => new OpSubgroupBallotKHR(instruction);
}

public ref struct OpSubgroupFirstInvocationKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpSubgroupFirstInvocationKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupFirstInvocationKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupFirstInvocationKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupFirstInvocationKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupFirstInvocationKHR(Span<int> buffer) => new OpSubgroupFirstInvocationKHR(buffer);
    public static implicit operator OpSubgroupFirstInvocationKHR(Instruction instruction) => new OpSubgroupFirstInvocationKHR(instruction.AsRef());
    public static implicit operator OpSubgroupFirstInvocationKHR(RefInstruction instruction) => new OpSubgroupFirstInvocationKHR(instruction);
}

public ref struct OpUntypedPtrAccessChainKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BaseType => Inner.GetOperand<IdRef>("baseType") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Element => Inner.GetOperand<IdRef>("element") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpUntypedPtrAccessChainKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedPtrAccessChainKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedPtrAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedPtrAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedPtrAccessChainKHR(Span<int> buffer) => new OpUntypedPtrAccessChainKHR(buffer);
    public static implicit operator OpUntypedPtrAccessChainKHR(Instruction instruction) => new OpUntypedPtrAccessChainKHR(instruction.AsRef());
    public static implicit operator OpUntypedPtrAccessChainKHR(RefInstruction instruction) => new OpUntypedPtrAccessChainKHR(instruction);
}

public ref struct OpUntypedInBoundsPtrAccessChainKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BaseType => Inner.GetOperand<IdRef>("baseType") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Element => Inner.GetOperand<IdRef>("element") ?? default;
    public IdRef Indexes => Inner.GetOperand<IdRef>("indexes") ?? default;

    public OpUntypedInBoundsPtrAccessChainKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedInBoundsPtrAccessChainKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedInBoundsPtrAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedInBoundsPtrAccessChainKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedInBoundsPtrAccessChainKHR(Span<int> buffer) => new OpUntypedInBoundsPtrAccessChainKHR(buffer);
    public static implicit operator OpUntypedInBoundsPtrAccessChainKHR(Instruction instruction) => new OpUntypedInBoundsPtrAccessChainKHR(instruction.AsRef());
    public static implicit operator OpUntypedInBoundsPtrAccessChainKHR(RefInstruction instruction) => new OpUntypedInBoundsPtrAccessChainKHR(instruction);
}

public ref struct OpUntypedArrayLengthKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Structure => Inner.GetOperand<IdRef>("structure") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public LiteralInteger Arraymember => Inner.GetOperand<LiteralInteger>("arraymember") ?? default;

    public OpUntypedArrayLengthKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedArrayLengthKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedArrayLengthKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedArrayLengthKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedArrayLengthKHR(Span<int> buffer) => new OpUntypedArrayLengthKHR(buffer);
    public static implicit operator OpUntypedArrayLengthKHR(Instruction instruction) => new OpUntypedArrayLengthKHR(instruction.AsRef());
    public static implicit operator OpUntypedArrayLengthKHR(RefInstruction instruction) => new OpUntypedArrayLengthKHR(instruction);
}

public ref struct OpUntypedPrefetchKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef PointerType => Inner.GetOperand<IdRef>("pointerType") ?? default;
    public IdRef NumBytes => Inner.GetOperand<IdRef>("numBytes") ?? default;
    public IdRef RW => Inner.GetOperand<IdRef>("rW") ?? default;
    public IdRef Locality => Inner.GetOperand<IdRef>("locality") ?? default;
    public IdRef CacheType => Inner.GetOperand<IdRef>("cacheType") ?? default;

    public OpUntypedPrefetchKHR(RefInstruction instruction) => Inner = instruction;
    public OpUntypedPrefetchKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUntypedPrefetchKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUntypedPrefetchKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUntypedPrefetchKHR(Span<int> buffer) => new OpUntypedPrefetchKHR(buffer);
    public static implicit operator OpUntypedPrefetchKHR(Instruction instruction) => new OpUntypedPrefetchKHR(instruction.AsRef());
    public static implicit operator OpUntypedPrefetchKHR(RefInstruction instruction) => new OpUntypedPrefetchKHR(instruction);
}

public ref struct OpSubgroupAllKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpSubgroupAllKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAllKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAllKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAllKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAllKHR(Span<int> buffer) => new OpSubgroupAllKHR(buffer);
    public static implicit operator OpSubgroupAllKHR(Instruction instruction) => new OpSubgroupAllKHR(instruction.AsRef());
    public static implicit operator OpSubgroupAllKHR(RefInstruction instruction) => new OpSubgroupAllKHR(instruction);
}

public ref struct OpSubgroupAnyKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpSubgroupAnyKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAnyKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAnyKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAnyKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAnyKHR(Span<int> buffer) => new OpSubgroupAnyKHR(buffer);
    public static implicit operator OpSubgroupAnyKHR(Instruction instruction) => new OpSubgroupAnyKHR(instruction.AsRef());
    public static implicit operator OpSubgroupAnyKHR(RefInstruction instruction) => new OpSubgroupAnyKHR(instruction);
}

public ref struct OpSubgroupAllEqualKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpSubgroupAllEqualKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAllEqualKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAllEqualKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAllEqualKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAllEqualKHR(Span<int> buffer) => new OpSubgroupAllEqualKHR(buffer);
    public static implicit operator OpSubgroupAllEqualKHR(Instruction instruction) => new OpSubgroupAllEqualKHR(instruction.AsRef());
    public static implicit operator OpSubgroupAllEqualKHR(RefInstruction instruction) => new OpSubgroupAllEqualKHR(instruction);
}

public ref struct OpGroupNonUniformRotateKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Delta => Inner.GetOperand<IdRef>("delta") ?? default;
    public IdRef ClusterSize => Inner.GetOperand<IdRef>("clusterSize") ?? default;

    public OpGroupNonUniformRotateKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformRotateKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformRotateKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformRotateKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformRotateKHR(Span<int> buffer) => new OpGroupNonUniformRotateKHR(buffer);
    public static implicit operator OpGroupNonUniformRotateKHR(Instruction instruction) => new OpGroupNonUniformRotateKHR(instruction.AsRef());
    public static implicit operator OpGroupNonUniformRotateKHR(RefInstruction instruction) => new OpGroupNonUniformRotateKHR(instruction);
}

public ref struct OpSubgroupReadInvocationKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef Index => Inner.GetOperand<IdRef>("index") ?? default;

    public OpSubgroupReadInvocationKHR(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupReadInvocationKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupReadInvocationKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupReadInvocationKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupReadInvocationKHR(Span<int> buffer) => new OpSubgroupReadInvocationKHR(buffer);
    public static implicit operator OpSubgroupReadInvocationKHR(Instruction instruction) => new OpSubgroupReadInvocationKHR(instruction.AsRef());
    public static implicit operator OpSubgroupReadInvocationKHR(RefInstruction instruction) => new OpSubgroupReadInvocationKHR(instruction);
}

public ref struct OpExtInstWithForwardRefsKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Set => Inner.GetOperand<IdRef>("set") ?? default;
    public LiteralInteger Instruction => Inner.GetOperand<LiteralInteger>("instruction") ?? default;
    public IdRef Operand1Operand2 => Inner.GetOperand<IdRef>("operand1Operand2") ?? default;

    public OpExtInstWithForwardRefsKHR(RefInstruction instruction) => Inner = instruction;
    public OpExtInstWithForwardRefsKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExtInstWithForwardRefsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExtInstWithForwardRefsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExtInstWithForwardRefsKHR(Span<int> buffer) => new OpExtInstWithForwardRefsKHR(buffer);
    public static implicit operator OpExtInstWithForwardRefsKHR(Instruction instruction) => new OpExtInstWithForwardRefsKHR(instruction.AsRef());
    public static implicit operator OpExtInstWithForwardRefsKHR(RefInstruction instruction) => new OpExtInstWithForwardRefsKHR(instruction);
}

public ref struct OpTraceRayKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef CullMask => Inner.GetOperand<IdRef>("cullMask") ?? default;
    public IdRef SBTOffset => Inner.GetOperand<IdRef>("sBTOffset") ?? default;
    public IdRef SBTStride => Inner.GetOperand<IdRef>("sBTStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef RayOrigin => Inner.GetOperand<IdRef>("rayOrigin") ?? default;
    public IdRef RayTmin => Inner.GetOperand<IdRef>("rayTmin") ?? default;
    public IdRef RayDirection => Inner.GetOperand<IdRef>("rayDirection") ?? default;
    public IdRef RayTmax => Inner.GetOperand<IdRef>("rayTmax") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpTraceRayKHR(RefInstruction instruction) => Inner = instruction;
    public OpTraceRayKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTraceRayKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTraceRayKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTraceRayKHR(Span<int> buffer) => new OpTraceRayKHR(buffer);
    public static implicit operator OpTraceRayKHR(Instruction instruction) => new OpTraceRayKHR(instruction.AsRef());
    public static implicit operator OpTraceRayKHR(RefInstruction instruction) => new OpTraceRayKHR(instruction);
}

public ref struct OpExecuteCallableKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef SBTIndex => Inner.GetOperand<IdRef>("sBTIndex") ?? default;
    public IdRef CallableData => Inner.GetOperand<IdRef>("callableData") ?? default;

    public OpExecuteCallableKHR(RefInstruction instruction) => Inner = instruction;
    public OpExecuteCallableKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExecuteCallableKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExecuteCallableKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExecuteCallableKHR(Span<int> buffer) => new OpExecuteCallableKHR(buffer);
    public static implicit operator OpExecuteCallableKHR(Instruction instruction) => new OpExecuteCallableKHR(instruction.AsRef());
    public static implicit operator OpExecuteCallableKHR(RefInstruction instruction) => new OpExecuteCallableKHR(instruction);
}

public ref struct OpConvertUToAccelerationStructureKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;

    public OpConvertUToAccelerationStructureKHR(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToAccelerationStructureKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToAccelerationStructureKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToAccelerationStructureKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToAccelerationStructureKHR(Span<int> buffer) => new OpConvertUToAccelerationStructureKHR(buffer);
    public static implicit operator OpConvertUToAccelerationStructureKHR(Instruction instruction) => new OpConvertUToAccelerationStructureKHR(instruction.AsRef());
    public static implicit operator OpConvertUToAccelerationStructureKHR(RefInstruction instruction) => new OpConvertUToAccelerationStructureKHR(instruction);
}

public ref struct OpIgnoreIntersectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpIgnoreIntersectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpIgnoreIntersectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIgnoreIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIgnoreIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIgnoreIntersectionKHR(Span<int> buffer) => new OpIgnoreIntersectionKHR(buffer);
    public static implicit operator OpIgnoreIntersectionKHR(Instruction instruction) => new OpIgnoreIntersectionKHR(instruction.AsRef());
    public static implicit operator OpIgnoreIntersectionKHR(RefInstruction instruction) => new OpIgnoreIntersectionKHR(instruction);
}

public ref struct OpTerminateRayKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpTerminateRayKHR(RefInstruction instruction) => Inner = instruction;
    public OpTerminateRayKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTerminateRayKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTerminateRayKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTerminateRayKHR(Span<int> buffer) => new OpTerminateRayKHR(buffer);
    public static implicit operator OpTerminateRayKHR(Instruction instruction) => new OpTerminateRayKHR(instruction.AsRef());
    public static implicit operator OpTerminateRayKHR(RefInstruction instruction) => new OpTerminateRayKHR(instruction);
}

public ref struct OpSDot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpSDot(RefInstruction instruction) => Inner = instruction;
    public OpSDot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSDot(Span<int> buffer) => new OpSDot(buffer);
    public static implicit operator OpSDot(Instruction instruction) => new OpSDot(instruction.AsRef());
    public static implicit operator OpSDot(RefInstruction instruction) => new OpSDot(instruction);
}

public ref struct OpUDot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpUDot(RefInstruction instruction) => Inner = instruction;
    public OpUDot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUDot(Span<int> buffer) => new OpUDot(buffer);
    public static implicit operator OpUDot(Instruction instruction) => new OpUDot(instruction.AsRef());
    public static implicit operator OpUDot(RefInstruction instruction) => new OpUDot(instruction);
}

public ref struct OpSUDot : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpSUDot(RefInstruction instruction) => Inner = instruction;
    public OpSUDot(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSUDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSUDot instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSUDot(Span<int> buffer) => new OpSUDot(buffer);
    public static implicit operator OpSUDot(Instruction instruction) => new OpSUDot(instruction.AsRef());
    public static implicit operator OpSUDot(RefInstruction instruction) => new OpSUDot(instruction);
}

public ref struct OpSDotAccSat : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public IdRef Accumulator => Inner.GetOperand<IdRef>("accumulator") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpSDotAccSat(RefInstruction instruction) => Inner = instruction;
    public OpSDotAccSat(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSDotAccSat(Span<int> buffer) => new OpSDotAccSat(buffer);
    public static implicit operator OpSDotAccSat(Instruction instruction) => new OpSDotAccSat(instruction.AsRef());
    public static implicit operator OpSDotAccSat(RefInstruction instruction) => new OpSDotAccSat(instruction);
}

public ref struct OpUDotAccSat : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public IdRef Accumulator => Inner.GetOperand<IdRef>("accumulator") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpUDotAccSat(RefInstruction instruction) => Inner = instruction;
    public OpUDotAccSat(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUDotAccSat(Span<int> buffer) => new OpUDotAccSat(buffer);
    public static implicit operator OpUDotAccSat(Instruction instruction) => new OpUDotAccSat(instruction.AsRef());
    public static implicit operator OpUDotAccSat(RefInstruction instruction) => new OpUDotAccSat(instruction);
}

public ref struct OpSUDotAccSat : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Vector1 => Inner.GetOperand<IdRef>("vector1") ?? default;
    public IdRef Vector2 => Inner.GetOperand<IdRef>("vector2") ?? default;
    public IdRef Accumulator => Inner.GetOperand<IdRef>("accumulator") ?? default;
    public PackedVectorFormat PackedVectorFormat => Inner.GetEnumOperand<PackedVectorFormat>("packedVectorFormat");

    public OpSUDotAccSat(RefInstruction instruction) => Inner = instruction;
    public OpSUDotAccSat(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSUDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSUDotAccSat instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSUDotAccSat(Span<int> buffer) => new OpSUDotAccSat(buffer);
    public static implicit operator OpSUDotAccSat(Instruction instruction) => new OpSUDotAccSat(instruction.AsRef());
    public static implicit operator OpSUDotAccSat(RefInstruction instruction) => new OpSUDotAccSat(instruction);
}

public ref struct OpTypeCooperativeMatrixKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ComponentType => Inner.GetOperand<IdRef>("componentType") ?? default;
    public IdScope Scope => Inner.GetOperand<IdScope>("scope") ?? default;
    public IdRef Rows => Inner.GetOperand<IdRef>("rows") ?? default;
    public IdRef Columns => Inner.GetOperand<IdRef>("columns") ?? default;
    public IdRef Use => Inner.GetOperand<IdRef>("use") ?? default;

    public OpTypeCooperativeMatrixKHR(RefInstruction instruction) => Inner = instruction;
    public OpTypeCooperativeMatrixKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeCooperativeMatrixKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeCooperativeMatrixKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeCooperativeMatrixKHR(Span<int> buffer) => new OpTypeCooperativeMatrixKHR(buffer);
    public static implicit operator OpTypeCooperativeMatrixKHR(Instruction instruction) => new OpTypeCooperativeMatrixKHR(instruction.AsRef());
    public static implicit operator OpTypeCooperativeMatrixKHR(RefInstruction instruction) => new OpTypeCooperativeMatrixKHR(instruction);
}

public ref struct OpCooperativeMatrixLoadKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef MemoryLayout => Inner.GetOperand<IdRef>("memoryLayout") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;
    public MemoryAccessMask MemoryOperand => Inner.GetEnumOperand<MemoryAccessMask>("memoryOperand");

    public OpCooperativeMatrixLoadKHR(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixLoadKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixLoadKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixLoadKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixLoadKHR(Span<int> buffer) => new OpCooperativeMatrixLoadKHR(buffer);
    public static implicit operator OpCooperativeMatrixLoadKHR(Instruction instruction) => new OpCooperativeMatrixLoadKHR(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixLoadKHR(RefInstruction instruction) => new OpCooperativeMatrixLoadKHR(instruction);
}

public ref struct OpCooperativeMatrixStoreKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public IdRef MemoryLayout => Inner.GetOperand<IdRef>("memoryLayout") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;
    public MemoryAccessMask MemoryOperand => Inner.GetEnumOperand<MemoryAccessMask>("memoryOperand");

    public OpCooperativeMatrixStoreKHR(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixStoreKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixStoreKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixStoreKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixStoreKHR(Span<int> buffer) => new OpCooperativeMatrixStoreKHR(buffer);
    public static implicit operator OpCooperativeMatrixStoreKHR(Instruction instruction) => new OpCooperativeMatrixStoreKHR(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixStoreKHR(RefInstruction instruction) => new OpCooperativeMatrixStoreKHR(instruction);
}

public ref struct OpCooperativeMatrixMulAddKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public IdRef C => Inner.GetOperand<IdRef>("c") ?? default;
    public CooperativeMatrixOperandsMask CooperativeMatrixOperands => Inner.GetEnumOperand<CooperativeMatrixOperandsMask>("cooperativeMatrixOperands");

    public OpCooperativeMatrixMulAddKHR(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixMulAddKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixMulAddKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixMulAddKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixMulAddKHR(Span<int> buffer) => new OpCooperativeMatrixMulAddKHR(buffer);
    public static implicit operator OpCooperativeMatrixMulAddKHR(Instruction instruction) => new OpCooperativeMatrixMulAddKHR(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixMulAddKHR(RefInstruction instruction) => new OpCooperativeMatrixMulAddKHR(instruction);
}

public ref struct OpCooperativeMatrixLengthKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Type => Inner.GetOperand<IdRef>("type") ?? default;

    public OpCooperativeMatrixLengthKHR(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixLengthKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixLengthKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixLengthKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixLengthKHR(Span<int> buffer) => new OpCooperativeMatrixLengthKHR(buffer);
    public static implicit operator OpCooperativeMatrixLengthKHR(Instruction instruction) => new OpCooperativeMatrixLengthKHR(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixLengthKHR(RefInstruction instruction) => new OpCooperativeMatrixLengthKHR(instruction);
}

public ref struct OpConstantCompositeReplicateEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpConstantCompositeReplicateEXT(RefInstruction instruction) => Inner = instruction;
    public OpConstantCompositeReplicateEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantCompositeReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantCompositeReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantCompositeReplicateEXT(Span<int> buffer) => new OpConstantCompositeReplicateEXT(buffer);
    public static implicit operator OpConstantCompositeReplicateEXT(Instruction instruction) => new OpConstantCompositeReplicateEXT(instruction.AsRef());
    public static implicit operator OpConstantCompositeReplicateEXT(RefInstruction instruction) => new OpConstantCompositeReplicateEXT(instruction);
}

public ref struct OpSpecConstantCompositeReplicateEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpSpecConstantCompositeReplicateEXT(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantCompositeReplicateEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantCompositeReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantCompositeReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantCompositeReplicateEXT(Span<int> buffer) => new OpSpecConstantCompositeReplicateEXT(buffer);
    public static implicit operator OpSpecConstantCompositeReplicateEXT(Instruction instruction) => new OpSpecConstantCompositeReplicateEXT(instruction.AsRef());
    public static implicit operator OpSpecConstantCompositeReplicateEXT(RefInstruction instruction) => new OpSpecConstantCompositeReplicateEXT(instruction);
}

public ref struct OpCompositeConstructReplicateEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpCompositeConstructReplicateEXT(RefInstruction instruction) => Inner = instruction;
    public OpCompositeConstructReplicateEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCompositeConstructReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCompositeConstructReplicateEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCompositeConstructReplicateEXT(Span<int> buffer) => new OpCompositeConstructReplicateEXT(buffer);
    public static implicit operator OpCompositeConstructReplicateEXT(Instruction instruction) => new OpCompositeConstructReplicateEXT(instruction.AsRef());
    public static implicit operator OpCompositeConstructReplicateEXT(RefInstruction instruction) => new OpCompositeConstructReplicateEXT(instruction);
}

public ref struct OpTypeRayQueryKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeRayQueryKHR(RefInstruction instruction) => Inner = instruction;
    public OpTypeRayQueryKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeRayQueryKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeRayQueryKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeRayQueryKHR(Span<int> buffer) => new OpTypeRayQueryKHR(buffer);
    public static implicit operator OpTypeRayQueryKHR(Instruction instruction) => new OpTypeRayQueryKHR(instruction.AsRef());
    public static implicit operator OpTypeRayQueryKHR(RefInstruction instruction) => new OpTypeRayQueryKHR(instruction);
}

public ref struct OpRayQueryInitializeKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef CullMask => Inner.GetOperand<IdRef>("cullMask") ?? default;
    public IdRef RayOrigin => Inner.GetOperand<IdRef>("rayOrigin") ?? default;
    public IdRef RayTMin => Inner.GetOperand<IdRef>("rayTMin") ?? default;
    public IdRef RayDirection => Inner.GetOperand<IdRef>("rayDirection") ?? default;
    public IdRef RayTMax => Inner.GetOperand<IdRef>("rayTMax") ?? default;

    public OpRayQueryInitializeKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryInitializeKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryInitializeKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryInitializeKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryInitializeKHR(Span<int> buffer) => new OpRayQueryInitializeKHR(buffer);
    public static implicit operator OpRayQueryInitializeKHR(Instruction instruction) => new OpRayQueryInitializeKHR(instruction.AsRef());
    public static implicit operator OpRayQueryInitializeKHR(RefInstruction instruction) => new OpRayQueryInitializeKHR(instruction);
}

public ref struct OpRayQueryTerminateKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryTerminateKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryTerminateKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryTerminateKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryTerminateKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryTerminateKHR(Span<int> buffer) => new OpRayQueryTerminateKHR(buffer);
    public static implicit operator OpRayQueryTerminateKHR(Instruction instruction) => new OpRayQueryTerminateKHR(instruction.AsRef());
    public static implicit operator OpRayQueryTerminateKHR(RefInstruction instruction) => new OpRayQueryTerminateKHR(instruction);
}

public ref struct OpRayQueryGenerateIntersectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef HitT => Inner.GetOperand<IdRef>("hitT") ?? default;

    public OpRayQueryGenerateIntersectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGenerateIntersectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGenerateIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGenerateIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGenerateIntersectionKHR(Span<int> buffer) => new OpRayQueryGenerateIntersectionKHR(buffer);
    public static implicit operator OpRayQueryGenerateIntersectionKHR(Instruction instruction) => new OpRayQueryGenerateIntersectionKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGenerateIntersectionKHR(RefInstruction instruction) => new OpRayQueryGenerateIntersectionKHR(instruction);
}

public ref struct OpRayQueryConfirmIntersectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryConfirmIntersectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryConfirmIntersectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryConfirmIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryConfirmIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryConfirmIntersectionKHR(Span<int> buffer) => new OpRayQueryConfirmIntersectionKHR(buffer);
    public static implicit operator OpRayQueryConfirmIntersectionKHR(Instruction instruction) => new OpRayQueryConfirmIntersectionKHR(instruction.AsRef());
    public static implicit operator OpRayQueryConfirmIntersectionKHR(RefInstruction instruction) => new OpRayQueryConfirmIntersectionKHR(instruction);
}

public ref struct OpRayQueryProceedKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryProceedKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryProceedKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryProceedKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryProceedKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryProceedKHR(Span<int> buffer) => new OpRayQueryProceedKHR(buffer);
    public static implicit operator OpRayQueryProceedKHR(Instruction instruction) => new OpRayQueryProceedKHR(instruction.AsRef());
    public static implicit operator OpRayQueryProceedKHR(RefInstruction instruction) => new OpRayQueryProceedKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionTypeKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionTypeKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionTypeKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionTypeKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionTypeKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionTypeKHR(Span<int> buffer) => new OpRayQueryGetIntersectionTypeKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionTypeKHR(Instruction instruction) => new OpRayQueryGetIntersectionTypeKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionTypeKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionTypeKHR(instruction);
}

public ref struct OpImageSampleWeightedQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Texture => Inner.GetOperand<IdRef>("texture") ?? default;
    public IdRef Coordinates => Inner.GetOperand<IdRef>("coordinates") ?? default;
    public IdRef Weights => Inner.GetOperand<IdRef>("weights") ?? default;

    public OpImageSampleWeightedQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleWeightedQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleWeightedQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleWeightedQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleWeightedQCOM(Span<int> buffer) => new OpImageSampleWeightedQCOM(buffer);
    public static implicit operator OpImageSampleWeightedQCOM(Instruction instruction) => new OpImageSampleWeightedQCOM(instruction.AsRef());
    public static implicit operator OpImageSampleWeightedQCOM(RefInstruction instruction) => new OpImageSampleWeightedQCOM(instruction);
}

public ref struct OpImageBoxFilterQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Texture => Inner.GetOperand<IdRef>("texture") ?? default;
    public IdRef Coordinates => Inner.GetOperand<IdRef>("coordinates") ?? default;
    public IdRef BoxSize => Inner.GetOperand<IdRef>("boxSize") ?? default;

    public OpImageBoxFilterQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBoxFilterQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBoxFilterQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBoxFilterQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBoxFilterQCOM(Span<int> buffer) => new OpImageBoxFilterQCOM(buffer);
    public static implicit operator OpImageBoxFilterQCOM(Instruction instruction) => new OpImageBoxFilterQCOM(instruction.AsRef());
    public static implicit operator OpImageBoxFilterQCOM(RefInstruction instruction) => new OpImageBoxFilterQCOM(instruction);
}

public ref struct OpImageBlockMatchSSDQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef Reference => Inner.GetOperand<IdRef>("reference") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchSSDQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchSSDQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchSSDQCOM(Span<int> buffer) => new OpImageBlockMatchSSDQCOM(buffer);
    public static implicit operator OpImageBlockMatchSSDQCOM(Instruction instruction) => new OpImageBlockMatchSSDQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchSSDQCOM(RefInstruction instruction) => new OpImageBlockMatchSSDQCOM(instruction);
}

public ref struct OpImageBlockMatchSADQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef Reference => Inner.GetOperand<IdRef>("reference") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchSADQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchSADQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchSADQCOM(Span<int> buffer) => new OpImageBlockMatchSADQCOM(buffer);
    public static implicit operator OpImageBlockMatchSADQCOM(Instruction instruction) => new OpImageBlockMatchSADQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchSADQCOM(RefInstruction instruction) => new OpImageBlockMatchSADQCOM(instruction);
}

public ref struct OpImageBlockMatchWindowSSDQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TargetSampledImage => Inner.GetOperand<IdRef>("targetSampledImage") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef ReferenceSampledImage => Inner.GetOperand<IdRef>("referenceSampledImage") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchWindowSSDQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchWindowSSDQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchWindowSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchWindowSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchWindowSSDQCOM(Span<int> buffer) => new OpImageBlockMatchWindowSSDQCOM(buffer);
    public static implicit operator OpImageBlockMatchWindowSSDQCOM(Instruction instruction) => new OpImageBlockMatchWindowSSDQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchWindowSSDQCOM(RefInstruction instruction) => new OpImageBlockMatchWindowSSDQCOM(instruction);
}

public ref struct OpImageBlockMatchWindowSADQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TargetSampledImage => Inner.GetOperand<IdRef>("targetSampledImage") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef ReferenceSampledImage => Inner.GetOperand<IdRef>("referenceSampledImage") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchWindowSADQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchWindowSADQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchWindowSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchWindowSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchWindowSADQCOM(Span<int> buffer) => new OpImageBlockMatchWindowSADQCOM(buffer);
    public static implicit operator OpImageBlockMatchWindowSADQCOM(Instruction instruction) => new OpImageBlockMatchWindowSADQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchWindowSADQCOM(RefInstruction instruction) => new OpImageBlockMatchWindowSADQCOM(instruction);
}

public ref struct OpImageBlockMatchGatherSSDQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TargetSampledImage => Inner.GetOperand<IdRef>("targetSampledImage") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef ReferenceSampledImage => Inner.GetOperand<IdRef>("referenceSampledImage") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchGatherSSDQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchGatherSSDQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchGatherSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchGatherSSDQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchGatherSSDQCOM(Span<int> buffer) => new OpImageBlockMatchGatherSSDQCOM(buffer);
    public static implicit operator OpImageBlockMatchGatherSSDQCOM(Instruction instruction) => new OpImageBlockMatchGatherSSDQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchGatherSSDQCOM(RefInstruction instruction) => new OpImageBlockMatchGatherSSDQCOM(instruction);
}

public ref struct OpImageBlockMatchGatherSADQCOM : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TargetSampledImage => Inner.GetOperand<IdRef>("targetSampledImage") ?? default;
    public IdRef TargetCoordinates => Inner.GetOperand<IdRef>("targetCoordinates") ?? default;
    public IdRef ReferenceSampledImage => Inner.GetOperand<IdRef>("referenceSampledImage") ?? default;
    public IdRef ReferenceCoordinates => Inner.GetOperand<IdRef>("referenceCoordinates") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpImageBlockMatchGatherSADQCOM(RefInstruction instruction) => Inner = instruction;
    public OpImageBlockMatchGatherSADQCOM(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageBlockMatchGatherSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageBlockMatchGatherSADQCOM instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageBlockMatchGatherSADQCOM(Span<int> buffer) => new OpImageBlockMatchGatherSADQCOM(buffer);
    public static implicit operator OpImageBlockMatchGatherSADQCOM(Instruction instruction) => new OpImageBlockMatchGatherSADQCOM(instruction.AsRef());
    public static implicit operator OpImageBlockMatchGatherSADQCOM(RefInstruction instruction) => new OpImageBlockMatchGatherSADQCOM(instruction);
}

public ref struct OpGroupIAddNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupIAddNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupIAddNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupIAddNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupIAddNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupIAddNonUniformAMD(Span<int> buffer) => new OpGroupIAddNonUniformAMD(buffer);
    public static implicit operator OpGroupIAddNonUniformAMD(Instruction instruction) => new OpGroupIAddNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupIAddNonUniformAMD(RefInstruction instruction) => new OpGroupIAddNonUniformAMD(instruction);
}

public ref struct OpGroupFAddNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFAddNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupFAddNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFAddNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFAddNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFAddNonUniformAMD(Span<int> buffer) => new OpGroupFAddNonUniformAMD(buffer);
    public static implicit operator OpGroupFAddNonUniformAMD(Instruction instruction) => new OpGroupFAddNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupFAddNonUniformAMD(RefInstruction instruction) => new OpGroupFAddNonUniformAMD(instruction);
}

public ref struct OpGroupFMinNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFMinNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupFMinNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFMinNonUniformAMD(Span<int> buffer) => new OpGroupFMinNonUniformAMD(buffer);
    public static implicit operator OpGroupFMinNonUniformAMD(Instruction instruction) => new OpGroupFMinNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupFMinNonUniformAMD(RefInstruction instruction) => new OpGroupFMinNonUniformAMD(instruction);
}

public ref struct OpGroupUMinNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupUMinNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupUMinNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupUMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupUMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupUMinNonUniformAMD(Span<int> buffer) => new OpGroupUMinNonUniformAMD(buffer);
    public static implicit operator OpGroupUMinNonUniformAMD(Instruction instruction) => new OpGroupUMinNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupUMinNonUniformAMD(RefInstruction instruction) => new OpGroupUMinNonUniformAMD(instruction);
}

public ref struct OpGroupSMinNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupSMinNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupSMinNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupSMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupSMinNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupSMinNonUniformAMD(Span<int> buffer) => new OpGroupSMinNonUniformAMD(buffer);
    public static implicit operator OpGroupSMinNonUniformAMD(Instruction instruction) => new OpGroupSMinNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupSMinNonUniformAMD(RefInstruction instruction) => new OpGroupSMinNonUniformAMD(instruction);
}

public ref struct OpGroupFMaxNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFMaxNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupFMaxNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFMaxNonUniformAMD(Span<int> buffer) => new OpGroupFMaxNonUniformAMD(buffer);
    public static implicit operator OpGroupFMaxNonUniformAMD(Instruction instruction) => new OpGroupFMaxNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupFMaxNonUniformAMD(RefInstruction instruction) => new OpGroupFMaxNonUniformAMD(instruction);
}

public ref struct OpGroupUMaxNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupUMaxNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupUMaxNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupUMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupUMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupUMaxNonUniformAMD(Span<int> buffer) => new OpGroupUMaxNonUniformAMD(buffer);
    public static implicit operator OpGroupUMaxNonUniformAMD(Instruction instruction) => new OpGroupUMaxNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupUMaxNonUniformAMD(RefInstruction instruction) => new OpGroupUMaxNonUniformAMD(instruction);
}

public ref struct OpGroupSMaxNonUniformAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupSMaxNonUniformAMD(RefInstruction instruction) => Inner = instruction;
    public OpGroupSMaxNonUniformAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupSMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupSMaxNonUniformAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupSMaxNonUniformAMD(Span<int> buffer) => new OpGroupSMaxNonUniformAMD(buffer);
    public static implicit operator OpGroupSMaxNonUniformAMD(Instruction instruction) => new OpGroupSMaxNonUniformAMD(instruction.AsRef());
    public static implicit operator OpGroupSMaxNonUniformAMD(RefInstruction instruction) => new OpGroupSMaxNonUniformAMD(instruction);
}

public ref struct OpFragmentMaskFetchAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;

    public OpFragmentMaskFetchAMD(RefInstruction instruction) => Inner = instruction;
    public OpFragmentMaskFetchAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFragmentMaskFetchAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFragmentMaskFetchAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFragmentMaskFetchAMD(Span<int> buffer) => new OpFragmentMaskFetchAMD(buffer);
    public static implicit operator OpFragmentMaskFetchAMD(Instruction instruction) => new OpFragmentMaskFetchAMD(instruction.AsRef());
    public static implicit operator OpFragmentMaskFetchAMD(RefInstruction instruction) => new OpFragmentMaskFetchAMD(instruction);
}

public ref struct OpFragmentFetchAMD : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef FragmentIndex => Inner.GetOperand<IdRef>("fragmentIndex") ?? default;

    public OpFragmentFetchAMD(RefInstruction instruction) => Inner = instruction;
    public OpFragmentFetchAMD(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFragmentFetchAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFragmentFetchAMD instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFragmentFetchAMD(Span<int> buffer) => new OpFragmentFetchAMD(buffer);
    public static implicit operator OpFragmentFetchAMD(Instruction instruction) => new OpFragmentFetchAMD(instruction.AsRef());
    public static implicit operator OpFragmentFetchAMD(RefInstruction instruction) => new OpFragmentFetchAMD(instruction);
}

public ref struct OpReadClockKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Scope => Inner.GetOperand<IdScope>("scope") ?? default;

    public OpReadClockKHR(RefInstruction instruction) => Inner = instruction;
    public OpReadClockKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReadClockKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReadClockKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReadClockKHR(Span<int> buffer) => new OpReadClockKHR(buffer);
    public static implicit operator OpReadClockKHR(Instruction instruction) => new OpReadClockKHR(instruction.AsRef());
    public static implicit operator OpReadClockKHR(RefInstruction instruction) => new OpReadClockKHR(instruction);
}

public ref struct OpAllocateNodePayloadsAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Visibility => Inner.GetOperand<IdScope>("visibility") ?? default;
    public IdRef PayloadCount => Inner.GetOperand<IdRef>("payloadCount") ?? default;
    public IdRef NodeIndex => Inner.GetOperand<IdRef>("nodeIndex") ?? default;

    public OpAllocateNodePayloadsAMDX(RefInstruction instruction) => Inner = instruction;
    public OpAllocateNodePayloadsAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAllocateNodePayloadsAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAllocateNodePayloadsAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAllocateNodePayloadsAMDX(Span<int> buffer) => new OpAllocateNodePayloadsAMDX(buffer);
    public static implicit operator OpAllocateNodePayloadsAMDX(Instruction instruction) => new OpAllocateNodePayloadsAMDX(instruction.AsRef());
    public static implicit operator OpAllocateNodePayloadsAMDX(RefInstruction instruction) => new OpAllocateNodePayloadsAMDX(instruction);
}

public ref struct OpEnqueueNodePayloadsAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef PayloadArray => Inner.GetOperand<IdRef>("payloadArray") ?? default;

    public OpEnqueueNodePayloadsAMDX(RefInstruction instruction) => Inner = instruction;
    public OpEnqueueNodePayloadsAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEnqueueNodePayloadsAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEnqueueNodePayloadsAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEnqueueNodePayloadsAMDX(Span<int> buffer) => new OpEnqueueNodePayloadsAMDX(buffer);
    public static implicit operator OpEnqueueNodePayloadsAMDX(Instruction instruction) => new OpEnqueueNodePayloadsAMDX(instruction.AsRef());
    public static implicit operator OpEnqueueNodePayloadsAMDX(RefInstruction instruction) => new OpEnqueueNodePayloadsAMDX(instruction);
}

public ref struct OpTypeNodePayloadArrayAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PayloadType => Inner.GetOperand<IdRef>("payloadType") ?? default;

    public OpTypeNodePayloadArrayAMDX(RefInstruction instruction) => Inner = instruction;
    public OpTypeNodePayloadArrayAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeNodePayloadArrayAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeNodePayloadArrayAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeNodePayloadArrayAMDX(Span<int> buffer) => new OpTypeNodePayloadArrayAMDX(buffer);
    public static implicit operator OpTypeNodePayloadArrayAMDX(Instruction instruction) => new OpTypeNodePayloadArrayAMDX(instruction.AsRef());
    public static implicit operator OpTypeNodePayloadArrayAMDX(RefInstruction instruction) => new OpTypeNodePayloadArrayAMDX(instruction);
}

public ref struct OpFinishWritingNodePayloadAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpFinishWritingNodePayloadAMDX(RefInstruction instruction) => Inner = instruction;
    public OpFinishWritingNodePayloadAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFinishWritingNodePayloadAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFinishWritingNodePayloadAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFinishWritingNodePayloadAMDX(Span<int> buffer) => new OpFinishWritingNodePayloadAMDX(buffer);
    public static implicit operator OpFinishWritingNodePayloadAMDX(Instruction instruction) => new OpFinishWritingNodePayloadAMDX(instruction.AsRef());
    public static implicit operator OpFinishWritingNodePayloadAMDX(RefInstruction instruction) => new OpFinishWritingNodePayloadAMDX(instruction);
}

public ref struct OpNodePayloadArrayLengthAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PayloadArray => Inner.GetOperand<IdRef>("payloadArray") ?? default;

    public OpNodePayloadArrayLengthAMDX(RefInstruction instruction) => Inner = instruction;
    public OpNodePayloadArrayLengthAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpNodePayloadArrayLengthAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpNodePayloadArrayLengthAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpNodePayloadArrayLengthAMDX(Span<int> buffer) => new OpNodePayloadArrayLengthAMDX(buffer);
    public static implicit operator OpNodePayloadArrayLengthAMDX(Instruction instruction) => new OpNodePayloadArrayLengthAMDX(instruction.AsRef());
    public static implicit operator OpNodePayloadArrayLengthAMDX(RefInstruction instruction) => new OpNodePayloadArrayLengthAMDX(instruction);
}

public ref struct OpIsNodePayloadValidAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PayloadType => Inner.GetOperand<IdRef>("payloadType") ?? default;
    public IdRef NodeIndex => Inner.GetOperand<IdRef>("nodeIndex") ?? default;

    public OpIsNodePayloadValidAMDX(RefInstruction instruction) => Inner = instruction;
    public OpIsNodePayloadValidAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsNodePayloadValidAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsNodePayloadValidAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsNodePayloadValidAMDX(Span<int> buffer) => new OpIsNodePayloadValidAMDX(buffer);
    public static implicit operator OpIsNodePayloadValidAMDX(Instruction instruction) => new OpIsNodePayloadValidAMDX(instruction.AsRef());
    public static implicit operator OpIsNodePayloadValidAMDX(RefInstruction instruction) => new OpIsNodePayloadValidAMDX(instruction);
}

public ref struct OpConstantStringAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString LiteralString => Inner.GetOperand<LiteralString>("literalString") ?? default;

    public OpConstantStringAMDX(RefInstruction instruction) => Inner = instruction;
    public OpConstantStringAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantStringAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantStringAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantStringAMDX(Span<int> buffer) => new OpConstantStringAMDX(buffer);
    public static implicit operator OpConstantStringAMDX(Instruction instruction) => new OpConstantStringAMDX(instruction.AsRef());
    public static implicit operator OpConstantStringAMDX(RefInstruction instruction) => new OpConstantStringAMDX(instruction);
}

public ref struct OpSpecConstantStringAMDX : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString LiteralString => Inner.GetOperand<LiteralString>("literalString") ?? default;

    public OpSpecConstantStringAMDX(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantStringAMDX(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantStringAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantStringAMDX instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantStringAMDX(Span<int> buffer) => new OpSpecConstantStringAMDX(buffer);
    public static implicit operator OpSpecConstantStringAMDX(Instruction instruction) => new OpSpecConstantStringAMDX(instruction.AsRef());
    public static implicit operator OpSpecConstantStringAMDX(RefInstruction instruction) => new OpSpecConstantStringAMDX(instruction);
}

public ref struct OpGroupNonUniformQuadAllKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupNonUniformQuadAllKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformQuadAllKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformQuadAllKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformQuadAllKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformQuadAllKHR(Span<int> buffer) => new OpGroupNonUniformQuadAllKHR(buffer);
    public static implicit operator OpGroupNonUniformQuadAllKHR(Instruction instruction) => new OpGroupNonUniformQuadAllKHR(instruction.AsRef());
    public static implicit operator OpGroupNonUniformQuadAllKHR(RefInstruction instruction) => new OpGroupNonUniformQuadAllKHR(instruction);
}

public ref struct OpGroupNonUniformQuadAnyKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Predicate => Inner.GetOperand<IdRef>("predicate") ?? default;

    public OpGroupNonUniformQuadAnyKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformQuadAnyKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformQuadAnyKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformQuadAnyKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformQuadAnyKHR(Span<int> buffer) => new OpGroupNonUniformQuadAnyKHR(buffer);
    public static implicit operator OpGroupNonUniformQuadAnyKHR(Instruction instruction) => new OpGroupNonUniformQuadAnyKHR(instruction.AsRef());
    public static implicit operator OpGroupNonUniformQuadAnyKHR(RefInstruction instruction) => new OpGroupNonUniformQuadAnyKHR(instruction);
}

public ref struct OpHitObjectRecordHitMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef PrimitiveId => Inner.GetOperand<IdRef>("primitiveId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef HitKind => Inner.GetOperand<IdRef>("hitKind") ?? default;
    public IdRef SBTRecordOffset => Inner.GetOperand<IdRef>("sBTRecordOffset") ?? default;
    public IdRef SBTRecordStride => Inner.GetOperand<IdRef>("sBTRecordStride") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef CurrentTime => Inner.GetOperand<IdRef>("currentTime") ?? default;
    public IdRef HitObjectAttributes => Inner.GetOperand<IdRef>("hitObjectAttributes") ?? default;

    public OpHitObjectRecordHitMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordHitMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordHitMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordHitMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordHitMotionNV(Span<int> buffer) => new OpHitObjectRecordHitMotionNV(buffer);
    public static implicit operator OpHitObjectRecordHitMotionNV(Instruction instruction) => new OpHitObjectRecordHitMotionNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordHitMotionNV(RefInstruction instruction) => new OpHitObjectRecordHitMotionNV(instruction);
}

public ref struct OpHitObjectRecordHitWithIndexMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef PrimitiveId => Inner.GetOperand<IdRef>("primitiveId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef HitKind => Inner.GetOperand<IdRef>("hitKind") ?? default;
    public IdRef SBTRecordIndex => Inner.GetOperand<IdRef>("sBTRecordIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef CurrentTime => Inner.GetOperand<IdRef>("currentTime") ?? default;
    public IdRef HitObjectAttributes => Inner.GetOperand<IdRef>("hitObjectAttributes") ?? default;

    public OpHitObjectRecordHitWithIndexMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordHitWithIndexMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordHitWithIndexMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordHitWithIndexMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordHitWithIndexMotionNV(Span<int> buffer) => new OpHitObjectRecordHitWithIndexMotionNV(buffer);
    public static implicit operator OpHitObjectRecordHitWithIndexMotionNV(Instruction instruction) => new OpHitObjectRecordHitWithIndexMotionNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordHitWithIndexMotionNV(RefInstruction instruction) => new OpHitObjectRecordHitWithIndexMotionNV(instruction);
}

public ref struct OpHitObjectRecordMissMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef SBTIndex => Inner.GetOperand<IdRef>("sBTIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef CurrentTime => Inner.GetOperand<IdRef>("currentTime") ?? default;

    public OpHitObjectRecordMissMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordMissMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordMissMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordMissMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordMissMotionNV(Span<int> buffer) => new OpHitObjectRecordMissMotionNV(buffer);
    public static implicit operator OpHitObjectRecordMissMotionNV(Instruction instruction) => new OpHitObjectRecordMissMotionNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordMissMotionNV(RefInstruction instruction) => new OpHitObjectRecordMissMotionNV(instruction);
}

public ref struct OpHitObjectGetWorldToObjectNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetWorldToObjectNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetWorldToObjectNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetWorldToObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetWorldToObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetWorldToObjectNV(Span<int> buffer) => new OpHitObjectGetWorldToObjectNV(buffer);
    public static implicit operator OpHitObjectGetWorldToObjectNV(Instruction instruction) => new OpHitObjectGetWorldToObjectNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetWorldToObjectNV(RefInstruction instruction) => new OpHitObjectGetWorldToObjectNV(instruction);
}

public ref struct OpHitObjectGetObjectToWorldNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetObjectToWorldNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetObjectToWorldNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetObjectToWorldNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetObjectToWorldNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetObjectToWorldNV(Span<int> buffer) => new OpHitObjectGetObjectToWorldNV(buffer);
    public static implicit operator OpHitObjectGetObjectToWorldNV(Instruction instruction) => new OpHitObjectGetObjectToWorldNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetObjectToWorldNV(RefInstruction instruction) => new OpHitObjectGetObjectToWorldNV(instruction);
}

public ref struct OpHitObjectGetObjectRayDirectionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetObjectRayDirectionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetObjectRayDirectionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetObjectRayDirectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetObjectRayDirectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetObjectRayDirectionNV(Span<int> buffer) => new OpHitObjectGetObjectRayDirectionNV(buffer);
    public static implicit operator OpHitObjectGetObjectRayDirectionNV(Instruction instruction) => new OpHitObjectGetObjectRayDirectionNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetObjectRayDirectionNV(RefInstruction instruction) => new OpHitObjectGetObjectRayDirectionNV(instruction);
}

public ref struct OpHitObjectGetObjectRayOriginNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetObjectRayOriginNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetObjectRayOriginNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetObjectRayOriginNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetObjectRayOriginNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetObjectRayOriginNV(Span<int> buffer) => new OpHitObjectGetObjectRayOriginNV(buffer);
    public static implicit operator OpHitObjectGetObjectRayOriginNV(Instruction instruction) => new OpHitObjectGetObjectRayOriginNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetObjectRayOriginNV(RefInstruction instruction) => new OpHitObjectGetObjectRayOriginNV(instruction);
}

public ref struct OpHitObjectTraceRayMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef Cullmask => Inner.GetOperand<IdRef>("cullmask") ?? default;
    public IdRef SBTRecordOffset => Inner.GetOperand<IdRef>("sBTRecordOffset") ?? default;
    public IdRef SBTRecordStride => Inner.GetOperand<IdRef>("sBTRecordStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef Time => Inner.GetOperand<IdRef>("time") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpHitObjectTraceRayMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectTraceRayMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectTraceRayMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectTraceRayMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectTraceRayMotionNV(Span<int> buffer) => new OpHitObjectTraceRayMotionNV(buffer);
    public static implicit operator OpHitObjectTraceRayMotionNV(Instruction instruction) => new OpHitObjectTraceRayMotionNV(instruction.AsRef());
    public static implicit operator OpHitObjectTraceRayMotionNV(RefInstruction instruction) => new OpHitObjectTraceRayMotionNV(instruction);
}

public ref struct OpHitObjectGetShaderRecordBufferHandleNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetShaderRecordBufferHandleNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetShaderRecordBufferHandleNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetShaderRecordBufferHandleNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetShaderRecordBufferHandleNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetShaderRecordBufferHandleNV(Span<int> buffer) => new OpHitObjectGetShaderRecordBufferHandleNV(buffer);
    public static implicit operator OpHitObjectGetShaderRecordBufferHandleNV(Instruction instruction) => new OpHitObjectGetShaderRecordBufferHandleNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetShaderRecordBufferHandleNV(RefInstruction instruction) => new OpHitObjectGetShaderRecordBufferHandleNV(instruction);
}

public ref struct OpHitObjectGetShaderBindingTableRecordIndexNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetShaderBindingTableRecordIndexNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetShaderBindingTableRecordIndexNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetShaderBindingTableRecordIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetShaderBindingTableRecordIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetShaderBindingTableRecordIndexNV(Span<int> buffer) => new OpHitObjectGetShaderBindingTableRecordIndexNV(buffer);
    public static implicit operator OpHitObjectGetShaderBindingTableRecordIndexNV(Instruction instruction) => new OpHitObjectGetShaderBindingTableRecordIndexNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetShaderBindingTableRecordIndexNV(RefInstruction instruction) => new OpHitObjectGetShaderBindingTableRecordIndexNV(instruction);
}

public ref struct OpHitObjectRecordEmptyNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectRecordEmptyNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordEmptyNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordEmptyNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordEmptyNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordEmptyNV(Span<int> buffer) => new OpHitObjectRecordEmptyNV(buffer);
    public static implicit operator OpHitObjectRecordEmptyNV(Instruction instruction) => new OpHitObjectRecordEmptyNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordEmptyNV(RefInstruction instruction) => new OpHitObjectRecordEmptyNV(instruction);
}

public ref struct OpHitObjectTraceRayNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef Cullmask => Inner.GetOperand<IdRef>("cullmask") ?? default;
    public IdRef SBTRecordOffset => Inner.GetOperand<IdRef>("sBTRecordOffset") ?? default;
    public IdRef SBTRecordStride => Inner.GetOperand<IdRef>("sBTRecordStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpHitObjectTraceRayNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectTraceRayNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectTraceRayNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectTraceRayNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectTraceRayNV(Span<int> buffer) => new OpHitObjectTraceRayNV(buffer);
    public static implicit operator OpHitObjectTraceRayNV(Instruction instruction) => new OpHitObjectTraceRayNV(instruction.AsRef());
    public static implicit operator OpHitObjectTraceRayNV(RefInstruction instruction) => new OpHitObjectTraceRayNV(instruction);
}

public ref struct OpHitObjectRecordHitNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef PrimitiveId => Inner.GetOperand<IdRef>("primitiveId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef HitKind => Inner.GetOperand<IdRef>("hitKind") ?? default;
    public IdRef SBTRecordOffset => Inner.GetOperand<IdRef>("sBTRecordOffset") ?? default;
    public IdRef SBTRecordStride => Inner.GetOperand<IdRef>("sBTRecordStride") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef HitObjectAttributes => Inner.GetOperand<IdRef>("hitObjectAttributes") ?? default;

    public OpHitObjectRecordHitNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordHitNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordHitNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordHitNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordHitNV(Span<int> buffer) => new OpHitObjectRecordHitNV(buffer);
    public static implicit operator OpHitObjectRecordHitNV(Instruction instruction) => new OpHitObjectRecordHitNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordHitNV(RefInstruction instruction) => new OpHitObjectRecordHitNV(instruction);
}

public ref struct OpHitObjectRecordHitWithIndexNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef AccelerationStructure => Inner.GetOperand<IdRef>("accelerationStructure") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef PrimitiveId => Inner.GetOperand<IdRef>("primitiveId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef HitKind => Inner.GetOperand<IdRef>("hitKind") ?? default;
    public IdRef SBTRecordIndex => Inner.GetOperand<IdRef>("sBTRecordIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;
    public IdRef HitObjectAttributes => Inner.GetOperand<IdRef>("hitObjectAttributes") ?? default;

    public OpHitObjectRecordHitWithIndexNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordHitWithIndexNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordHitWithIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordHitWithIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordHitWithIndexNV(Span<int> buffer) => new OpHitObjectRecordHitWithIndexNV(buffer);
    public static implicit operator OpHitObjectRecordHitWithIndexNV(Instruction instruction) => new OpHitObjectRecordHitWithIndexNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordHitWithIndexNV(RefInstruction instruction) => new OpHitObjectRecordHitWithIndexNV(instruction);
}

public ref struct OpHitObjectRecordMissNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef SBTIndex => Inner.GetOperand<IdRef>("sBTIndex") ?? default;
    public IdRef Origin => Inner.GetOperand<IdRef>("origin") ?? default;
    public IdRef TMin => Inner.GetOperand<IdRef>("tMin") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef TMax => Inner.GetOperand<IdRef>("tMax") ?? default;

    public OpHitObjectRecordMissNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectRecordMissNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectRecordMissNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectRecordMissNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectRecordMissNV(Span<int> buffer) => new OpHitObjectRecordMissNV(buffer);
    public static implicit operator OpHitObjectRecordMissNV(Instruction instruction) => new OpHitObjectRecordMissNV(instruction.AsRef());
    public static implicit operator OpHitObjectRecordMissNV(RefInstruction instruction) => new OpHitObjectRecordMissNV(instruction);
}

public ref struct OpHitObjectExecuteShaderNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpHitObjectExecuteShaderNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectExecuteShaderNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectExecuteShaderNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectExecuteShaderNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectExecuteShaderNV(Span<int> buffer) => new OpHitObjectExecuteShaderNV(buffer);
    public static implicit operator OpHitObjectExecuteShaderNV(Instruction instruction) => new OpHitObjectExecuteShaderNV(instruction.AsRef());
    public static implicit operator OpHitObjectExecuteShaderNV(RefInstruction instruction) => new OpHitObjectExecuteShaderNV(instruction);
}

public ref struct OpHitObjectGetCurrentTimeNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetCurrentTimeNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetCurrentTimeNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetCurrentTimeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetCurrentTimeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetCurrentTimeNV(Span<int> buffer) => new OpHitObjectGetCurrentTimeNV(buffer);
    public static implicit operator OpHitObjectGetCurrentTimeNV(Instruction instruction) => new OpHitObjectGetCurrentTimeNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetCurrentTimeNV(RefInstruction instruction) => new OpHitObjectGetCurrentTimeNV(instruction);
}

public ref struct OpHitObjectGetAttributesNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef HitObjectAttribute => Inner.GetOperand<IdRef>("hitObjectAttribute") ?? default;

    public OpHitObjectGetAttributesNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetAttributesNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetAttributesNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetAttributesNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetAttributesNV(Span<int> buffer) => new OpHitObjectGetAttributesNV(buffer);
    public static implicit operator OpHitObjectGetAttributesNV(Instruction instruction) => new OpHitObjectGetAttributesNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetAttributesNV(RefInstruction instruction) => new OpHitObjectGetAttributesNV(instruction);
}

public ref struct OpHitObjectGetHitKindNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetHitKindNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetHitKindNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetHitKindNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetHitKindNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetHitKindNV(Span<int> buffer) => new OpHitObjectGetHitKindNV(buffer);
    public static implicit operator OpHitObjectGetHitKindNV(Instruction instruction) => new OpHitObjectGetHitKindNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetHitKindNV(RefInstruction instruction) => new OpHitObjectGetHitKindNV(instruction);
}

public ref struct OpHitObjectGetPrimitiveIndexNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetPrimitiveIndexNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetPrimitiveIndexNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetPrimitiveIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetPrimitiveIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetPrimitiveIndexNV(Span<int> buffer) => new OpHitObjectGetPrimitiveIndexNV(buffer);
    public static implicit operator OpHitObjectGetPrimitiveIndexNV(Instruction instruction) => new OpHitObjectGetPrimitiveIndexNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetPrimitiveIndexNV(RefInstruction instruction) => new OpHitObjectGetPrimitiveIndexNV(instruction);
}

public ref struct OpHitObjectGetGeometryIndexNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetGeometryIndexNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetGeometryIndexNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetGeometryIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetGeometryIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetGeometryIndexNV(Span<int> buffer) => new OpHitObjectGetGeometryIndexNV(buffer);
    public static implicit operator OpHitObjectGetGeometryIndexNV(Instruction instruction) => new OpHitObjectGetGeometryIndexNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetGeometryIndexNV(RefInstruction instruction) => new OpHitObjectGetGeometryIndexNV(instruction);
}

public ref struct OpHitObjectGetInstanceIdNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetInstanceIdNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetInstanceIdNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetInstanceIdNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetInstanceIdNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetInstanceIdNV(Span<int> buffer) => new OpHitObjectGetInstanceIdNV(buffer);
    public static implicit operator OpHitObjectGetInstanceIdNV(Instruction instruction) => new OpHitObjectGetInstanceIdNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetInstanceIdNV(RefInstruction instruction) => new OpHitObjectGetInstanceIdNV(instruction);
}

public ref struct OpHitObjectGetInstanceCustomIndexNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetInstanceCustomIndexNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetInstanceCustomIndexNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetInstanceCustomIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetInstanceCustomIndexNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetInstanceCustomIndexNV(Span<int> buffer) => new OpHitObjectGetInstanceCustomIndexNV(buffer);
    public static implicit operator OpHitObjectGetInstanceCustomIndexNV(Instruction instruction) => new OpHitObjectGetInstanceCustomIndexNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetInstanceCustomIndexNV(RefInstruction instruction) => new OpHitObjectGetInstanceCustomIndexNV(instruction);
}

public ref struct OpHitObjectGetWorldRayDirectionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetWorldRayDirectionNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetWorldRayDirectionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetWorldRayDirectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetWorldRayDirectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetWorldRayDirectionNV(Span<int> buffer) => new OpHitObjectGetWorldRayDirectionNV(buffer);
    public static implicit operator OpHitObjectGetWorldRayDirectionNV(Instruction instruction) => new OpHitObjectGetWorldRayDirectionNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetWorldRayDirectionNV(RefInstruction instruction) => new OpHitObjectGetWorldRayDirectionNV(instruction);
}

public ref struct OpHitObjectGetWorldRayOriginNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetWorldRayOriginNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetWorldRayOriginNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetWorldRayOriginNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetWorldRayOriginNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetWorldRayOriginNV(Span<int> buffer) => new OpHitObjectGetWorldRayOriginNV(buffer);
    public static implicit operator OpHitObjectGetWorldRayOriginNV(Instruction instruction) => new OpHitObjectGetWorldRayOriginNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetWorldRayOriginNV(RefInstruction instruction) => new OpHitObjectGetWorldRayOriginNV(instruction);
}

public ref struct OpHitObjectGetRayTMaxNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetRayTMaxNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetRayTMaxNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetRayTMaxNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetRayTMaxNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetRayTMaxNV(Span<int> buffer) => new OpHitObjectGetRayTMaxNV(buffer);
    public static implicit operator OpHitObjectGetRayTMaxNV(Instruction instruction) => new OpHitObjectGetRayTMaxNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetRayTMaxNV(RefInstruction instruction) => new OpHitObjectGetRayTMaxNV(instruction);
}

public ref struct OpHitObjectGetRayTMinNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectGetRayTMinNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectGetRayTMinNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectGetRayTMinNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectGetRayTMinNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectGetRayTMinNV(Span<int> buffer) => new OpHitObjectGetRayTMinNV(buffer);
    public static implicit operator OpHitObjectGetRayTMinNV(Instruction instruction) => new OpHitObjectGetRayTMinNV(instruction.AsRef());
    public static implicit operator OpHitObjectGetRayTMinNV(RefInstruction instruction) => new OpHitObjectGetRayTMinNV(instruction);
}

public ref struct OpHitObjectIsEmptyNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectIsEmptyNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectIsEmptyNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectIsEmptyNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectIsEmptyNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectIsEmptyNV(Span<int> buffer) => new OpHitObjectIsEmptyNV(buffer);
    public static implicit operator OpHitObjectIsEmptyNV(Instruction instruction) => new OpHitObjectIsEmptyNV(instruction.AsRef());
    public static implicit operator OpHitObjectIsEmptyNV(RefInstruction instruction) => new OpHitObjectIsEmptyNV(instruction);
}

public ref struct OpHitObjectIsHitNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectIsHitNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectIsHitNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectIsHitNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectIsHitNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectIsHitNV(Span<int> buffer) => new OpHitObjectIsHitNV(buffer);
    public static implicit operator OpHitObjectIsHitNV(Instruction instruction) => new OpHitObjectIsHitNV(instruction.AsRef());
    public static implicit operator OpHitObjectIsHitNV(RefInstruction instruction) => new OpHitObjectIsHitNV(instruction);
}

public ref struct OpHitObjectIsMissNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;

    public OpHitObjectIsMissNV(RefInstruction instruction) => Inner = instruction;
    public OpHitObjectIsMissNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpHitObjectIsMissNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpHitObjectIsMissNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpHitObjectIsMissNV(Span<int> buffer) => new OpHitObjectIsMissNV(buffer);
    public static implicit operator OpHitObjectIsMissNV(Instruction instruction) => new OpHitObjectIsMissNV(instruction.AsRef());
    public static implicit operator OpHitObjectIsMissNV(RefInstruction instruction) => new OpHitObjectIsMissNV(instruction);
}

public ref struct OpReorderThreadWithHitObjectNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef HitObject => Inner.GetOperand<IdRef>("hitObject") ?? default;
    public IdRef Hint => Inner.GetOperand<IdRef>("hint") ?? default;
    public IdRef Bits => Inner.GetOperand<IdRef>("bits") ?? default;

    public OpReorderThreadWithHitObjectNV(RefInstruction instruction) => Inner = instruction;
    public OpReorderThreadWithHitObjectNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReorderThreadWithHitObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReorderThreadWithHitObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReorderThreadWithHitObjectNV(Span<int> buffer) => new OpReorderThreadWithHitObjectNV(buffer);
    public static implicit operator OpReorderThreadWithHitObjectNV(Instruction instruction) => new OpReorderThreadWithHitObjectNV(instruction.AsRef());
    public static implicit operator OpReorderThreadWithHitObjectNV(RefInstruction instruction) => new OpReorderThreadWithHitObjectNV(instruction);
}

public ref struct OpReorderThreadWithHintNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Hint => Inner.GetOperand<IdRef>("hint") ?? default;
    public IdRef Bits => Inner.GetOperand<IdRef>("bits") ?? default;

    public OpReorderThreadWithHintNV(RefInstruction instruction) => Inner = instruction;
    public OpReorderThreadWithHintNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReorderThreadWithHintNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReorderThreadWithHintNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReorderThreadWithHintNV(Span<int> buffer) => new OpReorderThreadWithHintNV(buffer);
    public static implicit operator OpReorderThreadWithHintNV(Instruction instruction) => new OpReorderThreadWithHintNV(instruction.AsRef());
    public static implicit operator OpReorderThreadWithHintNV(RefInstruction instruction) => new OpReorderThreadWithHintNV(instruction);
}

public ref struct OpTypeHitObjectNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeHitObjectNV(RefInstruction instruction) => Inner = instruction;
    public OpTypeHitObjectNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeHitObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeHitObjectNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeHitObjectNV(Span<int> buffer) => new OpTypeHitObjectNV(buffer);
    public static implicit operator OpTypeHitObjectNV(Instruction instruction) => new OpTypeHitObjectNV(instruction.AsRef());
    public static implicit operator OpTypeHitObjectNV(RefInstruction instruction) => new OpTypeHitObjectNV(instruction);
}

public ref struct OpImageSampleFootprintNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SampledImage => Inner.GetOperand<IdRef>("sampledImage") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Granularity => Inner.GetOperand<IdRef>("granularity") ?? default;
    public IdRef Coarse => Inner.GetOperand<IdRef>("coarse") ?? default;
    public ImageOperandsMask ImageOperands => Inner.GetEnumOperand<ImageOperandsMask>("imageoperands");

    public OpImageSampleFootprintNV(RefInstruction instruction) => Inner = instruction;
    public OpImageSampleFootprintNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpImageSampleFootprintNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpImageSampleFootprintNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpImageSampleFootprintNV(Span<int> buffer) => new OpImageSampleFootprintNV(buffer);
    public static implicit operator OpImageSampleFootprintNV(Instruction instruction) => new OpImageSampleFootprintNV(instruction.AsRef());
    public static implicit operator OpImageSampleFootprintNV(RefInstruction instruction) => new OpImageSampleFootprintNV(instruction);
}

public ref struct OpCooperativeMatrixConvertNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;

    public OpCooperativeMatrixConvertNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixConvertNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixConvertNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixConvertNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixConvertNV(Span<int> buffer) => new OpCooperativeMatrixConvertNV(buffer);
    public static implicit operator OpCooperativeMatrixConvertNV(Instruction instruction) => new OpCooperativeMatrixConvertNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixConvertNV(RefInstruction instruction) => new OpCooperativeMatrixConvertNV(instruction);
}

public ref struct OpEmitMeshTasksEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef GroupCountX => Inner.GetOperand<IdRef>("groupCountX") ?? default;
    public IdRef GroupCountY => Inner.GetOperand<IdRef>("groupCountY") ?? default;
    public IdRef GroupCountZ => Inner.GetOperand<IdRef>("groupCountZ") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpEmitMeshTasksEXT(RefInstruction instruction) => Inner = instruction;
    public OpEmitMeshTasksEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEmitMeshTasksEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEmitMeshTasksEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEmitMeshTasksEXT(Span<int> buffer) => new OpEmitMeshTasksEXT(buffer);
    public static implicit operator OpEmitMeshTasksEXT(Instruction instruction) => new OpEmitMeshTasksEXT(instruction.AsRef());
    public static implicit operator OpEmitMeshTasksEXT(RefInstruction instruction) => new OpEmitMeshTasksEXT(instruction);
}

public ref struct OpSetMeshOutputsEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef VertexCount => Inner.GetOperand<IdRef>("vertexCount") ?? default;
    public IdRef PrimitiveCount => Inner.GetOperand<IdRef>("primitiveCount") ?? default;

    public OpSetMeshOutputsEXT(RefInstruction instruction) => Inner = instruction;
    public OpSetMeshOutputsEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSetMeshOutputsEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSetMeshOutputsEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSetMeshOutputsEXT(Span<int> buffer) => new OpSetMeshOutputsEXT(buffer);
    public static implicit operator OpSetMeshOutputsEXT(Instruction instruction) => new OpSetMeshOutputsEXT(instruction.AsRef());
    public static implicit operator OpSetMeshOutputsEXT(RefInstruction instruction) => new OpSetMeshOutputsEXT(instruction);
}

public ref struct OpGroupNonUniformPartitionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpGroupNonUniformPartitionNV(RefInstruction instruction) => Inner = instruction;
    public OpGroupNonUniformPartitionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupNonUniformPartitionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupNonUniformPartitionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupNonUniformPartitionNV(Span<int> buffer) => new OpGroupNonUniformPartitionNV(buffer);
    public static implicit operator OpGroupNonUniformPartitionNV(Instruction instruction) => new OpGroupNonUniformPartitionNV(instruction.AsRef());
    public static implicit operator OpGroupNonUniformPartitionNV(RefInstruction instruction) => new OpGroupNonUniformPartitionNV(instruction);
}

public ref struct OpWritePackedPrimitiveIndices4x8NV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef IndexOffset => Inner.GetOperand<IdRef>("indexOffset") ?? default;
    public IdRef PackedIndices => Inner.GetOperand<IdRef>("packedIndices") ?? default;

    public OpWritePackedPrimitiveIndices4x8NV(RefInstruction instruction) => Inner = instruction;
    public OpWritePackedPrimitiveIndices4x8NV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpWritePackedPrimitiveIndices4x8NV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpWritePackedPrimitiveIndices4x8NV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpWritePackedPrimitiveIndices4x8NV(Span<int> buffer) => new OpWritePackedPrimitiveIndices4x8NV(buffer);
    public static implicit operator OpWritePackedPrimitiveIndices4x8NV(Instruction instruction) => new OpWritePackedPrimitiveIndices4x8NV(instruction.AsRef());
    public static implicit operator OpWritePackedPrimitiveIndices4x8NV(RefInstruction instruction) => new OpWritePackedPrimitiveIndices4x8NV(instruction);
}

public ref struct OpFetchMicroTriangleVertexPositionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef PrimitiveIndex => Inner.GetOperand<IdRef>("primitiveIndex") ?? default;
    public IdRef Barycentric => Inner.GetOperand<IdRef>("barycentric") ?? default;

    public OpFetchMicroTriangleVertexPositionNV(RefInstruction instruction) => Inner = instruction;
    public OpFetchMicroTriangleVertexPositionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFetchMicroTriangleVertexPositionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFetchMicroTriangleVertexPositionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFetchMicroTriangleVertexPositionNV(Span<int> buffer) => new OpFetchMicroTriangleVertexPositionNV(buffer);
    public static implicit operator OpFetchMicroTriangleVertexPositionNV(Instruction instruction) => new OpFetchMicroTriangleVertexPositionNV(instruction.AsRef());
    public static implicit operator OpFetchMicroTriangleVertexPositionNV(RefInstruction instruction) => new OpFetchMicroTriangleVertexPositionNV(instruction);
}

public ref struct OpFetchMicroTriangleVertexBarycentricNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef InstanceId => Inner.GetOperand<IdRef>("instanceId") ?? default;
    public IdRef GeometryIndex => Inner.GetOperand<IdRef>("geometryIndex") ?? default;
    public IdRef PrimitiveIndex => Inner.GetOperand<IdRef>("primitiveIndex") ?? default;
    public IdRef Barycentric => Inner.GetOperand<IdRef>("barycentric") ?? default;

    public OpFetchMicroTriangleVertexBarycentricNV(RefInstruction instruction) => Inner = instruction;
    public OpFetchMicroTriangleVertexBarycentricNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFetchMicroTriangleVertexBarycentricNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFetchMicroTriangleVertexBarycentricNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFetchMicroTriangleVertexBarycentricNV(Span<int> buffer) => new OpFetchMicroTriangleVertexBarycentricNV(buffer);
    public static implicit operator OpFetchMicroTriangleVertexBarycentricNV(Instruction instruction) => new OpFetchMicroTriangleVertexBarycentricNV(instruction.AsRef());
    public static implicit operator OpFetchMicroTriangleVertexBarycentricNV(RefInstruction instruction) => new OpFetchMicroTriangleVertexBarycentricNV(instruction);
}

public ref struct OpReportIntersectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Hit => Inner.GetOperand<IdRef>("hit") ?? default;
    public IdRef HitKind => Inner.GetOperand<IdRef>("hitKind") ?? default;

    public OpReportIntersectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpReportIntersectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReportIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReportIntersectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReportIntersectionKHR(Span<int> buffer) => new OpReportIntersectionKHR(buffer);
    public static implicit operator OpReportIntersectionKHR(Instruction instruction) => new OpReportIntersectionKHR(instruction.AsRef());
    public static implicit operator OpReportIntersectionKHR(RefInstruction instruction) => new OpReportIntersectionKHR(instruction);
}

public ref struct OpIgnoreIntersectionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpIgnoreIntersectionNV(RefInstruction instruction) => Inner = instruction;
    public OpIgnoreIntersectionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIgnoreIntersectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIgnoreIntersectionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIgnoreIntersectionNV(Span<int> buffer) => new OpIgnoreIntersectionNV(buffer);
    public static implicit operator OpIgnoreIntersectionNV(Instruction instruction) => new OpIgnoreIntersectionNV(instruction.AsRef());
    public static implicit operator OpIgnoreIntersectionNV(RefInstruction instruction) => new OpIgnoreIntersectionNV(instruction);
}

public ref struct OpTerminateRayNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpTerminateRayNV(RefInstruction instruction) => Inner = instruction;
    public OpTerminateRayNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTerminateRayNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTerminateRayNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTerminateRayNV(Span<int> buffer) => new OpTerminateRayNV(buffer);
    public static implicit operator OpTerminateRayNV(Instruction instruction) => new OpTerminateRayNV(instruction.AsRef());
    public static implicit operator OpTerminateRayNV(RefInstruction instruction) => new OpTerminateRayNV(instruction);
}

public ref struct OpTraceNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef CullMask => Inner.GetOperand<IdRef>("cullMask") ?? default;
    public IdRef SBTOffset => Inner.GetOperand<IdRef>("sBTOffset") ?? default;
    public IdRef SBTStride => Inner.GetOperand<IdRef>("sBTStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef RayOrigin => Inner.GetOperand<IdRef>("rayOrigin") ?? default;
    public IdRef RayTmin => Inner.GetOperand<IdRef>("rayTmin") ?? default;
    public IdRef RayDirection => Inner.GetOperand<IdRef>("rayDirection") ?? default;
    public IdRef RayTmax => Inner.GetOperand<IdRef>("rayTmax") ?? default;
    public IdRef PayloadId => Inner.GetOperand<IdRef>("payloadId") ?? default;

    public OpTraceNV(RefInstruction instruction) => Inner = instruction;
    public OpTraceNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTraceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTraceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTraceNV(Span<int> buffer) => new OpTraceNV(buffer);
    public static implicit operator OpTraceNV(Instruction instruction) => new OpTraceNV(instruction.AsRef());
    public static implicit operator OpTraceNV(RefInstruction instruction) => new OpTraceNV(instruction);
}

public ref struct OpTraceMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef CullMask => Inner.GetOperand<IdRef>("cullMask") ?? default;
    public IdRef SBTOffset => Inner.GetOperand<IdRef>("sBTOffset") ?? default;
    public IdRef SBTStride => Inner.GetOperand<IdRef>("sBTStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef RayOrigin => Inner.GetOperand<IdRef>("rayOrigin") ?? default;
    public IdRef RayTmin => Inner.GetOperand<IdRef>("rayTmin") ?? default;
    public IdRef RayDirection => Inner.GetOperand<IdRef>("rayDirection") ?? default;
    public IdRef RayTmax => Inner.GetOperand<IdRef>("rayTmax") ?? default;
    public IdRef Time => Inner.GetOperand<IdRef>("time") ?? default;
    public IdRef PayloadId => Inner.GetOperand<IdRef>("payloadId") ?? default;

    public OpTraceMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpTraceMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTraceMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTraceMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTraceMotionNV(Span<int> buffer) => new OpTraceMotionNV(buffer);
    public static implicit operator OpTraceMotionNV(Instruction instruction) => new OpTraceMotionNV(instruction.AsRef());
    public static implicit operator OpTraceMotionNV(RefInstruction instruction) => new OpTraceMotionNV(instruction);
}

public ref struct OpTraceRayMotionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Accel => Inner.GetOperand<IdRef>("accel") ?? default;
    public IdRef RayFlags => Inner.GetOperand<IdRef>("rayFlags") ?? default;
    public IdRef CullMask => Inner.GetOperand<IdRef>("cullMask") ?? default;
    public IdRef SBTOffset => Inner.GetOperand<IdRef>("sBTOffset") ?? default;
    public IdRef SBTStride => Inner.GetOperand<IdRef>("sBTStride") ?? default;
    public IdRef MissIndex => Inner.GetOperand<IdRef>("missIndex") ?? default;
    public IdRef RayOrigin => Inner.GetOperand<IdRef>("rayOrigin") ?? default;
    public IdRef RayTmin => Inner.GetOperand<IdRef>("rayTmin") ?? default;
    public IdRef RayDirection => Inner.GetOperand<IdRef>("rayDirection") ?? default;
    public IdRef RayTmax => Inner.GetOperand<IdRef>("rayTmax") ?? default;
    public IdRef Time => Inner.GetOperand<IdRef>("time") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpTraceRayMotionNV(RefInstruction instruction) => Inner = instruction;
    public OpTraceRayMotionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTraceRayMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTraceRayMotionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTraceRayMotionNV(Span<int> buffer) => new OpTraceRayMotionNV(buffer);
    public static implicit operator OpTraceRayMotionNV(Instruction instruction) => new OpTraceRayMotionNV(instruction.AsRef());
    public static implicit operator OpTraceRayMotionNV(RefInstruction instruction) => new OpTraceRayMotionNV(instruction);
}

public ref struct OpRayQueryGetIntersectionTriangleVertexPositionsKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionTriangleVertexPositionsKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionTriangleVertexPositionsKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionTriangleVertexPositionsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionTriangleVertexPositionsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionTriangleVertexPositionsKHR(Span<int> buffer) => new OpRayQueryGetIntersectionTriangleVertexPositionsKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionTriangleVertexPositionsKHR(Instruction instruction) => new OpRayQueryGetIntersectionTriangleVertexPositionsKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionTriangleVertexPositionsKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionTriangleVertexPositionsKHR(instruction);
}

public ref struct OpTypeAccelerationStructureKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAccelerationStructureKHR(RefInstruction instruction) => Inner = instruction;
    public OpTypeAccelerationStructureKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAccelerationStructureKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAccelerationStructureKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAccelerationStructureKHR(Span<int> buffer) => new OpTypeAccelerationStructureKHR(buffer);
    public static implicit operator OpTypeAccelerationStructureKHR(Instruction instruction) => new OpTypeAccelerationStructureKHR(instruction.AsRef());
    public static implicit operator OpTypeAccelerationStructureKHR(RefInstruction instruction) => new OpTypeAccelerationStructureKHR(instruction);
}

public ref struct OpExecuteCallableNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef SBTIndex => Inner.GetOperand<IdRef>("sBTIndex") ?? default;
    public IdRef CallableDataId => Inner.GetOperand<IdRef>("callableDataId") ?? default;

    public OpExecuteCallableNV(RefInstruction instruction) => Inner = instruction;
    public OpExecuteCallableNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExecuteCallableNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExecuteCallableNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExecuteCallableNV(Span<int> buffer) => new OpExecuteCallableNV(buffer);
    public static implicit operator OpExecuteCallableNV(Instruction instruction) => new OpExecuteCallableNV(instruction.AsRef());
    public static implicit operator OpExecuteCallableNV(RefInstruction instruction) => new OpExecuteCallableNV(instruction);
}

public ref struct OpTypeCooperativeMatrixNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ComponentType => Inner.GetOperand<IdRef>("componentType") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdRef Rows => Inner.GetOperand<IdRef>("rows") ?? default;
    public IdRef Columns => Inner.GetOperand<IdRef>("columns") ?? default;

    public OpTypeCooperativeMatrixNV(RefInstruction instruction) => Inner = instruction;
    public OpTypeCooperativeMatrixNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeCooperativeMatrixNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeCooperativeMatrixNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeCooperativeMatrixNV(Span<int> buffer) => new OpTypeCooperativeMatrixNV(buffer);
    public static implicit operator OpTypeCooperativeMatrixNV(Instruction instruction) => new OpTypeCooperativeMatrixNV(instruction.AsRef());
    public static implicit operator OpTypeCooperativeMatrixNV(RefInstruction instruction) => new OpTypeCooperativeMatrixNV(instruction);
}

public ref struct OpCooperativeMatrixLoadNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;
    public IdRef ColumnMajor => Inner.GetOperand<IdRef>("columnMajor") ?? default;
    public MemoryAccessMask MemoryAccess => Inner.GetEnumOperand<MemoryAccessMask>("memoryaccess");

    public OpCooperativeMatrixLoadNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixLoadNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixLoadNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixLoadNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixLoadNV(Span<int> buffer) => new OpCooperativeMatrixLoadNV(buffer);
    public static implicit operator OpCooperativeMatrixLoadNV(Instruction instruction) => new OpCooperativeMatrixLoadNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixLoadNV(RefInstruction instruction) => new OpCooperativeMatrixLoadNV(instruction);
}

public ref struct OpCooperativeMatrixStoreNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;
    public IdRef ColumnMajor => Inner.GetOperand<IdRef>("columnMajor") ?? default;
    public MemoryAccessMask MemoryAccess => Inner.GetEnumOperand<MemoryAccessMask>("memoryaccess");

    public OpCooperativeMatrixStoreNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixStoreNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixStoreNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixStoreNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixStoreNV(Span<int> buffer) => new OpCooperativeMatrixStoreNV(buffer);
    public static implicit operator OpCooperativeMatrixStoreNV(Instruction instruction) => new OpCooperativeMatrixStoreNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixStoreNV(RefInstruction instruction) => new OpCooperativeMatrixStoreNV(instruction);
}

public ref struct OpCooperativeMatrixMulAddNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public IdRef C => Inner.GetOperand<IdRef>("c") ?? default;

    public OpCooperativeMatrixMulAddNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixMulAddNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixMulAddNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixMulAddNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixMulAddNV(Span<int> buffer) => new OpCooperativeMatrixMulAddNV(buffer);
    public static implicit operator OpCooperativeMatrixMulAddNV(Instruction instruction) => new OpCooperativeMatrixMulAddNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixMulAddNV(RefInstruction instruction) => new OpCooperativeMatrixMulAddNV(instruction);
}

public ref struct OpCooperativeMatrixLengthNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Type => Inner.GetOperand<IdRef>("type") ?? default;

    public OpCooperativeMatrixLengthNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixLengthNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixLengthNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixLengthNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixLengthNV(Span<int> buffer) => new OpCooperativeMatrixLengthNV(buffer);
    public static implicit operator OpCooperativeMatrixLengthNV(Instruction instruction) => new OpCooperativeMatrixLengthNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixLengthNV(RefInstruction instruction) => new OpCooperativeMatrixLengthNV(instruction);
}

public ref struct OpBeginInvocationInterlockEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpBeginInvocationInterlockEXT(RefInstruction instruction) => Inner = instruction;
    public OpBeginInvocationInterlockEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpBeginInvocationInterlockEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpBeginInvocationInterlockEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpBeginInvocationInterlockEXT(Span<int> buffer) => new OpBeginInvocationInterlockEXT(buffer);
    public static implicit operator OpBeginInvocationInterlockEXT(Instruction instruction) => new OpBeginInvocationInterlockEXT(instruction.AsRef());
    public static implicit operator OpBeginInvocationInterlockEXT(RefInstruction instruction) => new OpBeginInvocationInterlockEXT(instruction);
}

public ref struct OpEndInvocationInterlockEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpEndInvocationInterlockEXT(RefInstruction instruction) => Inner = instruction;
    public OpEndInvocationInterlockEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpEndInvocationInterlockEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpEndInvocationInterlockEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpEndInvocationInterlockEXT(Span<int> buffer) => new OpEndInvocationInterlockEXT(buffer);
    public static implicit operator OpEndInvocationInterlockEXT(Instruction instruction) => new OpEndInvocationInterlockEXT(instruction.AsRef());
    public static implicit operator OpEndInvocationInterlockEXT(RefInstruction instruction) => new OpEndInvocationInterlockEXT(instruction);
}

public ref struct OpCooperativeMatrixReduceNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;
    public CooperativeMatrixReduceMask Reduce => Inner.GetEnumOperand<CooperativeMatrixReduceMask>("reduce");
    public IdRef CombineFunc => Inner.GetOperand<IdRef>("combineFunc") ?? default;

    public OpCooperativeMatrixReduceNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixReduceNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixReduceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixReduceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixReduceNV(Span<int> buffer) => new OpCooperativeMatrixReduceNV(buffer);
    public static implicit operator OpCooperativeMatrixReduceNV(Instruction instruction) => new OpCooperativeMatrixReduceNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixReduceNV(RefInstruction instruction) => new OpCooperativeMatrixReduceNV(instruction);
}

public ref struct OpCooperativeMatrixLoadTensorNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public MemoryAccessMask MemoryOperand => Inner.GetEnumOperand<MemoryAccessMask>("memoryOperand");
    public TensorAddressingOperandsMask TensorAddressingOperands => Inner.GetEnumOperand<TensorAddressingOperandsMask>("tensorAddressingOperands");

    public OpCooperativeMatrixLoadTensorNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixLoadTensorNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixLoadTensorNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixLoadTensorNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixLoadTensorNV(Span<int> buffer) => new OpCooperativeMatrixLoadTensorNV(buffer);
    public static implicit operator OpCooperativeMatrixLoadTensorNV(Instruction instruction) => new OpCooperativeMatrixLoadTensorNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixLoadTensorNV(RefInstruction instruction) => new OpCooperativeMatrixLoadTensorNV(instruction);
}

public ref struct OpCooperativeMatrixStoreTensorNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdRef Object => Inner.GetOperand<IdRef>("objectId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public MemoryAccessMask MemoryOperand => Inner.GetEnumOperand<MemoryAccessMask>("memoryOperand");
    public TensorAddressingOperandsMask TensorAddressingOperands => Inner.GetEnumOperand<TensorAddressingOperandsMask>("tensorAddressingOperands");

    public OpCooperativeMatrixStoreTensorNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixStoreTensorNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixStoreTensorNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixStoreTensorNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixStoreTensorNV(Span<int> buffer) => new OpCooperativeMatrixStoreTensorNV(buffer);
    public static implicit operator OpCooperativeMatrixStoreTensorNV(Instruction instruction) => new OpCooperativeMatrixStoreTensorNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixStoreTensorNV(RefInstruction instruction) => new OpCooperativeMatrixStoreTensorNV(instruction);
}

public ref struct OpCooperativeMatrixPerElementOpNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;
    public IdRef Func => Inner.GetOperand<IdRef>("func") ?? default;
    public IdRef Operands => Inner.GetOperand<IdRef>("operands") ?? default;

    public OpCooperativeMatrixPerElementOpNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixPerElementOpNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixPerElementOpNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixPerElementOpNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixPerElementOpNV(Span<int> buffer) => new OpCooperativeMatrixPerElementOpNV(buffer);
    public static implicit operator OpCooperativeMatrixPerElementOpNV(Instruction instruction) => new OpCooperativeMatrixPerElementOpNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixPerElementOpNV(RefInstruction instruction) => new OpCooperativeMatrixPerElementOpNV(instruction);
}

public ref struct OpTypeTensorLayoutNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Dim => Inner.GetOperand<IdRef>("dim") ?? default;
    public IdRef ClampMode => Inner.GetOperand<IdRef>("clampMode") ?? default;

    public OpTypeTensorLayoutNV(RefInstruction instruction) => Inner = instruction;
    public OpTypeTensorLayoutNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeTensorLayoutNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeTensorLayoutNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeTensorLayoutNV(Span<int> buffer) => new OpTypeTensorLayoutNV(buffer);
    public static implicit operator OpTypeTensorLayoutNV(Instruction instruction) => new OpTypeTensorLayoutNV(instruction.AsRef());
    public static implicit operator OpTypeTensorLayoutNV(RefInstruction instruction) => new OpTypeTensorLayoutNV(instruction);
}

public ref struct OpTypeTensorViewNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Dim => Inner.GetOperand<IdRef>("dim") ?? default;
    public IdRef HasDimensions => Inner.GetOperand<IdRef>("hasDimensions") ?? default;
    public IdRef P => Inner.GetOperand<IdRef>("p") ?? default;

    public OpTypeTensorViewNV(RefInstruction instruction) => Inner = instruction;
    public OpTypeTensorViewNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeTensorViewNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeTensorViewNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeTensorViewNV(Span<int> buffer) => new OpTypeTensorViewNV(buffer);
    public static implicit operator OpTypeTensorViewNV(Instruction instruction) => new OpTypeTensorViewNV(instruction.AsRef());
    public static implicit operator OpTypeTensorViewNV(RefInstruction instruction) => new OpTypeTensorViewNV(instruction);
}

public ref struct OpCreateTensorLayoutNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpCreateTensorLayoutNV(RefInstruction instruction) => Inner = instruction;
    public OpCreateTensorLayoutNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCreateTensorLayoutNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCreateTensorLayoutNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCreateTensorLayoutNV(Span<int> buffer) => new OpCreateTensorLayoutNV(buffer);
    public static implicit operator OpCreateTensorLayoutNV(Instruction instruction) => new OpCreateTensorLayoutNV(instruction.AsRef());
    public static implicit operator OpCreateTensorLayoutNV(RefInstruction instruction) => new OpCreateTensorLayoutNV(instruction);
}

public ref struct OpTensorLayoutSetDimensionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public IdRef Dim => Inner.GetOperand<IdRef>("dim") ?? default;

    public OpTensorLayoutSetDimensionNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorLayoutSetDimensionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorLayoutSetDimensionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorLayoutSetDimensionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorLayoutSetDimensionNV(Span<int> buffer) => new OpTensorLayoutSetDimensionNV(buffer);
    public static implicit operator OpTensorLayoutSetDimensionNV(Instruction instruction) => new OpTensorLayoutSetDimensionNV(instruction.AsRef());
    public static implicit operator OpTensorLayoutSetDimensionNV(RefInstruction instruction) => new OpTensorLayoutSetDimensionNV(instruction);
}

public ref struct OpTensorLayoutSetStrideNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;

    public OpTensorLayoutSetStrideNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorLayoutSetStrideNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorLayoutSetStrideNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorLayoutSetStrideNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorLayoutSetStrideNV(Span<int> buffer) => new OpTensorLayoutSetStrideNV(buffer);
    public static implicit operator OpTensorLayoutSetStrideNV(Instruction instruction) => new OpTensorLayoutSetStrideNV(instruction.AsRef());
    public static implicit operator OpTensorLayoutSetStrideNV(RefInstruction instruction) => new OpTensorLayoutSetStrideNV(instruction);
}

public ref struct OpTensorLayoutSliceNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public IdRef Operands => Inner.GetOperand<IdRef>("operands") ?? default;

    public OpTensorLayoutSliceNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorLayoutSliceNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorLayoutSliceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorLayoutSliceNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorLayoutSliceNV(Span<int> buffer) => new OpTensorLayoutSliceNV(buffer);
    public static implicit operator OpTensorLayoutSliceNV(Instruction instruction) => new OpTensorLayoutSliceNV(instruction.AsRef());
    public static implicit operator OpTensorLayoutSliceNV(RefInstruction instruction) => new OpTensorLayoutSliceNV(instruction);
}

public ref struct OpTensorLayoutSetClampValueNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpTensorLayoutSetClampValueNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorLayoutSetClampValueNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorLayoutSetClampValueNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorLayoutSetClampValueNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorLayoutSetClampValueNV(Span<int> buffer) => new OpTensorLayoutSetClampValueNV(buffer);
    public static implicit operator OpTensorLayoutSetClampValueNV(Instruction instruction) => new OpTensorLayoutSetClampValueNV(instruction.AsRef());
    public static implicit operator OpTensorLayoutSetClampValueNV(RefInstruction instruction) => new OpTensorLayoutSetClampValueNV(instruction);
}

public ref struct OpCreateTensorViewNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpCreateTensorViewNV(RefInstruction instruction) => Inner = instruction;
    public OpCreateTensorViewNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCreateTensorViewNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCreateTensorViewNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCreateTensorViewNV(Span<int> buffer) => new OpCreateTensorViewNV(buffer);
    public static implicit operator OpCreateTensorViewNV(Instruction instruction) => new OpCreateTensorViewNV(instruction.AsRef());
    public static implicit operator OpCreateTensorViewNV(RefInstruction instruction) => new OpCreateTensorViewNV(instruction);
}

public ref struct OpTensorViewSetDimensionNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorView => Inner.GetOperand<IdRef>("tensorView") ?? default;
    public IdRef Dim => Inner.GetOperand<IdRef>("dim") ?? default;

    public OpTensorViewSetDimensionNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorViewSetDimensionNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorViewSetDimensionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorViewSetDimensionNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorViewSetDimensionNV(Span<int> buffer) => new OpTensorViewSetDimensionNV(buffer);
    public static implicit operator OpTensorViewSetDimensionNV(Instruction instruction) => new OpTensorViewSetDimensionNV(instruction.AsRef());
    public static implicit operator OpTensorViewSetDimensionNV(RefInstruction instruction) => new OpTensorViewSetDimensionNV(instruction);
}

public ref struct OpTensorViewSetStrideNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorView => Inner.GetOperand<IdRef>("tensorView") ?? default;
    public IdRef Stride => Inner.GetOperand<IdRef>("stride") ?? default;

    public OpTensorViewSetStrideNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorViewSetStrideNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorViewSetStrideNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorViewSetStrideNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorViewSetStrideNV(Span<int> buffer) => new OpTensorViewSetStrideNV(buffer);
    public static implicit operator OpTensorViewSetStrideNV(Instruction instruction) => new OpTensorViewSetStrideNV(instruction.AsRef());
    public static implicit operator OpTensorViewSetStrideNV(RefInstruction instruction) => new OpTensorViewSetStrideNV(instruction);
}

public ref struct OpDemoteToHelperInvocation : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;

    public OpDemoteToHelperInvocation(RefInstruction instruction) => Inner = instruction;
    public OpDemoteToHelperInvocation(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDemoteToHelperInvocation instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDemoteToHelperInvocation instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDemoteToHelperInvocation(Span<int> buffer) => new OpDemoteToHelperInvocation(buffer);
    public static implicit operator OpDemoteToHelperInvocation(Instruction instruction) => new OpDemoteToHelperInvocation(instruction.AsRef());
    public static implicit operator OpDemoteToHelperInvocation(RefInstruction instruction) => new OpDemoteToHelperInvocation(instruction);
}

public ref struct OpIsHelperInvocationEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpIsHelperInvocationEXT(RefInstruction instruction) => Inner = instruction;
    public OpIsHelperInvocationEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIsHelperInvocationEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIsHelperInvocationEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIsHelperInvocationEXT(Span<int> buffer) => new OpIsHelperInvocationEXT(buffer);
    public static implicit operator OpIsHelperInvocationEXT(Instruction instruction) => new OpIsHelperInvocationEXT(instruction.AsRef());
    public static implicit operator OpIsHelperInvocationEXT(RefInstruction instruction) => new OpIsHelperInvocationEXT(instruction);
}

public ref struct OpTensorViewSetClipNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorView => Inner.GetOperand<IdRef>("tensorView") ?? default;
    public IdRef ClipRowOffset => Inner.GetOperand<IdRef>("clipRowOffset") ?? default;
    public IdRef ClipRowSpan => Inner.GetOperand<IdRef>("clipRowSpan") ?? default;
    public IdRef ClipColOffset => Inner.GetOperand<IdRef>("clipColOffset") ?? default;
    public IdRef ClipColSpan => Inner.GetOperand<IdRef>("clipColSpan") ?? default;

    public OpTensorViewSetClipNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorViewSetClipNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorViewSetClipNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorViewSetClipNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorViewSetClipNV(Span<int> buffer) => new OpTensorViewSetClipNV(buffer);
    public static implicit operator OpTensorViewSetClipNV(Instruction instruction) => new OpTensorViewSetClipNV(instruction.AsRef());
    public static implicit operator OpTensorViewSetClipNV(RefInstruction instruction) => new OpTensorViewSetClipNV(instruction);
}

public ref struct OpTensorLayoutSetBlockSizeNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef TensorLayout => Inner.GetOperand<IdRef>("tensorLayout") ?? default;
    public IdRef BlockSize => Inner.GetOperand<IdRef>("blockSize") ?? default;

    public OpTensorLayoutSetBlockSizeNV(RefInstruction instruction) => Inner = instruction;
    public OpTensorLayoutSetBlockSizeNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTensorLayoutSetBlockSizeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTensorLayoutSetBlockSizeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTensorLayoutSetBlockSizeNV(Span<int> buffer) => new OpTensorLayoutSetBlockSizeNV(buffer);
    public static implicit operator OpTensorLayoutSetBlockSizeNV(Instruction instruction) => new OpTensorLayoutSetBlockSizeNV(instruction.AsRef());
    public static implicit operator OpTensorLayoutSetBlockSizeNV(RefInstruction instruction) => new OpTensorLayoutSetBlockSizeNV(instruction);
}

public ref struct OpCooperativeMatrixTransposeNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Matrix => Inner.GetOperand<IdRef>("matrix") ?? default;

    public OpCooperativeMatrixTransposeNV(RefInstruction instruction) => Inner = instruction;
    public OpCooperativeMatrixTransposeNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCooperativeMatrixTransposeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCooperativeMatrixTransposeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCooperativeMatrixTransposeNV(Span<int> buffer) => new OpCooperativeMatrixTransposeNV(buffer);
    public static implicit operator OpCooperativeMatrixTransposeNV(Instruction instruction) => new OpCooperativeMatrixTransposeNV(instruction.AsRef());
    public static implicit operator OpCooperativeMatrixTransposeNV(RefInstruction instruction) => new OpCooperativeMatrixTransposeNV(instruction);
}

public ref struct OpConvertUToImageNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertUToImageNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToImageNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToImageNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToImageNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToImageNV(Span<int> buffer) => new OpConvertUToImageNV(buffer);
    public static implicit operator OpConvertUToImageNV(Instruction instruction) => new OpConvertUToImageNV(instruction.AsRef());
    public static implicit operator OpConvertUToImageNV(RefInstruction instruction) => new OpConvertUToImageNV(instruction);
}

public ref struct OpConvertUToSamplerNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertUToSamplerNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToSamplerNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToSamplerNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToSamplerNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToSamplerNV(Span<int> buffer) => new OpConvertUToSamplerNV(buffer);
    public static implicit operator OpConvertUToSamplerNV(Instruction instruction) => new OpConvertUToSamplerNV(instruction.AsRef());
    public static implicit operator OpConvertUToSamplerNV(RefInstruction instruction) => new OpConvertUToSamplerNV(instruction);
}

public ref struct OpConvertImageToUNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertImageToUNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertImageToUNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertImageToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertImageToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertImageToUNV(Span<int> buffer) => new OpConvertImageToUNV(buffer);
    public static implicit operator OpConvertImageToUNV(Instruction instruction) => new OpConvertImageToUNV(instruction.AsRef());
    public static implicit operator OpConvertImageToUNV(RefInstruction instruction) => new OpConvertImageToUNV(instruction);
}

public ref struct OpConvertSamplerToUNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertSamplerToUNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertSamplerToUNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertSamplerToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertSamplerToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertSamplerToUNV(Span<int> buffer) => new OpConvertSamplerToUNV(buffer);
    public static implicit operator OpConvertSamplerToUNV(Instruction instruction) => new OpConvertSamplerToUNV(instruction.AsRef());
    public static implicit operator OpConvertSamplerToUNV(RefInstruction instruction) => new OpConvertSamplerToUNV(instruction);
}

public ref struct OpConvertUToSampledImageNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertUToSampledImageNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertUToSampledImageNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertUToSampledImageNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertUToSampledImageNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertUToSampledImageNV(Span<int> buffer) => new OpConvertUToSampledImageNV(buffer);
    public static implicit operator OpConvertUToSampledImageNV(Instruction instruction) => new OpConvertUToSampledImageNV(instruction.AsRef());
    public static implicit operator OpConvertUToSampledImageNV(RefInstruction instruction) => new OpConvertUToSampledImageNV(instruction);
}

public ref struct OpConvertSampledImageToUNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpConvertSampledImageToUNV(RefInstruction instruction) => Inner = instruction;
    public OpConvertSampledImageToUNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertSampledImageToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertSampledImageToUNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertSampledImageToUNV(Span<int> buffer) => new OpConvertSampledImageToUNV(buffer);
    public static implicit operator OpConvertSampledImageToUNV(Instruction instruction) => new OpConvertSampledImageToUNV(instruction.AsRef());
    public static implicit operator OpConvertSampledImageToUNV(RefInstruction instruction) => new OpConvertSampledImageToUNV(instruction);
}

public ref struct OpSamplerImageAddressingModeNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralInteger BitWidth => Inner.GetOperand<LiteralInteger>("bitWidth") ?? default;

    public OpSamplerImageAddressingModeNV(RefInstruction instruction) => Inner = instruction;
    public OpSamplerImageAddressingModeNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSamplerImageAddressingModeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSamplerImageAddressingModeNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSamplerImageAddressingModeNV(Span<int> buffer) => new OpSamplerImageAddressingModeNV(buffer);
    public static implicit operator OpSamplerImageAddressingModeNV(Instruction instruction) => new OpSamplerImageAddressingModeNV(instruction.AsRef());
    public static implicit operator OpSamplerImageAddressingModeNV(RefInstruction instruction) => new OpSamplerImageAddressingModeNV(instruction);
}

public ref struct OpRawAccessChainNV : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Base => Inner.GetOperand<IdRef>("baseId") ?? default;
    public IdRef Bytestride => Inner.GetOperand<IdRef>("bytestride") ?? default;
    public IdRef Elementindex => Inner.GetOperand<IdRef>("elementindex") ?? default;
    public IdRef Byteoffset => Inner.GetOperand<IdRef>("byteoffset") ?? default;
    public RawAccessChainOperandsMask RawAccessChainOperands => Inner.GetEnumOperand<RawAccessChainOperandsMask>("rawaccesschainoperands");

    public OpRawAccessChainNV(RefInstruction instruction) => Inner = instruction;
    public OpRawAccessChainNV(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRawAccessChainNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRawAccessChainNV instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRawAccessChainNV(Span<int> buffer) => new OpRawAccessChainNV(buffer);
    public static implicit operator OpRawAccessChainNV(Instruction instruction) => new OpRawAccessChainNV(instruction.AsRef());
    public static implicit operator OpRawAccessChainNV(RefInstruction instruction) => new OpRawAccessChainNV(instruction);
}

public ref struct OpSubgroupShuffleINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Data => Inner.GetOperand<IdRef>("data") ?? default;
    public IdRef InvocationId => Inner.GetOperand<IdRef>("invocationId") ?? default;

    public OpSubgroupShuffleINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupShuffleINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupShuffleINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupShuffleINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupShuffleINTEL(Span<int> buffer) => new OpSubgroupShuffleINTEL(buffer);
    public static implicit operator OpSubgroupShuffleINTEL(Instruction instruction) => new OpSubgroupShuffleINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupShuffleINTEL(RefInstruction instruction) => new OpSubgroupShuffleINTEL(instruction);
}

public ref struct OpSubgroupShuffleDownINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Current => Inner.GetOperand<IdRef>("current") ?? default;
    public IdRef Next => Inner.GetOperand<IdRef>("next") ?? default;
    public IdRef Delta => Inner.GetOperand<IdRef>("delta") ?? default;

    public OpSubgroupShuffleDownINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupShuffleDownINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupShuffleDownINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupShuffleDownINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupShuffleDownINTEL(Span<int> buffer) => new OpSubgroupShuffleDownINTEL(buffer);
    public static implicit operator OpSubgroupShuffleDownINTEL(Instruction instruction) => new OpSubgroupShuffleDownINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupShuffleDownINTEL(RefInstruction instruction) => new OpSubgroupShuffleDownINTEL(instruction);
}

public ref struct OpSubgroupShuffleUpINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Previous => Inner.GetOperand<IdRef>("previous") ?? default;
    public IdRef Current => Inner.GetOperand<IdRef>("current") ?? default;
    public IdRef Delta => Inner.GetOperand<IdRef>("delta") ?? default;

    public OpSubgroupShuffleUpINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupShuffleUpINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupShuffleUpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupShuffleUpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupShuffleUpINTEL(Span<int> buffer) => new OpSubgroupShuffleUpINTEL(buffer);
    public static implicit operator OpSubgroupShuffleUpINTEL(Instruction instruction) => new OpSubgroupShuffleUpINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupShuffleUpINTEL(RefInstruction instruction) => new OpSubgroupShuffleUpINTEL(instruction);
}

public ref struct OpSubgroupShuffleXorINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Data => Inner.GetOperand<IdRef>("data") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpSubgroupShuffleXorINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupShuffleXorINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupShuffleXorINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupShuffleXorINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupShuffleXorINTEL(Span<int> buffer) => new OpSubgroupShuffleXorINTEL(buffer);
    public static implicit operator OpSubgroupShuffleXorINTEL(Instruction instruction) => new OpSubgroupShuffleXorINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupShuffleXorINTEL(RefInstruction instruction) => new OpSubgroupShuffleXorINTEL(instruction);
}

public ref struct OpSubgroupBlockReadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Ptr => Inner.GetOperand<IdRef>("ptr") ?? default;

    public OpSubgroupBlockReadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupBlockReadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupBlockReadINTEL(Span<int> buffer) => new OpSubgroupBlockReadINTEL(buffer);
    public static implicit operator OpSubgroupBlockReadINTEL(Instruction instruction) => new OpSubgroupBlockReadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupBlockReadINTEL(RefInstruction instruction) => new OpSubgroupBlockReadINTEL(instruction);
}

public ref struct OpSubgroupBlockWriteINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Ptr => Inner.GetOperand<IdRef>("ptr") ?? default;
    public IdRef Data => Inner.GetOperand<IdRef>("data") ?? default;

    public OpSubgroupBlockWriteINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupBlockWriteINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupBlockWriteINTEL(Span<int> buffer) => new OpSubgroupBlockWriteINTEL(buffer);
    public static implicit operator OpSubgroupBlockWriteINTEL(Instruction instruction) => new OpSubgroupBlockWriteINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupBlockWriteINTEL(RefInstruction instruction) => new OpSubgroupBlockWriteINTEL(instruction);
}

public ref struct OpSubgroupImageBlockReadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;

    public OpSubgroupImageBlockReadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupImageBlockReadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupImageBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupImageBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupImageBlockReadINTEL(Span<int> buffer) => new OpSubgroupImageBlockReadINTEL(buffer);
    public static implicit operator OpSubgroupImageBlockReadINTEL(Instruction instruction) => new OpSubgroupImageBlockReadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupImageBlockReadINTEL(RefInstruction instruction) => new OpSubgroupImageBlockReadINTEL(instruction);
}

public ref struct OpSubgroupImageBlockWriteINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Data => Inner.GetOperand<IdRef>("data") ?? default;

    public OpSubgroupImageBlockWriteINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupImageBlockWriteINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupImageBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupImageBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupImageBlockWriteINTEL(Span<int> buffer) => new OpSubgroupImageBlockWriteINTEL(buffer);
    public static implicit operator OpSubgroupImageBlockWriteINTEL(Instruction instruction) => new OpSubgroupImageBlockWriteINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupImageBlockWriteINTEL(RefInstruction instruction) => new OpSubgroupImageBlockWriteINTEL(instruction);
}

public ref struct OpSubgroupImageMediaBlockReadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Width => Inner.GetOperand<IdRef>("width") ?? default;
    public IdRef Height => Inner.GetOperand<IdRef>("height") ?? default;

    public OpSubgroupImageMediaBlockReadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupImageMediaBlockReadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupImageMediaBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupImageMediaBlockReadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupImageMediaBlockReadINTEL(Span<int> buffer) => new OpSubgroupImageMediaBlockReadINTEL(buffer);
    public static implicit operator OpSubgroupImageMediaBlockReadINTEL(Instruction instruction) => new OpSubgroupImageMediaBlockReadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupImageMediaBlockReadINTEL(RefInstruction instruction) => new OpSubgroupImageMediaBlockReadINTEL(instruction);
}

public ref struct OpSubgroupImageMediaBlockWriteINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Image => Inner.GetOperand<IdRef>("image") ?? default;
    public IdRef Coordinate => Inner.GetOperand<IdRef>("coordinate") ?? default;
    public IdRef Width => Inner.GetOperand<IdRef>("width") ?? default;
    public IdRef Height => Inner.GetOperand<IdRef>("height") ?? default;
    public IdRef Data => Inner.GetOperand<IdRef>("data") ?? default;

    public OpSubgroupImageMediaBlockWriteINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupImageMediaBlockWriteINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupImageMediaBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupImageMediaBlockWriteINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupImageMediaBlockWriteINTEL(Span<int> buffer) => new OpSubgroupImageMediaBlockWriteINTEL(buffer);
    public static implicit operator OpSubgroupImageMediaBlockWriteINTEL(Instruction instruction) => new OpSubgroupImageMediaBlockWriteINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupImageMediaBlockWriteINTEL(RefInstruction instruction) => new OpSubgroupImageMediaBlockWriteINTEL(instruction);
}

public ref struct OpUCountLeadingZerosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpUCountLeadingZerosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUCountLeadingZerosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUCountLeadingZerosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUCountLeadingZerosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUCountLeadingZerosINTEL(Span<int> buffer) => new OpUCountLeadingZerosINTEL(buffer);
    public static implicit operator OpUCountLeadingZerosINTEL(Instruction instruction) => new OpUCountLeadingZerosINTEL(instruction.AsRef());
    public static implicit operator OpUCountLeadingZerosINTEL(RefInstruction instruction) => new OpUCountLeadingZerosINTEL(instruction);
}

public ref struct OpUCountTrailingZerosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand => Inner.GetOperand<IdRef>("operand") ?? default;

    public OpUCountTrailingZerosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUCountTrailingZerosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUCountTrailingZerosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUCountTrailingZerosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUCountTrailingZerosINTEL(Span<int> buffer) => new OpUCountTrailingZerosINTEL(buffer);
    public static implicit operator OpUCountTrailingZerosINTEL(Instruction instruction) => new OpUCountTrailingZerosINTEL(instruction.AsRef());
    public static implicit operator OpUCountTrailingZerosINTEL(RefInstruction instruction) => new OpUCountTrailingZerosINTEL(instruction);
}

public ref struct OpAbsISubINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpAbsISubINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAbsISubINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAbsISubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAbsISubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAbsISubINTEL(Span<int> buffer) => new OpAbsISubINTEL(buffer);
    public static implicit operator OpAbsISubINTEL(Instruction instruction) => new OpAbsISubINTEL(instruction.AsRef());
    public static implicit operator OpAbsISubINTEL(RefInstruction instruction) => new OpAbsISubINTEL(instruction);
}

public ref struct OpAbsUSubINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpAbsUSubINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAbsUSubINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAbsUSubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAbsUSubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAbsUSubINTEL(Span<int> buffer) => new OpAbsUSubINTEL(buffer);
    public static implicit operator OpAbsUSubINTEL(Instruction instruction) => new OpAbsUSubINTEL(instruction.AsRef());
    public static implicit operator OpAbsUSubINTEL(RefInstruction instruction) => new OpAbsUSubINTEL(instruction);
}

public ref struct OpIAddSatINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIAddSatINTEL(RefInstruction instruction) => Inner = instruction;
    public OpIAddSatINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIAddSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIAddSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIAddSatINTEL(Span<int> buffer) => new OpIAddSatINTEL(buffer);
    public static implicit operator OpIAddSatINTEL(Instruction instruction) => new OpIAddSatINTEL(instruction.AsRef());
    public static implicit operator OpIAddSatINTEL(RefInstruction instruction) => new OpIAddSatINTEL(instruction);
}

public ref struct OpUAddSatINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUAddSatINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUAddSatINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUAddSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUAddSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUAddSatINTEL(Span<int> buffer) => new OpUAddSatINTEL(buffer);
    public static implicit operator OpUAddSatINTEL(Instruction instruction) => new OpUAddSatINTEL(instruction.AsRef());
    public static implicit operator OpUAddSatINTEL(RefInstruction instruction) => new OpUAddSatINTEL(instruction);
}

public ref struct OpIAverageINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIAverageINTEL(RefInstruction instruction) => Inner = instruction;
    public OpIAverageINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIAverageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIAverageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIAverageINTEL(Span<int> buffer) => new OpIAverageINTEL(buffer);
    public static implicit operator OpIAverageINTEL(Instruction instruction) => new OpIAverageINTEL(instruction.AsRef());
    public static implicit operator OpIAverageINTEL(RefInstruction instruction) => new OpIAverageINTEL(instruction);
}

public ref struct OpUAverageINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUAverageINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUAverageINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUAverageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUAverageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUAverageINTEL(Span<int> buffer) => new OpUAverageINTEL(buffer);
    public static implicit operator OpUAverageINTEL(Instruction instruction) => new OpUAverageINTEL(instruction.AsRef());
    public static implicit operator OpUAverageINTEL(RefInstruction instruction) => new OpUAverageINTEL(instruction);
}

public ref struct OpIAverageRoundedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIAverageRoundedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpIAverageRoundedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIAverageRoundedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIAverageRoundedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIAverageRoundedINTEL(Span<int> buffer) => new OpIAverageRoundedINTEL(buffer);
    public static implicit operator OpIAverageRoundedINTEL(Instruction instruction) => new OpIAverageRoundedINTEL(instruction.AsRef());
    public static implicit operator OpIAverageRoundedINTEL(RefInstruction instruction) => new OpIAverageRoundedINTEL(instruction);
}

public ref struct OpUAverageRoundedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUAverageRoundedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUAverageRoundedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUAverageRoundedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUAverageRoundedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUAverageRoundedINTEL(Span<int> buffer) => new OpUAverageRoundedINTEL(buffer);
    public static implicit operator OpUAverageRoundedINTEL(Instruction instruction) => new OpUAverageRoundedINTEL(instruction.AsRef());
    public static implicit operator OpUAverageRoundedINTEL(RefInstruction instruction) => new OpUAverageRoundedINTEL(instruction);
}

public ref struct OpISubSatINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpISubSatINTEL(RefInstruction instruction) => Inner = instruction;
    public OpISubSatINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpISubSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpISubSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpISubSatINTEL(Span<int> buffer) => new OpISubSatINTEL(buffer);
    public static implicit operator OpISubSatINTEL(Instruction instruction) => new OpISubSatINTEL(instruction.AsRef());
    public static implicit operator OpISubSatINTEL(RefInstruction instruction) => new OpISubSatINTEL(instruction);
}

public ref struct OpUSubSatINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUSubSatINTEL(RefInstruction instruction) => Inner = instruction;
    public OpUSubSatINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUSubSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUSubSatINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUSubSatINTEL(Span<int> buffer) => new OpUSubSatINTEL(buffer);
    public static implicit operator OpUSubSatINTEL(Instruction instruction) => new OpUSubSatINTEL(instruction.AsRef());
    public static implicit operator OpUSubSatINTEL(RefInstruction instruction) => new OpUSubSatINTEL(instruction);
}

public ref struct OpIMul32x16INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpIMul32x16INTEL(RefInstruction instruction) => Inner = instruction;
    public OpIMul32x16INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpIMul32x16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpIMul32x16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpIMul32x16INTEL(Span<int> buffer) => new OpIMul32x16INTEL(buffer);
    public static implicit operator OpIMul32x16INTEL(Instruction instruction) => new OpIMul32x16INTEL(instruction.AsRef());
    public static implicit operator OpIMul32x16INTEL(RefInstruction instruction) => new OpIMul32x16INTEL(instruction);
}

public ref struct OpUMul32x16INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;
    public IdRef Operand2 => Inner.GetOperand<IdRef>("operand2") ?? default;

    public OpUMul32x16INTEL(RefInstruction instruction) => Inner = instruction;
    public OpUMul32x16INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpUMul32x16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpUMul32x16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpUMul32x16INTEL(Span<int> buffer) => new OpUMul32x16INTEL(buffer);
    public static implicit operator OpUMul32x16INTEL(Instruction instruction) => new OpUMul32x16INTEL(instruction.AsRef());
    public static implicit operator OpUMul32x16INTEL(RefInstruction instruction) => new OpUMul32x16INTEL(instruction);
}

public ref struct OpConstantFunctionPointerINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Function => Inner.GetOperand<IdRef>("function") ?? default;

    public OpConstantFunctionPointerINTEL(RefInstruction instruction) => Inner = instruction;
    public OpConstantFunctionPointerINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantFunctionPointerINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantFunctionPointerINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantFunctionPointerINTEL(Span<int> buffer) => new OpConstantFunctionPointerINTEL(buffer);
    public static implicit operator OpConstantFunctionPointerINTEL(Instruction instruction) => new OpConstantFunctionPointerINTEL(instruction.AsRef());
    public static implicit operator OpConstantFunctionPointerINTEL(RefInstruction instruction) => new OpConstantFunctionPointerINTEL(instruction);
}

public ref struct OpFunctionPointerCallINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Operand1 => Inner.GetOperand<IdRef>("operand1") ?? default;

    public OpFunctionPointerCallINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFunctionPointerCallINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFunctionPointerCallINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFunctionPointerCallINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFunctionPointerCallINTEL(Span<int> buffer) => new OpFunctionPointerCallINTEL(buffer);
    public static implicit operator OpFunctionPointerCallINTEL(Instruction instruction) => new OpFunctionPointerCallINTEL(instruction.AsRef());
    public static implicit operator OpFunctionPointerCallINTEL(RefInstruction instruction) => new OpFunctionPointerCallINTEL(instruction);
}

public ref struct OpAsmTargetINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public LiteralString Asmtarget => Inner.GetOperand<LiteralString>("asmtarget") ?? default;

    public OpAsmTargetINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAsmTargetINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAsmTargetINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAsmTargetINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAsmTargetINTEL(Span<int> buffer) => new OpAsmTargetINTEL(buffer);
    public static implicit operator OpAsmTargetINTEL(Instruction instruction) => new OpAsmTargetINTEL(instruction.AsRef());
    public static implicit operator OpAsmTargetINTEL(RefInstruction instruction) => new OpAsmTargetINTEL(instruction);
}

public ref struct OpAsmINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Asmtype => Inner.GetOperand<IdRef>("asmtype") ?? default;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public LiteralString Asminstructions => Inner.GetOperand<LiteralString>("asminstructions") ?? default;
    public LiteralString Constraints => Inner.GetOperand<LiteralString>("constraints") ?? default;

    public OpAsmINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAsmINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAsmINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAsmINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAsmINTEL(Span<int> buffer) => new OpAsmINTEL(buffer);
    public static implicit operator OpAsmINTEL(Instruction instruction) => new OpAsmINTEL(instruction.AsRef());
    public static implicit operator OpAsmINTEL(RefInstruction instruction) => new OpAsmINTEL(instruction);
}

public ref struct OpAsmCallINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Asm => Inner.GetOperand<IdRef>("asm") ?? default;
    public IdRef Argument0 => Inner.GetOperand<IdRef>("argument0") ?? default;

    public OpAsmCallINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAsmCallINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAsmCallINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAsmCallINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAsmCallINTEL(Span<int> buffer) => new OpAsmCallINTEL(buffer);
    public static implicit operator OpAsmCallINTEL(Instruction instruction) => new OpAsmCallINTEL(instruction.AsRef());
    public static implicit operator OpAsmCallINTEL(RefInstruction instruction) => new OpAsmCallINTEL(instruction);
}

public ref struct OpAtomicFMinEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicFMinEXT(RefInstruction instruction) => Inner = instruction;
    public OpAtomicFMinEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicFMinEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicFMinEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicFMinEXT(Span<int> buffer) => new OpAtomicFMinEXT(buffer);
    public static implicit operator OpAtomicFMinEXT(Instruction instruction) => new OpAtomicFMinEXT(instruction.AsRef());
    public static implicit operator OpAtomicFMinEXT(RefInstruction instruction) => new OpAtomicFMinEXT(instruction);
}

public ref struct OpAtomicFMaxEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicFMaxEXT(RefInstruction instruction) => Inner = instruction;
    public OpAtomicFMaxEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicFMaxEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicFMaxEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicFMaxEXT(Span<int> buffer) => new OpAtomicFMaxEXT(buffer);
    public static implicit operator OpAtomicFMaxEXT(Instruction instruction) => new OpAtomicFMaxEXT(instruction.AsRef());
    public static implicit operator OpAtomicFMaxEXT(RefInstruction instruction) => new OpAtomicFMaxEXT(instruction);
}

public ref struct OpAssumeTrueKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Condition => Inner.GetOperand<IdRef>("condition") ?? default;

    public OpAssumeTrueKHR(RefInstruction instruction) => Inner = instruction;
    public OpAssumeTrueKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAssumeTrueKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAssumeTrueKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAssumeTrueKHR(Span<int> buffer) => new OpAssumeTrueKHR(buffer);
    public static implicit operator OpAssumeTrueKHR(Instruction instruction) => new OpAssumeTrueKHR(instruction.AsRef());
    public static implicit operator OpAssumeTrueKHR(RefInstruction instruction) => new OpAssumeTrueKHR(instruction);
}

public ref struct OpExpectKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;
    public IdRef ExpectedValue => Inner.GetOperand<IdRef>("expectedValue") ?? default;

    public OpExpectKHR(RefInstruction instruction) => Inner = instruction;
    public OpExpectKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpExpectKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpExpectKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpExpectKHR(Span<int> buffer) => new OpExpectKHR(buffer);
    public static implicit operator OpExpectKHR(Instruction instruction) => new OpExpectKHR(instruction.AsRef());
    public static implicit operator OpExpectKHR(RefInstruction instruction) => new OpExpectKHR(instruction);
}

public ref struct OpDecorateString : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;
    public Decoration Decoration => Inner.GetEnumOperand<Decoration>("decoration");

    public OpDecorateString(RefInstruction instruction) => Inner = instruction;
    public OpDecorateString(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpDecorateString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpDecorateString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpDecorateString(Span<int> buffer) => new OpDecorateString(buffer);
    public static implicit operator OpDecorateString(Instruction instruction) => new OpDecorateString(instruction.AsRef());
    public static implicit operator OpDecorateString(RefInstruction instruction) => new OpDecorateString(instruction);
}

public ref struct OpMemberDecorateString : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef StructType => Inner.GetOperand<IdRef>("structType") ?? default;
    public LiteralInteger Member => Inner.GetOperand<LiteralInteger>("member") ?? default;
    public Decoration Decoration => Inner.GetEnumOperand<Decoration>("decoration");

    public OpMemberDecorateString(RefInstruction instruction) => Inner = instruction;
    public OpMemberDecorateString(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMemberDecorateString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMemberDecorateString instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMemberDecorateString(Span<int> buffer) => new OpMemberDecorateString(buffer);
    public static implicit operator OpMemberDecorateString(Instruction instruction) => new OpMemberDecorateString(instruction.AsRef());
    public static implicit operator OpMemberDecorateString(RefInstruction instruction) => new OpMemberDecorateString(instruction);
}

public ref struct OpVmeImageINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ImageType => Inner.GetOperand<IdRef>("imageType") ?? default;
    public IdRef Sampler => Inner.GetOperand<IdRef>("sampler") ?? default;

    public OpVmeImageINTEL(RefInstruction instruction) => Inner = instruction;
    public OpVmeImageINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVmeImageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVmeImageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVmeImageINTEL(Span<int> buffer) => new OpVmeImageINTEL(buffer);
    public static implicit operator OpVmeImageINTEL(Instruction instruction) => new OpVmeImageINTEL(instruction.AsRef());
    public static implicit operator OpVmeImageINTEL(RefInstruction instruction) => new OpVmeImageINTEL(instruction);
}

public ref struct OpTypeVmeImageINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ImageType => Inner.GetOperand<IdRef>("imageType") ?? default;

    public OpTypeVmeImageINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeVmeImageINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeVmeImageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeVmeImageINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeVmeImageINTEL(Span<int> buffer) => new OpTypeVmeImageINTEL(buffer);
    public static implicit operator OpTypeVmeImageINTEL(Instruction instruction) => new OpTypeVmeImageINTEL(instruction.AsRef());
    public static implicit operator OpTypeVmeImageINTEL(RefInstruction instruction) => new OpTypeVmeImageINTEL(instruction);
}

public ref struct OpTypeAvcImePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImePayloadINTEL(Span<int> buffer) => new OpTypeAvcImePayloadINTEL(buffer);
    public static implicit operator OpTypeAvcImePayloadINTEL(Instruction instruction) => new OpTypeAvcImePayloadINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImePayloadINTEL(RefInstruction instruction) => new OpTypeAvcImePayloadINTEL(instruction);
}

public ref struct OpTypeAvcRefPayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcRefPayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcRefPayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcRefPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcRefPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcRefPayloadINTEL(Span<int> buffer) => new OpTypeAvcRefPayloadINTEL(buffer);
    public static implicit operator OpTypeAvcRefPayloadINTEL(Instruction instruction) => new OpTypeAvcRefPayloadINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcRefPayloadINTEL(RefInstruction instruction) => new OpTypeAvcRefPayloadINTEL(instruction);
}

public ref struct OpTypeAvcSicPayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcSicPayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcSicPayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcSicPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcSicPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcSicPayloadINTEL(Span<int> buffer) => new OpTypeAvcSicPayloadINTEL(buffer);
    public static implicit operator OpTypeAvcSicPayloadINTEL(Instruction instruction) => new OpTypeAvcSicPayloadINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcSicPayloadINTEL(RefInstruction instruction) => new OpTypeAvcSicPayloadINTEL(instruction);
}

public ref struct OpTypeAvcMcePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcMcePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcMcePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcMcePayloadINTEL(Span<int> buffer) => new OpTypeAvcMcePayloadINTEL(buffer);
    public static implicit operator OpTypeAvcMcePayloadINTEL(Instruction instruction) => new OpTypeAvcMcePayloadINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcMcePayloadINTEL(RefInstruction instruction) => new OpTypeAvcMcePayloadINTEL(instruction);
}

public ref struct OpTypeAvcMceResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcMceResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcMceResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcMceResultINTEL(Span<int> buffer) => new OpTypeAvcMceResultINTEL(buffer);
    public static implicit operator OpTypeAvcMceResultINTEL(Instruction instruction) => new OpTypeAvcMceResultINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcMceResultINTEL(RefInstruction instruction) => new OpTypeAvcMceResultINTEL(instruction);
}

public ref struct OpTypeAvcImeResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImeResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImeResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImeResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImeResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImeResultINTEL(Span<int> buffer) => new OpTypeAvcImeResultINTEL(buffer);
    public static implicit operator OpTypeAvcImeResultINTEL(Instruction instruction) => new OpTypeAvcImeResultINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImeResultINTEL(RefInstruction instruction) => new OpTypeAvcImeResultINTEL(instruction);
}

public ref struct OpTypeAvcImeResultSingleReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImeResultSingleReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImeResultSingleReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImeResultSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImeResultSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImeResultSingleReferenceStreamoutINTEL(Span<int> buffer) => new OpTypeAvcImeResultSingleReferenceStreamoutINTEL(buffer);
    public static implicit operator OpTypeAvcImeResultSingleReferenceStreamoutINTEL(Instruction instruction) => new OpTypeAvcImeResultSingleReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImeResultSingleReferenceStreamoutINTEL(RefInstruction instruction) => new OpTypeAvcImeResultSingleReferenceStreamoutINTEL(instruction);
}

public ref struct OpTypeAvcImeResultDualReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImeResultDualReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImeResultDualReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImeResultDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImeResultDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImeResultDualReferenceStreamoutINTEL(Span<int> buffer) => new OpTypeAvcImeResultDualReferenceStreamoutINTEL(buffer);
    public static implicit operator OpTypeAvcImeResultDualReferenceStreamoutINTEL(Instruction instruction) => new OpTypeAvcImeResultDualReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImeResultDualReferenceStreamoutINTEL(RefInstruction instruction) => new OpTypeAvcImeResultDualReferenceStreamoutINTEL(instruction);
}

public ref struct OpTypeAvcImeSingleReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImeSingleReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImeSingleReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImeSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImeSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImeSingleReferenceStreaminINTEL(Span<int> buffer) => new OpTypeAvcImeSingleReferenceStreaminINTEL(buffer);
    public static implicit operator OpTypeAvcImeSingleReferenceStreaminINTEL(Instruction instruction) => new OpTypeAvcImeSingleReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImeSingleReferenceStreaminINTEL(RefInstruction instruction) => new OpTypeAvcImeSingleReferenceStreaminINTEL(instruction);
}

public ref struct OpTypeAvcImeDualReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcImeDualReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcImeDualReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcImeDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcImeDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcImeDualReferenceStreaminINTEL(Span<int> buffer) => new OpTypeAvcImeDualReferenceStreaminINTEL(buffer);
    public static implicit operator OpTypeAvcImeDualReferenceStreaminINTEL(Instruction instruction) => new OpTypeAvcImeDualReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcImeDualReferenceStreaminINTEL(RefInstruction instruction) => new OpTypeAvcImeDualReferenceStreaminINTEL(instruction);
}

public ref struct OpTypeAvcRefResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcRefResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcRefResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcRefResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcRefResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcRefResultINTEL(Span<int> buffer) => new OpTypeAvcRefResultINTEL(buffer);
    public static implicit operator OpTypeAvcRefResultINTEL(Instruction instruction) => new OpTypeAvcRefResultINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcRefResultINTEL(RefInstruction instruction) => new OpTypeAvcRefResultINTEL(instruction);
}

public ref struct OpTypeAvcSicResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpTypeAvcSicResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeAvcSicResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeAvcSicResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeAvcSicResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeAvcSicResultINTEL(Span<int> buffer) => new OpTypeAvcSicResultINTEL(buffer);
    public static implicit operator OpTypeAvcSicResultINTEL(Instruction instruction) => new OpTypeAvcSicResultINTEL(instruction.AsRef());
    public static implicit operator OpTypeAvcSicResultINTEL(RefInstruction instruction) => new OpTypeAvcSicResultINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultInterBaseMultiReferencePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ReferenceBasePenalty => Inner.GetOperand<IdRef>("referenceBasePenalty") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetInterBaseMultiReferencePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultInterShapePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetInterShapePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedShapePenalty => Inner.GetOperand<IdRef>("packedShapePenalty") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetInterShapePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetInterShapePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetInterShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetInterShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetInterShapePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetInterShapePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetInterShapePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceSetInterShapePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetInterShapePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetInterShapePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultInterDirectionPenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetInterDirectionPenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef DirectionCost => Inner.GetOperand<IdRef>("directionCost") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetInterDirectionPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetInterDirectionPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetInterDirectionPenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultIntraLumaShapePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultInterMotionVectorCostTableINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultHighPenaltyCostTableINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultMediumPenaltyCostTableINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultLowPenaltyCostTableINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedCostCenterDelta => Inner.GetOperand<IdRef>("packedCostCenterDelta") ?? default;
    public IdRef PackedCostTable => Inner.GetOperand<IdRef>("packedCostTable") ?? default;
    public IdRef CostPrecision => Inner.GetOperand<IdRef>("costPrecision") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(Instruction instruction) => new OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetMotionVectorCostFunctionINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SliceType => Inner.GetOperand<IdRef>("sliceType") ?? default;
    public IdRef Qp => Inner.GetOperand<IdRef>("qp") ?? default;

    public OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultIntraLumaModePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultNonDcLumaIntraPenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetDefaultIntraChromaModeBasePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetAcOnlyHaarINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetAcOnlyHaarINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetAcOnlyHaarINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetAcOnlyHaarINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetAcOnlyHaarINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetAcOnlyHaarINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetAcOnlyHaarINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetAcOnlyHaarINTEL(Instruction instruction) => new OpSubgroupAvcMceSetAcOnlyHaarINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetAcOnlyHaarINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetAcOnlyHaarINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SourceFieldPolarity => Inner.GetOperand<IdRef>("sourceFieldPolarity") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(Instruction instruction) => new OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetSourceInterlacedFieldPolarityINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ReferenceFieldPolarity => Inner.GetOperand<IdRef>("referenceFieldPolarity") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(Instruction instruction) => new OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetSingleReferenceInterlacedFieldPolarityINTEL(instruction);
}

public ref struct OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ForwardReferenceFieldPolarity => Inner.GetOperand<IdRef>("forwardReferenceFieldPolarity") ?? default;
    public IdRef BackwardReferenceFieldPolarity => Inner.GetOperand<IdRef>("backwardReferenceFieldPolarity") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(Span<int> buffer) => new OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(Instruction instruction) => new OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(RefInstruction instruction) => new OpSubgroupAvcMceSetDualReferenceInterlacedFieldPolaritiesINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToImePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToImePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToImePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToImePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToImePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToImePayloadINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToImePayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToImePayloadINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToImePayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToImePayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToImePayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToImeResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToImeResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToImeResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToImeResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToImeResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToImeResultINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToImeResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToImeResultINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToImeResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToImeResultINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToImeResultINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToRefPayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToRefPayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToRefPayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToRefPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToRefPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToRefPayloadINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToRefPayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToRefPayloadINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToRefPayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToRefPayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToRefPayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToRefResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToRefResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToRefResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToRefResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToRefResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToRefResultINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToRefResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToRefResultINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToRefResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToRefResultINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToRefResultINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToSicPayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToSicPayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToSicPayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToSicPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToSicPayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToSicPayloadINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToSicPayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToSicPayloadINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToSicPayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToSicPayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToSicPayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcMceConvertToSicResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceConvertToSicResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceConvertToSicResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceConvertToSicResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceConvertToSicResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceConvertToSicResultINTEL(Span<int> buffer) => new OpSubgroupAvcMceConvertToSicResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceConvertToSicResultINTEL(Instruction instruction) => new OpSubgroupAvcMceConvertToSicResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceConvertToSicResultINTEL(RefInstruction instruction) => new OpSubgroupAvcMceConvertToSicResultINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetMotionVectorsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetMotionVectorsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetMotionVectorsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetMotionVectorsINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetMotionVectorsINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetMotionVectorsINTEL(Instruction instruction) => new OpSubgroupAvcMceGetMotionVectorsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetMotionVectorsINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetMotionVectorsINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterDistortionsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterDistortionsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterDistortionsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterDistortionsINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterDistortionsINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterDistortionsINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterDistortionsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterDistortionsINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterDistortionsINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetBestInterDistortionsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetBestInterDistortionsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetBestInterDistortionsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetBestInterDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetBestInterDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetBestInterDistortionsINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetBestInterDistortionsINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetBestInterDistortionsINTEL(Instruction instruction) => new OpSubgroupAvcMceGetBestInterDistortionsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetBestInterDistortionsINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetBestInterDistortionsINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterMajorShapeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterMajorShapeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterMajorShapeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterMajorShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterMajorShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterMajorShapeINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterMajorShapeINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterMajorShapeINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterMajorShapeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterMajorShapeINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterMajorShapeINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterMinorShapeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterMinorShapeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterMinorShapeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterMinorShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterMinorShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterMinorShapeINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterMinorShapeINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterMinorShapeINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterMinorShapeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterMinorShapeINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterMinorShapeINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterDirectionsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterDirectionsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterDirectionsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterDirectionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterDirectionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterDirectionsINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterDirectionsINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterDirectionsINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterDirectionsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterDirectionsINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterDirectionsINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterMotionVectorCountINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterMotionVectorCountINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterMotionVectorCountINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterMotionVectorCountINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterMotionVectorCountINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterMotionVectorCountINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterMotionVectorCountINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterMotionVectorCountINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterMotionVectorCountINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterMotionVectorCountINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterMotionVectorCountINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterReferenceIdsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterReferenceIdsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterReferenceIdsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterReferenceIdsINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterReferenceIdsINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterReferenceIdsINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterReferenceIdsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterReferenceIdsINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterReferenceIdsINTEL(instruction);
}

public ref struct OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedReferenceIds => Inner.GetOperand<IdRef>("packedReferenceIds") ?? default;
    public IdRef PackedReferenceParameterFieldPolarities => Inner.GetOperand<IdRef>("packedReferenceParameterFieldPolarities") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(Span<int> buffer) => new OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(buffer);
    public static implicit operator OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(Instruction instruction) => new OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(RefInstruction instruction) => new OpSubgroupAvcMceGetInterReferenceInterlacedFieldPolaritiesINTEL(instruction);
}

public ref struct OpSubgroupAvcImeInitializeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcCoord => Inner.GetOperand<IdRef>("srcCoord") ?? default;
    public IdRef PartitionMask => Inner.GetOperand<IdRef>("partitionMask") ?? default;
    public IdRef SADAdjustment => Inner.GetOperand<IdRef>("sADAdjustment") ?? default;

    public OpSubgroupAvcImeInitializeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeInitializeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeInitializeINTEL(Span<int> buffer) => new OpSubgroupAvcImeInitializeINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeInitializeINTEL(Instruction instruction) => new OpSubgroupAvcImeInitializeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeInitializeINTEL(RefInstruction instruction) => new OpSubgroupAvcImeInitializeINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetSingleReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RefOffset => Inner.GetOperand<IdRef>("refOffset") ?? default;
    public IdRef SearchWindowConfig => Inner.GetOperand<IdRef>("searchWindowConfig") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetSingleReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetSingleReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetSingleReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetSingleReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetSingleReferenceINTEL(Instruction instruction) => new OpSubgroupAvcImeSetSingleReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetSingleReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetSingleReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetDualReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef FwdRefOffset => Inner.GetOperand<IdRef>("fwdRefOffset") ?? default;
    public IdRef BwdRefOffset => Inner.GetOperand<IdRef>("bwdRefOffset") ?? default;
    public IdRef IdSearchWindowConfig => Inner.GetOperand<IdRef>("idSearchWindowConfig") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetDualReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetDualReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetDualReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetDualReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetDualReferenceINTEL(Instruction instruction) => new OpSubgroupAvcImeSetDualReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetDualReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetDualReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcImeRefWindowSizeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SearchWindowConfig => Inner.GetOperand<IdRef>("searchWindowConfig") ?? default;
    public IdRef DualRef => Inner.GetOperand<IdRef>("dualRef") ?? default;

    public OpSubgroupAvcImeRefWindowSizeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeRefWindowSizeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeRefWindowSizeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeRefWindowSizeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeRefWindowSizeINTEL(Span<int> buffer) => new OpSubgroupAvcImeRefWindowSizeINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeRefWindowSizeINTEL(Instruction instruction) => new OpSubgroupAvcImeRefWindowSizeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeRefWindowSizeINTEL(RefInstruction instruction) => new OpSubgroupAvcImeRefWindowSizeINTEL(instruction);
}

public ref struct OpSubgroupAvcImeAdjustRefOffsetINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RefOffset => Inner.GetOperand<IdRef>("refOffset") ?? default;
    public IdRef SrcCoord => Inner.GetOperand<IdRef>("srcCoord") ?? default;
    public IdRef RefWindowSize => Inner.GetOperand<IdRef>("refWindowSize") ?? default;
    public IdRef ImageSize => Inner.GetOperand<IdRef>("imageSize") ?? default;

    public OpSubgroupAvcImeAdjustRefOffsetINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeAdjustRefOffsetINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeAdjustRefOffsetINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeAdjustRefOffsetINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeAdjustRefOffsetINTEL(Span<int> buffer) => new OpSubgroupAvcImeAdjustRefOffsetINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeAdjustRefOffsetINTEL(Instruction instruction) => new OpSubgroupAvcImeAdjustRefOffsetINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeAdjustRefOffsetINTEL(RefInstruction instruction) => new OpSubgroupAvcImeAdjustRefOffsetINTEL(instruction);
}

public ref struct OpSubgroupAvcImeConvertToMcePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeConvertToMcePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeConvertToMcePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeConvertToMcePayloadINTEL(Span<int> buffer) => new OpSubgroupAvcImeConvertToMcePayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeConvertToMcePayloadINTEL(Instruction instruction) => new OpSubgroupAvcImeConvertToMcePayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeConvertToMcePayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcImeConvertToMcePayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetMaxMotionVectorCountINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef MaxMotionVectorCount => Inner.GetOperand<IdRef>("maxMotionVectorCount") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetMaxMotionVectorCountINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetMaxMotionVectorCountINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(Instruction instruction) => new OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetMaxMotionVectorCountINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(Instruction instruction) => new OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetUnidirectionalMixDisableINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Threshold => Inner.GetOperand<IdRef>("threshold") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(Instruction instruction) => new OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetEarlySearchTerminationThresholdINTEL(instruction);
}

public ref struct OpSubgroupAvcImeSetWeightedSadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedSadWeights => Inner.GetOperand<IdRef>("packedSadWeights") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeSetWeightedSadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeSetWeightedSadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeSetWeightedSadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeSetWeightedSadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeSetWeightedSadINTEL(Span<int> buffer) => new OpSubgroupAvcImeSetWeightedSadINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeSetWeightedSadINTEL(Instruction instruction) => new OpSubgroupAvcImeSetWeightedSadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeSetWeightedSadINTEL(RefInstruction instruction) => new OpSubgroupAvcImeSetWeightedSadINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithDualReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef StreaminComponents => Inner.GetOperand<IdRef>("streaminComponents") ?? default;

    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef StreaminComponents => Inner.GetOperand<IdRef>("streaminComponents") ?? default;

    public OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreamoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreamoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef StreaminComponents => Inner.GetOperand<IdRef>("streaminComponents") ?? default;

    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithSingleReferenceStreaminoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef StreaminComponents => Inner.GetOperand<IdRef>("streaminComponents") ?? default;

    public OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(Instruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeEvaluateWithDualReferenceStreaminoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeConvertToMceResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeConvertToMceResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeConvertToMceResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeConvertToMceResultINTEL(Span<int> buffer) => new OpSubgroupAvcImeConvertToMceResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeConvertToMceResultINTEL(Instruction instruction) => new OpSubgroupAvcImeConvertToMceResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeConvertToMceResultINTEL(RefInstruction instruction) => new OpSubgroupAvcImeConvertToMceResultINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetSingleReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetSingleReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(Instruction instruction) => new OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetSingleReferenceStreaminINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetDualReferenceStreaminINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetDualReferenceStreaminINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetDualReferenceStreaminINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetDualReferenceStreaminINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetDualReferenceStreaminINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetDualReferenceStreaminINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetDualReferenceStreaminINTEL(Instruction instruction) => new OpSubgroupAvcImeGetDualReferenceStreaminINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetDualReferenceStreaminINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetDualReferenceStreaminINTEL(instruction);
}

public ref struct OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(Instruction instruction) => new OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeStripSingleReferenceStreamoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeStripDualReferenceStreamoutINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeStripDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeStripDualReferenceStreamoutINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(Span<int> buffer) => new OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(Instruction instruction) => new OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(RefInstruction instruction) => new OpSubgroupAvcImeStripDualReferenceStreamoutINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;

    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeMotionVectorsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;

    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeDistortionsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;

    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutSingleReferenceMajorShapeReferenceIdsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;

    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeMotionVectorsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;

    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeDistortionsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;
    public IdRef MajorShape => Inner.GetOperand<IdRef>("majorShape") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;

    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(Instruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetStreamoutDualReferenceMajorShapeReferenceIdsINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetBorderReachedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ImageSelect => Inner.GetOperand<IdRef>("imageSelect") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetBorderReachedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetBorderReachedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetBorderReachedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetBorderReachedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetBorderReachedINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetBorderReachedINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetBorderReachedINTEL(Instruction instruction) => new OpSubgroupAvcImeGetBorderReachedINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetBorderReachedINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetBorderReachedINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(Instruction instruction) => new OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetTruncatedSearchIndicationINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(Instruction instruction) => new OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetUnidirectionalEarlySearchTerminationINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(Instruction instruction) => new OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetWeightingPatternMinimumMotionVectorINTEL(instruction);
}

public ref struct OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(Span<int> buffer) => new OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(buffer);
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(Instruction instruction) => new OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(RefInstruction instruction) => new OpSubgroupAvcImeGetWeightingPatternMinimumDistortionINTEL(instruction);
}

public ref struct OpSubgroupAvcFmeInitializeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcCoord => Inner.GetOperand<IdRef>("srcCoord") ?? default;
    public IdRef MotionVectors => Inner.GetOperand<IdRef>("motionVectors") ?? default;
    public IdRef MajorShapes => Inner.GetOperand<IdRef>("majorShapes") ?? default;
    public IdRef MinorShapes => Inner.GetOperand<IdRef>("minorShapes") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef PixelResolution => Inner.GetOperand<IdRef>("pixelResolution") ?? default;
    public IdRef SadAdjustment => Inner.GetOperand<IdRef>("sadAdjustment") ?? default;

    public OpSubgroupAvcFmeInitializeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcFmeInitializeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcFmeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcFmeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcFmeInitializeINTEL(Span<int> buffer) => new OpSubgroupAvcFmeInitializeINTEL(buffer);
    public static implicit operator OpSubgroupAvcFmeInitializeINTEL(Instruction instruction) => new OpSubgroupAvcFmeInitializeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcFmeInitializeINTEL(RefInstruction instruction) => new OpSubgroupAvcFmeInitializeINTEL(instruction);
}

public ref struct OpSubgroupAvcBmeInitializeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcCoord => Inner.GetOperand<IdRef>("srcCoord") ?? default;
    public IdRef MotionVectors => Inner.GetOperand<IdRef>("motionVectors") ?? default;
    public IdRef MajorShapes => Inner.GetOperand<IdRef>("majorShapes") ?? default;
    public IdRef MinorShapes => Inner.GetOperand<IdRef>("minorShapes") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;
    public IdRef PixelResolution => Inner.GetOperand<IdRef>("pixelResolution") ?? default;
    public IdRef BidirectionalWeight => Inner.GetOperand<IdRef>("bidirectionalWeight") ?? default;
    public IdRef SadAdjustment => Inner.GetOperand<IdRef>("sadAdjustment") ?? default;

    public OpSubgroupAvcBmeInitializeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcBmeInitializeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcBmeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcBmeInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcBmeInitializeINTEL(Span<int> buffer) => new OpSubgroupAvcBmeInitializeINTEL(buffer);
    public static implicit operator OpSubgroupAvcBmeInitializeINTEL(Instruction instruction) => new OpSubgroupAvcBmeInitializeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcBmeInitializeINTEL(RefInstruction instruction) => new OpSubgroupAvcBmeInitializeINTEL(instruction);
}

public ref struct OpSubgroupAvcRefConvertToMcePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefConvertToMcePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefConvertToMcePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefConvertToMcePayloadINTEL(Span<int> buffer) => new OpSubgroupAvcRefConvertToMcePayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefConvertToMcePayloadINTEL(Instruction instruction) => new OpSubgroupAvcRefConvertToMcePayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefConvertToMcePayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcRefConvertToMcePayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcRefSetBidirectionalMixDisableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefSetBidirectionalMixDisableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefSetBidirectionalMixDisableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(Span<int> buffer) => new OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(Instruction instruction) => new OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(RefInstruction instruction) => new OpSubgroupAvcRefSetBidirectionalMixDisableINTEL(instruction);
}

public ref struct OpSubgroupAvcRefSetBilinearFilterEnableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefSetBilinearFilterEnableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefSetBilinearFilterEnableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefSetBilinearFilterEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefSetBilinearFilterEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefSetBilinearFilterEnableINTEL(Span<int> buffer) => new OpSubgroupAvcRefSetBilinearFilterEnableINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefSetBilinearFilterEnableINTEL(Instruction instruction) => new OpSubgroupAvcRefSetBilinearFilterEnableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefSetBilinearFilterEnableINTEL(RefInstruction instruction) => new OpSubgroupAvcRefSetBilinearFilterEnableINTEL(instruction);
}

public ref struct OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(Instruction instruction) => new OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcRefEvaluateWithSingleReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcRefEvaluateWithDualReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(Instruction instruction) => new OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcRefEvaluateWithDualReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef PackedReferenceIds => Inner.GetOperand<IdRef>("packedReferenceIds") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(Instruction instruction) => new OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcRefEvaluateWithMultiReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef PackedReferenceIds => Inner.GetOperand<IdRef>("packedReferenceIds") ?? default;
    public IdRef PackedReferenceFieldPolarities => Inner.GetOperand<IdRef>("packedReferenceFieldPolarities") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(Span<int> buffer) => new OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(Instruction instruction) => new OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(RefInstruction instruction) => new OpSubgroupAvcRefEvaluateWithMultiReferenceInterlacedINTEL(instruction);
}

public ref struct OpSubgroupAvcRefConvertToMceResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcRefConvertToMceResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcRefConvertToMceResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcRefConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcRefConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcRefConvertToMceResultINTEL(Span<int> buffer) => new OpSubgroupAvcRefConvertToMceResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcRefConvertToMceResultINTEL(Instruction instruction) => new OpSubgroupAvcRefConvertToMceResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcRefConvertToMceResultINTEL(RefInstruction instruction) => new OpSubgroupAvcRefConvertToMceResultINTEL(instruction);
}

public ref struct OpSubgroupAvcSicInitializeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcCoord => Inner.GetOperand<IdRef>("srcCoord") ?? default;

    public OpSubgroupAvcSicInitializeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicInitializeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicInitializeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicInitializeINTEL(Span<int> buffer) => new OpSubgroupAvcSicInitializeINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicInitializeINTEL(Instruction instruction) => new OpSubgroupAvcSicInitializeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicInitializeINTEL(RefInstruction instruction) => new OpSubgroupAvcSicInitializeINTEL(instruction);
}

public ref struct OpSubgroupAvcSicConfigureSkcINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SkipBlockPartitionType => Inner.GetOperand<IdRef>("skipBlockPartitionType") ?? default;
    public IdRef SkipMotionVectorMask => Inner.GetOperand<IdRef>("skipMotionVectorMask") ?? default;
    public IdRef MotionVectors => Inner.GetOperand<IdRef>("motionVectors") ?? default;
    public IdRef BidirectionalWeight => Inner.GetOperand<IdRef>("bidirectionalWeight") ?? default;
    public IdRef SadAdjustment => Inner.GetOperand<IdRef>("sadAdjustment") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicConfigureSkcINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicConfigureSkcINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicConfigureSkcINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicConfigureSkcINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicConfigureSkcINTEL(Span<int> buffer) => new OpSubgroupAvcSicConfigureSkcINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicConfigureSkcINTEL(Instruction instruction) => new OpSubgroupAvcSicConfigureSkcINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicConfigureSkcINTEL(RefInstruction instruction) => new OpSubgroupAvcSicConfigureSkcINTEL(instruction);
}

public ref struct OpSubgroupAvcSicConfigureIpeLumaINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef LumaIntraPartitionMask => Inner.GetOperand<IdRef>("lumaIntraPartitionMask") ?? default;
    public IdRef IntraNeighbourAvailabilty => Inner.GetOperand<IdRef>("intraNeighbourAvailabilty") ?? default;
    public IdRef LeftEdgeLumaPixels => Inner.GetOperand<IdRef>("leftEdgeLumaPixels") ?? default;
    public IdRef UpperLeftCornerLumaPixel => Inner.GetOperand<IdRef>("upperLeftCornerLumaPixel") ?? default;
    public IdRef UpperEdgeLumaPixels => Inner.GetOperand<IdRef>("upperEdgeLumaPixels") ?? default;
    public IdRef UpperRightEdgeLumaPixels => Inner.GetOperand<IdRef>("upperRightEdgeLumaPixels") ?? default;
    public IdRef SadAdjustment => Inner.GetOperand<IdRef>("sadAdjustment") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicConfigureIpeLumaINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicConfigureIpeLumaINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicConfigureIpeLumaINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicConfigureIpeLumaINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaINTEL(Span<int> buffer) => new OpSubgroupAvcSicConfigureIpeLumaINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaINTEL(Instruction instruction) => new OpSubgroupAvcSicConfigureIpeLumaINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaINTEL(RefInstruction instruction) => new OpSubgroupAvcSicConfigureIpeLumaINTEL(instruction);
}

public ref struct OpSubgroupAvcSicConfigureIpeLumaChromaINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef LumaIntraPartitionMask => Inner.GetOperand<IdRef>("lumaIntraPartitionMask") ?? default;
    public IdRef IntraNeighbourAvailabilty => Inner.GetOperand<IdRef>("intraNeighbourAvailabilty") ?? default;
    public IdRef LeftEdgeLumaPixels => Inner.GetOperand<IdRef>("leftEdgeLumaPixels") ?? default;
    public IdRef UpperLeftCornerLumaPixel => Inner.GetOperand<IdRef>("upperLeftCornerLumaPixel") ?? default;
    public IdRef UpperEdgeLumaPixels => Inner.GetOperand<IdRef>("upperEdgeLumaPixels") ?? default;
    public IdRef UpperRightEdgeLumaPixels => Inner.GetOperand<IdRef>("upperRightEdgeLumaPixels") ?? default;
    public IdRef LeftEdgeChromaPixels => Inner.GetOperand<IdRef>("leftEdgeChromaPixels") ?? default;
    public IdRef UpperLeftCornerChromaPixel => Inner.GetOperand<IdRef>("upperLeftCornerChromaPixel") ?? default;
    public IdRef UpperEdgeChromaPixels => Inner.GetOperand<IdRef>("upperEdgeChromaPixels") ?? default;
    public IdRef SadAdjustment => Inner.GetOperand<IdRef>("sadAdjustment") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicConfigureIpeLumaChromaINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicConfigureIpeLumaChromaINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(Span<int> buffer) => new OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(Instruction instruction) => new OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(RefInstruction instruction) => new OpSubgroupAvcSicConfigureIpeLumaChromaINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetMotionVectorMaskINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SkipBlockPartitionType => Inner.GetOperand<IdRef>("skipBlockPartitionType") ?? default;
    public IdRef Direction => Inner.GetOperand<IdRef>("direction") ?? default;

    public OpSubgroupAvcSicGetMotionVectorMaskINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetMotionVectorMaskINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetMotionVectorMaskINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetMotionVectorMaskINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetMotionVectorMaskINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetMotionVectorMaskINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetMotionVectorMaskINTEL(Instruction instruction) => new OpSubgroupAvcSicGetMotionVectorMaskINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetMotionVectorMaskINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetMotionVectorMaskINTEL(instruction);
}

public ref struct OpSubgroupAvcSicConvertToMcePayloadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicConvertToMcePayloadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicConvertToMcePayloadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicConvertToMcePayloadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicConvertToMcePayloadINTEL(Span<int> buffer) => new OpSubgroupAvcSicConvertToMcePayloadINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicConvertToMcePayloadINTEL(Instruction instruction) => new OpSubgroupAvcSicConvertToMcePayloadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicConvertToMcePayloadINTEL(RefInstruction instruction) => new OpSubgroupAvcSicConvertToMcePayloadINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedShapePenalty => Inner.GetOperand<IdRef>("packedShapePenalty") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(Instruction instruction) => new OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetIntraLumaShapePenaltyINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef LumaModePenalty => Inner.GetOperand<IdRef>("lumaModePenalty") ?? default;
    public IdRef LumaPackedNeighborModes => Inner.GetOperand<IdRef>("lumaPackedNeighborModes") ?? default;
    public IdRef LumaPackedNonDcPenalty => Inner.GetOperand<IdRef>("lumaPackedNonDcPenalty") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(Instruction instruction) => new OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetIntraLumaModeCostFunctionINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef ChromaModeBasePenalty => Inner.GetOperand<IdRef>("chromaModeBasePenalty") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(Instruction instruction) => new OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetIntraChromaModeCostFunctionINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetBilinearFilterEnableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetBilinearFilterEnableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetBilinearFilterEnableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetBilinearFilterEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetBilinearFilterEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetBilinearFilterEnableINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetBilinearFilterEnableINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetBilinearFilterEnableINTEL(Instruction instruction) => new OpSubgroupAvcSicSetBilinearFilterEnableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetBilinearFilterEnableINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetBilinearFilterEnableINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PackedSadCoefficients => Inner.GetOperand<IdRef>("packedSadCoefficients") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(Instruction instruction) => new OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetSkcForwardTransformEnableINTEL(instruction);
}

public ref struct OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BlockBasedSkipType => Inner.GetOperand<IdRef>("blockBasedSkipType") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(Span<int> buffer) => new OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(Instruction instruction) => new OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(RefInstruction instruction) => new OpSubgroupAvcSicSetBlockBasedRawSkipSadINTEL(instruction);
}

public ref struct OpSubgroupAvcSicEvaluateIpeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicEvaluateIpeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicEvaluateIpeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicEvaluateIpeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicEvaluateIpeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicEvaluateIpeINTEL(Span<int> buffer) => new OpSubgroupAvcSicEvaluateIpeINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicEvaluateIpeINTEL(Instruction instruction) => new OpSubgroupAvcSicEvaluateIpeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicEvaluateIpeINTEL(RefInstruction instruction) => new OpSubgroupAvcSicEvaluateIpeINTEL(instruction);
}

public ref struct OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef RefImage => Inner.GetOperand<IdRef>("refImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(Instruction instruction) => new OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcSicEvaluateWithSingleReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcSicEvaluateWithDualReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef FwdRefImage => Inner.GetOperand<IdRef>("fwdRefImage") ?? default;
    public IdRef BwdRefImage => Inner.GetOperand<IdRef>("bwdRefImage") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicEvaluateWithDualReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(Instruction instruction) => new OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcSicEvaluateWithDualReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef PackedReferenceIds => Inner.GetOperand<IdRef>("packedReferenceIds") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(Span<int> buffer) => new OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(Instruction instruction) => new OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(RefInstruction instruction) => new OpSubgroupAvcSicEvaluateWithMultiReferenceINTEL(instruction);
}

public ref struct OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef SrcImage => Inner.GetOperand<IdRef>("srcImage") ?? default;
    public IdRef PackedReferenceIds => Inner.GetOperand<IdRef>("packedReferenceIds") ?? default;
    public IdRef PackedReferenceFieldPolarities => Inner.GetOperand<IdRef>("packedReferenceFieldPolarities") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(Span<int> buffer) => new OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(Instruction instruction) => new OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(RefInstruction instruction) => new OpSubgroupAvcSicEvaluateWithMultiReferenceInterlacedINTEL(instruction);
}

public ref struct OpSubgroupAvcSicConvertToMceResultINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicConvertToMceResultINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicConvertToMceResultINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicConvertToMceResultINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicConvertToMceResultINTEL(Span<int> buffer) => new OpSubgroupAvcSicConvertToMceResultINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicConvertToMceResultINTEL(Instruction instruction) => new OpSubgroupAvcSicConvertToMceResultINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicConvertToMceResultINTEL(RefInstruction instruction) => new OpSubgroupAvcSicConvertToMceResultINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetIpeLumaShapeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetIpeLumaShapeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetIpeLumaShapeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetIpeLumaShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetIpeLumaShapeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetIpeLumaShapeINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetIpeLumaShapeINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetIpeLumaShapeINTEL(Instruction instruction) => new OpSubgroupAvcSicGetIpeLumaShapeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetIpeLumaShapeINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetIpeLumaShapeINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(Instruction instruction) => new OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetBestIpeLumaDistortionINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(Instruction instruction) => new OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetBestIpeChromaDistortionINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetPackedIpeLumaModesINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetPackedIpeLumaModesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetPackedIpeLumaModesINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(Instruction instruction) => new OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetPackedIpeLumaModesINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetIpeChromaModeINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetIpeChromaModeINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetIpeChromaModeINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetIpeChromaModeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetIpeChromaModeINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetIpeChromaModeINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetIpeChromaModeINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetIpeChromaModeINTEL(Instruction instruction) => new OpSubgroupAvcSicGetIpeChromaModeINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetIpeChromaModeINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetIpeChromaModeINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(Instruction instruction) => new OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetPackedSkcLumaCountThresholdINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(Instruction instruction) => new OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetPackedSkcLumaSumThresholdINTEL(instruction);
}

public ref struct OpSubgroupAvcSicGetInterRawSadsINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Payload => Inner.GetOperand<IdRef>("payload") ?? default;

    public OpSubgroupAvcSicGetInterRawSadsINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupAvcSicGetInterRawSadsINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupAvcSicGetInterRawSadsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupAvcSicGetInterRawSadsINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupAvcSicGetInterRawSadsINTEL(Span<int> buffer) => new OpSubgroupAvcSicGetInterRawSadsINTEL(buffer);
    public static implicit operator OpSubgroupAvcSicGetInterRawSadsINTEL(Instruction instruction) => new OpSubgroupAvcSicGetInterRawSadsINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupAvcSicGetInterRawSadsINTEL(RefInstruction instruction) => new OpSubgroupAvcSicGetInterRawSadsINTEL(instruction);
}

public ref struct OpVariableLengthArrayINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Lenght => Inner.GetOperand<IdRef>("lenght") ?? default;

    public OpVariableLengthArrayINTEL(RefInstruction instruction) => Inner = instruction;
    public OpVariableLengthArrayINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpVariableLengthArrayINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpVariableLengthArrayINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpVariableLengthArrayINTEL(Span<int> buffer) => new OpVariableLengthArrayINTEL(buffer);
    public static implicit operator OpVariableLengthArrayINTEL(Instruction instruction) => new OpVariableLengthArrayINTEL(instruction.AsRef());
    public static implicit operator OpVariableLengthArrayINTEL(RefInstruction instruction) => new OpVariableLengthArrayINTEL(instruction);
}

public ref struct OpSaveMemoryINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;

    public OpSaveMemoryINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSaveMemoryINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSaveMemoryINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSaveMemoryINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSaveMemoryINTEL(Span<int> buffer) => new OpSaveMemoryINTEL(buffer);
    public static implicit operator OpSaveMemoryINTEL(Instruction instruction) => new OpSaveMemoryINTEL(instruction.AsRef());
    public static implicit operator OpSaveMemoryINTEL(RefInstruction instruction) => new OpSaveMemoryINTEL(instruction);
}

public ref struct OpRestoreMemoryINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Ptr => Inner.GetOperand<IdRef>("ptr") ?? default;

    public OpRestoreMemoryINTEL(RefInstruction instruction) => Inner = instruction;
    public OpRestoreMemoryINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRestoreMemoryINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRestoreMemoryINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRestoreMemoryINTEL(Span<int> buffer) => new OpRestoreMemoryINTEL(buffer);
    public static implicit operator OpRestoreMemoryINTEL(Instruction instruction) => new OpRestoreMemoryINTEL(instruction.AsRef());
    public static implicit operator OpRestoreMemoryINTEL(RefInstruction instruction) => new OpRestoreMemoryINTEL(instruction);
}

public ref struct OpArbitraryFloatSinCosPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger FromSign => Inner.GetOperand<LiteralInteger>("fromSign") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSinCosPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSinCosPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSinCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSinCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSinCosPiINTEL(Span<int> buffer) => new OpArbitraryFloatSinCosPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatSinCosPiINTEL(Instruction instruction) => new OpArbitraryFloatSinCosPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSinCosPiINTEL(RefInstruction instruction) => new OpArbitraryFloatSinCosPiINTEL(instruction);
}

public ref struct OpArbitraryFloatCastINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCastINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCastINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCastINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCastINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCastINTEL(Span<int> buffer) => new OpArbitraryFloatCastINTEL(buffer);
    public static implicit operator OpArbitraryFloatCastINTEL(Instruction instruction) => new OpArbitraryFloatCastINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCastINTEL(RefInstruction instruction) => new OpArbitraryFloatCastINTEL(instruction);
}

public ref struct OpArbitraryFloatCastFromIntINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger FromSign => Inner.GetOperand<LiteralInteger>("fromSign") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCastFromIntINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCastFromIntINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCastFromIntINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCastFromIntINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCastFromIntINTEL(Span<int> buffer) => new OpArbitraryFloatCastFromIntINTEL(buffer);
    public static implicit operator OpArbitraryFloatCastFromIntINTEL(Instruction instruction) => new OpArbitraryFloatCastFromIntINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCastFromIntINTEL(RefInstruction instruction) => new OpArbitraryFloatCastFromIntINTEL(instruction);
}

public ref struct OpArbitraryFloatCastToIntINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCastToIntINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCastToIntINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCastToIntINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCastToIntINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCastToIntINTEL(Span<int> buffer) => new OpArbitraryFloatCastToIntINTEL(buffer);
    public static implicit operator OpArbitraryFloatCastToIntINTEL(Instruction instruction) => new OpArbitraryFloatCastToIntINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCastToIntINTEL(RefInstruction instruction) => new OpArbitraryFloatCastToIntINTEL(instruction);
}

public ref struct OpArbitraryFloatAddINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatAddINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatAddINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatAddINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatAddINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatAddINTEL(Span<int> buffer) => new OpArbitraryFloatAddINTEL(buffer);
    public static implicit operator OpArbitraryFloatAddINTEL(Instruction instruction) => new OpArbitraryFloatAddINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatAddINTEL(RefInstruction instruction) => new OpArbitraryFloatAddINTEL(instruction);
}

public ref struct OpArbitraryFloatSubINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSubINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSubINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSubINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSubINTEL(Span<int> buffer) => new OpArbitraryFloatSubINTEL(buffer);
    public static implicit operator OpArbitraryFloatSubINTEL(Instruction instruction) => new OpArbitraryFloatSubINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSubINTEL(RefInstruction instruction) => new OpArbitraryFloatSubINTEL(instruction);
}

public ref struct OpArbitraryFloatMulINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatMulINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatMulINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatMulINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatMulINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatMulINTEL(Span<int> buffer) => new OpArbitraryFloatMulINTEL(buffer);
    public static implicit operator OpArbitraryFloatMulINTEL(Instruction instruction) => new OpArbitraryFloatMulINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatMulINTEL(RefInstruction instruction) => new OpArbitraryFloatMulINTEL(instruction);
}

public ref struct OpArbitraryFloatDivINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatDivINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatDivINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatDivINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatDivINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatDivINTEL(Span<int> buffer) => new OpArbitraryFloatDivINTEL(buffer);
    public static implicit operator OpArbitraryFloatDivINTEL(Instruction instruction) => new OpArbitraryFloatDivINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatDivINTEL(RefInstruction instruction) => new OpArbitraryFloatDivINTEL(instruction);
}

public ref struct OpArbitraryFloatGTINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;

    public OpArbitraryFloatGTINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatGTINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatGTINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatGTINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatGTINTEL(Span<int> buffer) => new OpArbitraryFloatGTINTEL(buffer);
    public static implicit operator OpArbitraryFloatGTINTEL(Instruction instruction) => new OpArbitraryFloatGTINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatGTINTEL(RefInstruction instruction) => new OpArbitraryFloatGTINTEL(instruction);
}

public ref struct OpArbitraryFloatGEINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;

    public OpArbitraryFloatGEINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatGEINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatGEINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatGEINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatGEINTEL(Span<int> buffer) => new OpArbitraryFloatGEINTEL(buffer);
    public static implicit operator OpArbitraryFloatGEINTEL(Instruction instruction) => new OpArbitraryFloatGEINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatGEINTEL(RefInstruction instruction) => new OpArbitraryFloatGEINTEL(instruction);
}

public ref struct OpArbitraryFloatLTINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;

    public OpArbitraryFloatLTINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLTINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLTINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLTINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLTINTEL(Span<int> buffer) => new OpArbitraryFloatLTINTEL(buffer);
    public static implicit operator OpArbitraryFloatLTINTEL(Instruction instruction) => new OpArbitraryFloatLTINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLTINTEL(RefInstruction instruction) => new OpArbitraryFloatLTINTEL(instruction);
}

public ref struct OpArbitraryFloatLEINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;

    public OpArbitraryFloatLEINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLEINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLEINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLEINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLEINTEL(Span<int> buffer) => new OpArbitraryFloatLEINTEL(buffer);
    public static implicit operator OpArbitraryFloatLEINTEL(Instruction instruction) => new OpArbitraryFloatLEINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLEINTEL(RefInstruction instruction) => new OpArbitraryFloatLEINTEL(instruction);
}

public ref struct OpArbitraryFloatEQINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;

    public OpArbitraryFloatEQINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatEQINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatEQINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatEQINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatEQINTEL(Span<int> buffer) => new OpArbitraryFloatEQINTEL(buffer);
    public static implicit operator OpArbitraryFloatEQINTEL(Instruction instruction) => new OpArbitraryFloatEQINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatEQINTEL(RefInstruction instruction) => new OpArbitraryFloatEQINTEL(instruction);
}

public ref struct OpArbitraryFloatRecipINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatRecipINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatRecipINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatRecipINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatRecipINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatRecipINTEL(Span<int> buffer) => new OpArbitraryFloatRecipINTEL(buffer);
    public static implicit operator OpArbitraryFloatRecipINTEL(Instruction instruction) => new OpArbitraryFloatRecipINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatRecipINTEL(RefInstruction instruction) => new OpArbitraryFloatRecipINTEL(instruction);
}

public ref struct OpArbitraryFloatRSqrtINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatRSqrtINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatRSqrtINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatRSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatRSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatRSqrtINTEL(Span<int> buffer) => new OpArbitraryFloatRSqrtINTEL(buffer);
    public static implicit operator OpArbitraryFloatRSqrtINTEL(Instruction instruction) => new OpArbitraryFloatRSqrtINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatRSqrtINTEL(RefInstruction instruction) => new OpArbitraryFloatRSqrtINTEL(instruction);
}

public ref struct OpArbitraryFloatCbrtINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCbrtINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCbrtINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCbrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCbrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCbrtINTEL(Span<int> buffer) => new OpArbitraryFloatCbrtINTEL(buffer);
    public static implicit operator OpArbitraryFloatCbrtINTEL(Instruction instruction) => new OpArbitraryFloatCbrtINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCbrtINTEL(RefInstruction instruction) => new OpArbitraryFloatCbrtINTEL(instruction);
}

public ref struct OpArbitraryFloatHypotINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatHypotINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatHypotINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatHypotINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatHypotINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatHypotINTEL(Span<int> buffer) => new OpArbitraryFloatHypotINTEL(buffer);
    public static implicit operator OpArbitraryFloatHypotINTEL(Instruction instruction) => new OpArbitraryFloatHypotINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatHypotINTEL(RefInstruction instruction) => new OpArbitraryFloatHypotINTEL(instruction);
}

public ref struct OpArbitraryFloatSqrtINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSqrtINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSqrtINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSqrtINTEL(Span<int> buffer) => new OpArbitraryFloatSqrtINTEL(buffer);
    public static implicit operator OpArbitraryFloatSqrtINTEL(Instruction instruction) => new OpArbitraryFloatSqrtINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSqrtINTEL(RefInstruction instruction) => new OpArbitraryFloatSqrtINTEL(instruction);
}

public ref struct OpArbitraryFloatLogINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatLogINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLogINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLogINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLogINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLogINTEL(Span<int> buffer) => new OpArbitraryFloatLogINTEL(buffer);
    public static implicit operator OpArbitraryFloatLogINTEL(Instruction instruction) => new OpArbitraryFloatLogINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLogINTEL(RefInstruction instruction) => new OpArbitraryFloatLogINTEL(instruction);
}

public ref struct OpArbitraryFloatLog2INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatLog2INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLog2INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLog2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLog2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLog2INTEL(Span<int> buffer) => new OpArbitraryFloatLog2INTEL(buffer);
    public static implicit operator OpArbitraryFloatLog2INTEL(Instruction instruction) => new OpArbitraryFloatLog2INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLog2INTEL(RefInstruction instruction) => new OpArbitraryFloatLog2INTEL(instruction);
}

public ref struct OpArbitraryFloatLog10INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatLog10INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLog10INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLog10INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLog10INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLog10INTEL(Span<int> buffer) => new OpArbitraryFloatLog10INTEL(buffer);
    public static implicit operator OpArbitraryFloatLog10INTEL(Instruction instruction) => new OpArbitraryFloatLog10INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLog10INTEL(RefInstruction instruction) => new OpArbitraryFloatLog10INTEL(instruction);
}

public ref struct OpArbitraryFloatLog1pINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatLog1pINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatLog1pINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatLog1pINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatLog1pINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatLog1pINTEL(Span<int> buffer) => new OpArbitraryFloatLog1pINTEL(buffer);
    public static implicit operator OpArbitraryFloatLog1pINTEL(Instruction instruction) => new OpArbitraryFloatLog1pINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatLog1pINTEL(RefInstruction instruction) => new OpArbitraryFloatLog1pINTEL(instruction);
}

public ref struct OpArbitraryFloatExpINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatExpINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatExpINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatExpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatExpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatExpINTEL(Span<int> buffer) => new OpArbitraryFloatExpINTEL(buffer);
    public static implicit operator OpArbitraryFloatExpINTEL(Instruction instruction) => new OpArbitraryFloatExpINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatExpINTEL(RefInstruction instruction) => new OpArbitraryFloatExpINTEL(instruction);
}

public ref struct OpArbitraryFloatExp2INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatExp2INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatExp2INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatExp2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatExp2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatExp2INTEL(Span<int> buffer) => new OpArbitraryFloatExp2INTEL(buffer);
    public static implicit operator OpArbitraryFloatExp2INTEL(Instruction instruction) => new OpArbitraryFloatExp2INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatExp2INTEL(RefInstruction instruction) => new OpArbitraryFloatExp2INTEL(instruction);
}

public ref struct OpArbitraryFloatExp10INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatExp10INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatExp10INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatExp10INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatExp10INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatExp10INTEL(Span<int> buffer) => new OpArbitraryFloatExp10INTEL(buffer);
    public static implicit operator OpArbitraryFloatExp10INTEL(Instruction instruction) => new OpArbitraryFloatExp10INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatExp10INTEL(RefInstruction instruction) => new OpArbitraryFloatExp10INTEL(instruction);
}

public ref struct OpArbitraryFloatExpm1INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatExpm1INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatExpm1INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatExpm1INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatExpm1INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatExpm1INTEL(Span<int> buffer) => new OpArbitraryFloatExpm1INTEL(buffer);
    public static implicit operator OpArbitraryFloatExpm1INTEL(Instruction instruction) => new OpArbitraryFloatExpm1INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatExpm1INTEL(RefInstruction instruction) => new OpArbitraryFloatExpm1INTEL(instruction);
}

public ref struct OpArbitraryFloatSinINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSinINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSinINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSinINTEL(Span<int> buffer) => new OpArbitraryFloatSinINTEL(buffer);
    public static implicit operator OpArbitraryFloatSinINTEL(Instruction instruction) => new OpArbitraryFloatSinINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSinINTEL(RefInstruction instruction) => new OpArbitraryFloatSinINTEL(instruction);
}

public ref struct OpArbitraryFloatCosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCosINTEL(Span<int> buffer) => new OpArbitraryFloatCosINTEL(buffer);
    public static implicit operator OpArbitraryFloatCosINTEL(Instruction instruction) => new OpArbitraryFloatCosINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCosINTEL(RefInstruction instruction) => new OpArbitraryFloatCosINTEL(instruction);
}

public ref struct OpArbitraryFloatSinCosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSinCosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSinCosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSinCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSinCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSinCosINTEL(Span<int> buffer) => new OpArbitraryFloatSinCosINTEL(buffer);
    public static implicit operator OpArbitraryFloatSinCosINTEL(Instruction instruction) => new OpArbitraryFloatSinCosINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSinCosINTEL(RefInstruction instruction) => new OpArbitraryFloatSinCosINTEL(instruction);
}

public ref struct OpArbitraryFloatSinPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatSinPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatSinPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatSinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatSinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatSinPiINTEL(Span<int> buffer) => new OpArbitraryFloatSinPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatSinPiINTEL(Instruction instruction) => new OpArbitraryFloatSinPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatSinPiINTEL(RefInstruction instruction) => new OpArbitraryFloatSinPiINTEL(instruction);
}

public ref struct OpArbitraryFloatCosPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatCosPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatCosPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatCosPiINTEL(Span<int> buffer) => new OpArbitraryFloatCosPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatCosPiINTEL(Instruction instruction) => new OpArbitraryFloatCosPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatCosPiINTEL(RefInstruction instruction) => new OpArbitraryFloatCosPiINTEL(instruction);
}

public ref struct OpArbitraryFloatASinINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatASinINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatASinINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatASinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatASinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatASinINTEL(Span<int> buffer) => new OpArbitraryFloatASinINTEL(buffer);
    public static implicit operator OpArbitraryFloatASinINTEL(Instruction instruction) => new OpArbitraryFloatASinINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatASinINTEL(RefInstruction instruction) => new OpArbitraryFloatASinINTEL(instruction);
}

public ref struct OpArbitraryFloatASinPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatASinPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatASinPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatASinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatASinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatASinPiINTEL(Span<int> buffer) => new OpArbitraryFloatASinPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatASinPiINTEL(Instruction instruction) => new OpArbitraryFloatASinPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatASinPiINTEL(RefInstruction instruction) => new OpArbitraryFloatASinPiINTEL(instruction);
}

public ref struct OpArbitraryFloatACosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatACosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatACosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatACosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatACosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatACosINTEL(Span<int> buffer) => new OpArbitraryFloatACosINTEL(buffer);
    public static implicit operator OpArbitraryFloatACosINTEL(Instruction instruction) => new OpArbitraryFloatACosINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatACosINTEL(RefInstruction instruction) => new OpArbitraryFloatACosINTEL(instruction);
}

public ref struct OpArbitraryFloatACosPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatACosPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatACosPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatACosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatACosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatACosPiINTEL(Span<int> buffer) => new OpArbitraryFloatACosPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatACosPiINTEL(Instruction instruction) => new OpArbitraryFloatACosPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatACosPiINTEL(RefInstruction instruction) => new OpArbitraryFloatACosPiINTEL(instruction);
}

public ref struct OpArbitraryFloatATanINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatATanINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatATanINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatATanINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatATanINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatATanINTEL(Span<int> buffer) => new OpArbitraryFloatATanINTEL(buffer);
    public static implicit operator OpArbitraryFloatATanINTEL(Instruction instruction) => new OpArbitraryFloatATanINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatATanINTEL(RefInstruction instruction) => new OpArbitraryFloatATanINTEL(instruction);
}

public ref struct OpArbitraryFloatATanPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatATanPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatATanPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatATanPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatATanPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatATanPiINTEL(Span<int> buffer) => new OpArbitraryFloatATanPiINTEL(buffer);
    public static implicit operator OpArbitraryFloatATanPiINTEL(Instruction instruction) => new OpArbitraryFloatATanPiINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatATanPiINTEL(RefInstruction instruction) => new OpArbitraryFloatATanPiINTEL(instruction);
}

public ref struct OpArbitraryFloatATan2INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatATan2INTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatATan2INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatATan2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatATan2INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatATan2INTEL(Span<int> buffer) => new OpArbitraryFloatATan2INTEL(buffer);
    public static implicit operator OpArbitraryFloatATan2INTEL(Instruction instruction) => new OpArbitraryFloatATan2INTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatATan2INTEL(RefInstruction instruction) => new OpArbitraryFloatATan2INTEL(instruction);
}

public ref struct OpArbitraryFloatPowINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatPowINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatPowINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatPowINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatPowINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatPowINTEL(Span<int> buffer) => new OpArbitraryFloatPowINTEL(buffer);
    public static implicit operator OpArbitraryFloatPowINTEL(Instruction instruction) => new OpArbitraryFloatPowINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatPowINTEL(RefInstruction instruction) => new OpArbitraryFloatPowINTEL(instruction);
}

public ref struct OpArbitraryFloatPowRINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger M2 => Inner.GetOperand<LiteralInteger>("m2") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatPowRINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatPowRINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatPowRINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatPowRINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatPowRINTEL(Span<int> buffer) => new OpArbitraryFloatPowRINTEL(buffer);
    public static implicit operator OpArbitraryFloatPowRINTEL(Instruction instruction) => new OpArbitraryFloatPowRINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatPowRINTEL(RefInstruction instruction) => new OpArbitraryFloatPowRINTEL(instruction);
}

public ref struct OpArbitraryFloatPowNINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef A => Inner.GetOperand<IdRef>("a") ?? default;
    public LiteralInteger M1 => Inner.GetOperand<LiteralInteger>("m1") ?? default;
    public IdRef B => Inner.GetOperand<IdRef>("b") ?? default;
    public LiteralInteger Mout => Inner.GetOperand<LiteralInteger>("mout") ?? default;
    public LiteralInteger EnableSubnormals => Inner.GetOperand<LiteralInteger>("enableSubnormals") ?? default;
    public LiteralInteger RoundingMode => Inner.GetOperand<LiteralInteger>("roundingMode") ?? default;
    public LiteralInteger RoundingAccuracy => Inner.GetOperand<LiteralInteger>("roundingAccuracy") ?? default;

    public OpArbitraryFloatPowNINTEL(RefInstruction instruction) => Inner = instruction;
    public OpArbitraryFloatPowNINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArbitraryFloatPowNINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArbitraryFloatPowNINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArbitraryFloatPowNINTEL(Span<int> buffer) => new OpArbitraryFloatPowNINTEL(buffer);
    public static implicit operator OpArbitraryFloatPowNINTEL(Instruction instruction) => new OpArbitraryFloatPowNINTEL(instruction.AsRef());
    public static implicit operator OpArbitraryFloatPowNINTEL(RefInstruction instruction) => new OpArbitraryFloatPowNINTEL(instruction);
}

public ref struct OpLoopControlINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public LiteralInteger LoopControlParameters => Inner.GetOperand<LiteralInteger>("loopControlParameters") ?? default;

    public OpLoopControlINTEL(RefInstruction instruction) => Inner = instruction;
    public OpLoopControlINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpLoopControlINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpLoopControlINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpLoopControlINTEL(Span<int> buffer) => new OpLoopControlINTEL(buffer);
    public static implicit operator OpLoopControlINTEL(Instruction instruction) => new OpLoopControlINTEL(instruction.AsRef());
    public static implicit operator OpLoopControlINTEL(RefInstruction instruction) => new OpLoopControlINTEL(instruction);
}

public ref struct OpAliasDomainDeclINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Name => Inner.GetOperand<IdRef>("name") ?? default;

    public OpAliasDomainDeclINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAliasDomainDeclINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAliasDomainDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAliasDomainDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAliasDomainDeclINTEL(Span<int> buffer) => new OpAliasDomainDeclINTEL(buffer);
    public static implicit operator OpAliasDomainDeclINTEL(Instruction instruction) => new OpAliasDomainDeclINTEL(instruction.AsRef());
    public static implicit operator OpAliasDomainDeclINTEL(RefInstruction instruction) => new OpAliasDomainDeclINTEL(instruction);
}

public ref struct OpAliasScopeDeclINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef AliasDomain => Inner.GetOperand<IdRef>("aliasDomain") ?? default;
    public IdRef Name => Inner.GetOperand<IdRef>("name") ?? default;

    public OpAliasScopeDeclINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAliasScopeDeclINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAliasScopeDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAliasScopeDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAliasScopeDeclINTEL(Span<int> buffer) => new OpAliasScopeDeclINTEL(buffer);
    public static implicit operator OpAliasScopeDeclINTEL(Instruction instruction) => new OpAliasScopeDeclINTEL(instruction.AsRef());
    public static implicit operator OpAliasScopeDeclINTEL(RefInstruction instruction) => new OpAliasScopeDeclINTEL(instruction);
}

public ref struct OpAliasScopeListDeclINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef AliasScope1AliasScope2 => Inner.GetOperand<IdRef>("aliasScope1AliasScope2") ?? default;

    public OpAliasScopeListDeclINTEL(RefInstruction instruction) => Inner = instruction;
    public OpAliasScopeListDeclINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAliasScopeListDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAliasScopeListDeclINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAliasScopeListDeclINTEL(Span<int> buffer) => new OpAliasScopeListDeclINTEL(buffer);
    public static implicit operator OpAliasScopeListDeclINTEL(Instruction instruction) => new OpAliasScopeListDeclINTEL(instruction.AsRef());
    public static implicit operator OpAliasScopeListDeclINTEL(RefInstruction instruction) => new OpAliasScopeListDeclINTEL(instruction);
}

public ref struct OpFixedSqrtINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedSqrtINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedSqrtINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedSqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedSqrtINTEL(Span<int> buffer) => new OpFixedSqrtINTEL(buffer);
    public static implicit operator OpFixedSqrtINTEL(Instruction instruction) => new OpFixedSqrtINTEL(instruction.AsRef());
    public static implicit operator OpFixedSqrtINTEL(RefInstruction instruction) => new OpFixedSqrtINTEL(instruction);
}

public ref struct OpFixedRecipINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedRecipINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedRecipINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedRecipINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedRecipINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedRecipINTEL(Span<int> buffer) => new OpFixedRecipINTEL(buffer);
    public static implicit operator OpFixedRecipINTEL(Instruction instruction) => new OpFixedRecipINTEL(instruction.AsRef());
    public static implicit operator OpFixedRecipINTEL(RefInstruction instruction) => new OpFixedRecipINTEL(instruction);
}

public ref struct OpFixedRsqrtINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedRsqrtINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedRsqrtINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedRsqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedRsqrtINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedRsqrtINTEL(Span<int> buffer) => new OpFixedRsqrtINTEL(buffer);
    public static implicit operator OpFixedRsqrtINTEL(Instruction instruction) => new OpFixedRsqrtINTEL(instruction.AsRef());
    public static implicit operator OpFixedRsqrtINTEL(RefInstruction instruction) => new OpFixedRsqrtINTEL(instruction);
}

public ref struct OpFixedSinINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedSinINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedSinINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedSinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedSinINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedSinINTEL(Span<int> buffer) => new OpFixedSinINTEL(buffer);
    public static implicit operator OpFixedSinINTEL(Instruction instruction) => new OpFixedSinINTEL(instruction.AsRef());
    public static implicit operator OpFixedSinINTEL(RefInstruction instruction) => new OpFixedSinINTEL(instruction);
}

public ref struct OpFixedCosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedCosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedCosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedCosINTEL(Span<int> buffer) => new OpFixedCosINTEL(buffer);
    public static implicit operator OpFixedCosINTEL(Instruction instruction) => new OpFixedCosINTEL(instruction.AsRef());
    public static implicit operator OpFixedCosINTEL(RefInstruction instruction) => new OpFixedCosINTEL(instruction);
}

public ref struct OpFixedSinCosINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedSinCosINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedSinCosINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedSinCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedSinCosINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedSinCosINTEL(Span<int> buffer) => new OpFixedSinCosINTEL(buffer);
    public static implicit operator OpFixedSinCosINTEL(Instruction instruction) => new OpFixedSinCosINTEL(instruction.AsRef());
    public static implicit operator OpFixedSinCosINTEL(RefInstruction instruction) => new OpFixedSinCosINTEL(instruction);
}

public ref struct OpFixedSinPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedSinPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedSinPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedSinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedSinPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedSinPiINTEL(Span<int> buffer) => new OpFixedSinPiINTEL(buffer);
    public static implicit operator OpFixedSinPiINTEL(Instruction instruction) => new OpFixedSinPiINTEL(instruction.AsRef());
    public static implicit operator OpFixedSinPiINTEL(RefInstruction instruction) => new OpFixedSinPiINTEL(instruction);
}

public ref struct OpFixedCosPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedCosPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedCosPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedCosPiINTEL(Span<int> buffer) => new OpFixedCosPiINTEL(buffer);
    public static implicit operator OpFixedCosPiINTEL(Instruction instruction) => new OpFixedCosPiINTEL(instruction.AsRef());
    public static implicit operator OpFixedCosPiINTEL(RefInstruction instruction) => new OpFixedCosPiINTEL(instruction);
}

public ref struct OpFixedSinCosPiINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedSinCosPiINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedSinCosPiINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedSinCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedSinCosPiINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedSinCosPiINTEL(Span<int> buffer) => new OpFixedSinCosPiINTEL(buffer);
    public static implicit operator OpFixedSinCosPiINTEL(Instruction instruction) => new OpFixedSinCosPiINTEL(instruction.AsRef());
    public static implicit operator OpFixedSinCosPiINTEL(RefInstruction instruction) => new OpFixedSinCosPiINTEL(instruction);
}

public ref struct OpFixedLogINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedLogINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedLogINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedLogINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedLogINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedLogINTEL(Span<int> buffer) => new OpFixedLogINTEL(buffer);
    public static implicit operator OpFixedLogINTEL(Instruction instruction) => new OpFixedLogINTEL(instruction.AsRef());
    public static implicit operator OpFixedLogINTEL(RefInstruction instruction) => new OpFixedLogINTEL(instruction);
}

public ref struct OpFixedExpINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef InputType => Inner.GetOperand<IdRef>("inputType") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;
    public LiteralInteger S => Inner.GetOperand<LiteralInteger>("s") ?? default;
    public LiteralInteger I => Inner.GetOperand<LiteralInteger>("i") ?? default;
    public LiteralInteger RI => Inner.GetOperand<LiteralInteger>("rI") ?? default;
    public LiteralInteger Q => Inner.GetOperand<LiteralInteger>("q") ?? default;
    public LiteralInteger O => Inner.GetOperand<LiteralInteger>("o") ?? default;

    public OpFixedExpINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFixedExpINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFixedExpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFixedExpINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFixedExpINTEL(Span<int> buffer) => new OpFixedExpINTEL(buffer);
    public static implicit operator OpFixedExpINTEL(Instruction instruction) => new OpFixedExpINTEL(instruction.AsRef());
    public static implicit operator OpFixedExpINTEL(RefInstruction instruction) => new OpFixedExpINTEL(instruction);
}

public ref struct OpPtrCastToCrossWorkgroupINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpPtrCastToCrossWorkgroupINTEL(RefInstruction instruction) => Inner = instruction;
    public OpPtrCastToCrossWorkgroupINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpPtrCastToCrossWorkgroupINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpPtrCastToCrossWorkgroupINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpPtrCastToCrossWorkgroupINTEL(Span<int> buffer) => new OpPtrCastToCrossWorkgroupINTEL(buffer);
    public static implicit operator OpPtrCastToCrossWorkgroupINTEL(Instruction instruction) => new OpPtrCastToCrossWorkgroupINTEL(instruction.AsRef());
    public static implicit operator OpPtrCastToCrossWorkgroupINTEL(RefInstruction instruction) => new OpPtrCastToCrossWorkgroupINTEL(instruction);
}

public ref struct OpCrossWorkgroupCastToPtrINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;

    public OpCrossWorkgroupCastToPtrINTEL(RefInstruction instruction) => Inner = instruction;
    public OpCrossWorkgroupCastToPtrINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCrossWorkgroupCastToPtrINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCrossWorkgroupCastToPtrINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCrossWorkgroupCastToPtrINTEL(Span<int> buffer) => new OpCrossWorkgroupCastToPtrINTEL(buffer);
    public static implicit operator OpCrossWorkgroupCastToPtrINTEL(Instruction instruction) => new OpCrossWorkgroupCastToPtrINTEL(instruction.AsRef());
    public static implicit operator OpCrossWorkgroupCastToPtrINTEL(RefInstruction instruction) => new OpCrossWorkgroupCastToPtrINTEL(instruction);
}

public ref struct OpReadPipeBlockingINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpReadPipeBlockingINTEL(RefInstruction instruction) => Inner = instruction;
    public OpReadPipeBlockingINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpReadPipeBlockingINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpReadPipeBlockingINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpReadPipeBlockingINTEL(Span<int> buffer) => new OpReadPipeBlockingINTEL(buffer);
    public static implicit operator OpReadPipeBlockingINTEL(Instruction instruction) => new OpReadPipeBlockingINTEL(instruction.AsRef());
    public static implicit operator OpReadPipeBlockingINTEL(RefInstruction instruction) => new OpReadPipeBlockingINTEL(instruction);
}

public ref struct OpWritePipeBlockingINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PacketSize => Inner.GetOperand<IdRef>("packetSize") ?? default;
    public IdRef PacketAlignment => Inner.GetOperand<IdRef>("packetAlignment") ?? default;

    public OpWritePipeBlockingINTEL(RefInstruction instruction) => Inner = instruction;
    public OpWritePipeBlockingINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpWritePipeBlockingINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpWritePipeBlockingINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpWritePipeBlockingINTEL(Span<int> buffer) => new OpWritePipeBlockingINTEL(buffer);
    public static implicit operator OpWritePipeBlockingINTEL(Instruction instruction) => new OpWritePipeBlockingINTEL(instruction.AsRef());
    public static implicit operator OpWritePipeBlockingINTEL(RefInstruction instruction) => new OpWritePipeBlockingINTEL(instruction);
}

public ref struct OpFPGARegINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Result => Inner.GetOperand<IdRef>("result") ?? default;
    public IdRef Input => Inner.GetOperand<IdRef>("input") ?? default;

    public OpFPGARegINTEL(RefInstruction instruction) => Inner = instruction;
    public OpFPGARegINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpFPGARegINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpFPGARegINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpFPGARegINTEL(Span<int> buffer) => new OpFPGARegINTEL(buffer);
    public static implicit operator OpFPGARegINTEL(Instruction instruction) => new OpFPGARegINTEL(instruction.AsRef());
    public static implicit operator OpFPGARegINTEL(RefInstruction instruction) => new OpFPGARegINTEL(instruction);
}

public ref struct OpRayQueryGetRayTMinKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryGetRayTMinKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetRayTMinKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetRayTMinKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetRayTMinKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetRayTMinKHR(Span<int> buffer) => new OpRayQueryGetRayTMinKHR(buffer);
    public static implicit operator OpRayQueryGetRayTMinKHR(Instruction instruction) => new OpRayQueryGetRayTMinKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetRayTMinKHR(RefInstruction instruction) => new OpRayQueryGetRayTMinKHR(instruction);
}

public ref struct OpRayQueryGetRayFlagsKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryGetRayFlagsKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetRayFlagsKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetRayFlagsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetRayFlagsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetRayFlagsKHR(Span<int> buffer) => new OpRayQueryGetRayFlagsKHR(buffer);
    public static implicit operator OpRayQueryGetRayFlagsKHR(Instruction instruction) => new OpRayQueryGetRayFlagsKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetRayFlagsKHR(RefInstruction instruction) => new OpRayQueryGetRayFlagsKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionTKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionTKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionTKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionTKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionTKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionTKHR(Span<int> buffer) => new OpRayQueryGetIntersectionTKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionTKHR(Instruction instruction) => new OpRayQueryGetIntersectionTKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionTKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionTKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionInstanceCustomIndexKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionInstanceCustomIndexKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionInstanceCustomIndexKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionInstanceCustomIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionInstanceCustomIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionInstanceCustomIndexKHR(Span<int> buffer) => new OpRayQueryGetIntersectionInstanceCustomIndexKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionInstanceCustomIndexKHR(Instruction instruction) => new OpRayQueryGetIntersectionInstanceCustomIndexKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionInstanceCustomIndexKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionInstanceCustomIndexKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionInstanceIdKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionInstanceIdKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionInstanceIdKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionInstanceIdKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionInstanceIdKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionInstanceIdKHR(Span<int> buffer) => new OpRayQueryGetIntersectionInstanceIdKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionInstanceIdKHR(Instruction instruction) => new OpRayQueryGetIntersectionInstanceIdKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionInstanceIdKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionInstanceIdKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(Span<int> buffer) => new OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(Instruction instruction) => new OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionInstanceShaderBindingTableRecordOffsetKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionGeometryIndexKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionGeometryIndexKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionGeometryIndexKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionGeometryIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionGeometryIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionGeometryIndexKHR(Span<int> buffer) => new OpRayQueryGetIntersectionGeometryIndexKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionGeometryIndexKHR(Instruction instruction) => new OpRayQueryGetIntersectionGeometryIndexKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionGeometryIndexKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionGeometryIndexKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionPrimitiveIndexKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionPrimitiveIndexKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionPrimitiveIndexKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionPrimitiveIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionPrimitiveIndexKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionPrimitiveIndexKHR(Span<int> buffer) => new OpRayQueryGetIntersectionPrimitiveIndexKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionPrimitiveIndexKHR(Instruction instruction) => new OpRayQueryGetIntersectionPrimitiveIndexKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionPrimitiveIndexKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionPrimitiveIndexKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionBarycentricsKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionBarycentricsKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionBarycentricsKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionBarycentricsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionBarycentricsKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionBarycentricsKHR(Span<int> buffer) => new OpRayQueryGetIntersectionBarycentricsKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionBarycentricsKHR(Instruction instruction) => new OpRayQueryGetIntersectionBarycentricsKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionBarycentricsKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionBarycentricsKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionFrontFaceKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionFrontFaceKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionFrontFaceKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionFrontFaceKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionFrontFaceKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionFrontFaceKHR(Span<int> buffer) => new OpRayQueryGetIntersectionFrontFaceKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionFrontFaceKHR(Instruction instruction) => new OpRayQueryGetIntersectionFrontFaceKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionFrontFaceKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionFrontFaceKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionCandidateAABBOpaqueKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionCandidateAABBOpaqueKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionCandidateAABBOpaqueKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(Span<int> buffer) => new OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(Instruction instruction) => new OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionCandidateAABBOpaqueKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionObjectRayDirectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionObjectRayDirectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionObjectRayDirectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionObjectRayDirectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionObjectRayDirectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionObjectRayDirectionKHR(Span<int> buffer) => new OpRayQueryGetIntersectionObjectRayDirectionKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionObjectRayDirectionKHR(Instruction instruction) => new OpRayQueryGetIntersectionObjectRayDirectionKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionObjectRayDirectionKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionObjectRayDirectionKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionObjectRayOriginKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionObjectRayOriginKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionObjectRayOriginKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionObjectRayOriginKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionObjectRayOriginKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionObjectRayOriginKHR(Span<int> buffer) => new OpRayQueryGetIntersectionObjectRayOriginKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionObjectRayOriginKHR(Instruction instruction) => new OpRayQueryGetIntersectionObjectRayOriginKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionObjectRayOriginKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionObjectRayOriginKHR(instruction);
}

public ref struct OpRayQueryGetWorldRayDirectionKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryGetWorldRayDirectionKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetWorldRayDirectionKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetWorldRayDirectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetWorldRayDirectionKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetWorldRayDirectionKHR(Span<int> buffer) => new OpRayQueryGetWorldRayDirectionKHR(buffer);
    public static implicit operator OpRayQueryGetWorldRayDirectionKHR(Instruction instruction) => new OpRayQueryGetWorldRayDirectionKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetWorldRayDirectionKHR(RefInstruction instruction) => new OpRayQueryGetWorldRayDirectionKHR(instruction);
}

public ref struct OpRayQueryGetWorldRayOriginKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;

    public OpRayQueryGetWorldRayOriginKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetWorldRayOriginKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetWorldRayOriginKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetWorldRayOriginKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetWorldRayOriginKHR(Span<int> buffer) => new OpRayQueryGetWorldRayOriginKHR(buffer);
    public static implicit operator OpRayQueryGetWorldRayOriginKHR(Instruction instruction) => new OpRayQueryGetWorldRayOriginKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetWorldRayOriginKHR(RefInstruction instruction) => new OpRayQueryGetWorldRayOriginKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionObjectToWorldKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionObjectToWorldKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionObjectToWorldKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionObjectToWorldKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionObjectToWorldKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionObjectToWorldKHR(Span<int> buffer) => new OpRayQueryGetIntersectionObjectToWorldKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionObjectToWorldKHR(Instruction instruction) => new OpRayQueryGetIntersectionObjectToWorldKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionObjectToWorldKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionObjectToWorldKHR(instruction);
}

public ref struct OpRayQueryGetIntersectionWorldToObjectKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef RayQuery => Inner.GetOperand<IdRef>("rayQuery") ?? default;
    public IdRef Intersection => Inner.GetOperand<IdRef>("intersection") ?? default;

    public OpRayQueryGetIntersectionWorldToObjectKHR(RefInstruction instruction) => Inner = instruction;
    public OpRayQueryGetIntersectionWorldToObjectKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpRayQueryGetIntersectionWorldToObjectKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpRayQueryGetIntersectionWorldToObjectKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpRayQueryGetIntersectionWorldToObjectKHR(Span<int> buffer) => new OpRayQueryGetIntersectionWorldToObjectKHR(buffer);
    public static implicit operator OpRayQueryGetIntersectionWorldToObjectKHR(Instruction instruction) => new OpRayQueryGetIntersectionWorldToObjectKHR(instruction.AsRef());
    public static implicit operator OpRayQueryGetIntersectionWorldToObjectKHR(RefInstruction instruction) => new OpRayQueryGetIntersectionWorldToObjectKHR(instruction);
}

public ref struct OpAtomicFAddEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Pointer => Inner.GetOperand<IdRef>("pointer") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;
    public IdRef Value => Inner.GetOperand<IdRef>("value") ?? default;

    public OpAtomicFAddEXT(RefInstruction instruction) => Inner = instruction;
    public OpAtomicFAddEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpAtomicFAddEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpAtomicFAddEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpAtomicFAddEXT(Span<int> buffer) => new OpAtomicFAddEXT(buffer);
    public static implicit operator OpAtomicFAddEXT(Instruction instruction) => new OpAtomicFAddEXT(instruction.AsRef());
    public static implicit operator OpAtomicFAddEXT(RefInstruction instruction) => new OpAtomicFAddEXT(instruction);
}

public ref struct OpTypeBufferSurfaceINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public AccessQualifier AccessQualifier => Inner.GetEnumOperand<AccessQualifier>("accessQualifier");

    public OpTypeBufferSurfaceINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeBufferSurfaceINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeBufferSurfaceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeBufferSurfaceINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeBufferSurfaceINTEL(Span<int> buffer) => new OpTypeBufferSurfaceINTEL(buffer);
    public static implicit operator OpTypeBufferSurfaceINTEL(Instruction instruction) => new OpTypeBufferSurfaceINTEL(instruction.AsRef());
    public static implicit operator OpTypeBufferSurfaceINTEL(RefInstruction instruction) => new OpTypeBufferSurfaceINTEL(instruction);
}

public ref struct OpTypeStructContinuedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Member0typemember1type => Inner.GetOperand<IdRef>("member0typemember1type") ?? default;

    public OpTypeStructContinuedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpTypeStructContinuedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpTypeStructContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpTypeStructContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpTypeStructContinuedINTEL(Span<int> buffer) => new OpTypeStructContinuedINTEL(buffer);
    public static implicit operator OpTypeStructContinuedINTEL(Instruction instruction) => new OpTypeStructContinuedINTEL(instruction.AsRef());
    public static implicit operator OpTypeStructContinuedINTEL(RefInstruction instruction) => new OpTypeStructContinuedINTEL(instruction);
}

public ref struct OpConstantCompositeContinuedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpConstantCompositeContinuedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpConstantCompositeContinuedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConstantCompositeContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConstantCompositeContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConstantCompositeContinuedINTEL(Span<int> buffer) => new OpConstantCompositeContinuedINTEL(buffer);
    public static implicit operator OpConstantCompositeContinuedINTEL(Instruction instruction) => new OpConstantCompositeContinuedINTEL(instruction.AsRef());
    public static implicit operator OpConstantCompositeContinuedINTEL(RefInstruction instruction) => new OpConstantCompositeContinuedINTEL(instruction);
}

public ref struct OpSpecConstantCompositeContinuedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpSpecConstantCompositeContinuedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSpecConstantCompositeContinuedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSpecConstantCompositeContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSpecConstantCompositeContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSpecConstantCompositeContinuedINTEL(Span<int> buffer) => new OpSpecConstantCompositeContinuedINTEL(buffer);
    public static implicit operator OpSpecConstantCompositeContinuedINTEL(Instruction instruction) => new OpSpecConstantCompositeContinuedINTEL(instruction.AsRef());
    public static implicit operator OpSpecConstantCompositeContinuedINTEL(RefInstruction instruction) => new OpSpecConstantCompositeContinuedINTEL(instruction);
}

public ref struct OpCompositeConstructContinuedINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Constituents => Inner.GetOperand<IdRef>("constituents") ?? default;

    public OpCompositeConstructContinuedINTEL(RefInstruction instruction) => Inner = instruction;
    public OpCompositeConstructContinuedINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpCompositeConstructContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpCompositeConstructContinuedINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpCompositeConstructContinuedINTEL(Span<int> buffer) => new OpCompositeConstructContinuedINTEL(buffer);
    public static implicit operator OpCompositeConstructContinuedINTEL(Instruction instruction) => new OpCompositeConstructContinuedINTEL(instruction.AsRef());
    public static implicit operator OpCompositeConstructContinuedINTEL(RefInstruction instruction) => new OpCompositeConstructContinuedINTEL(instruction);
}

public ref struct OpConvertFToBF16INTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef FloatValue => Inner.GetOperand<IdRef>("floatValue") ?? default;

    public OpConvertFToBF16INTEL(RefInstruction instruction) => Inner = instruction;
    public OpConvertFToBF16INTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertFToBF16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertFToBF16INTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertFToBF16INTEL(Span<int> buffer) => new OpConvertFToBF16INTEL(buffer);
    public static implicit operator OpConvertFToBF16INTEL(Instruction instruction) => new OpConvertFToBF16INTEL(instruction.AsRef());
    public static implicit operator OpConvertFToBF16INTEL(RefInstruction instruction) => new OpConvertFToBF16INTEL(instruction);
}

public ref struct OpConvertBF16ToFINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef BFloat16Value => Inner.GetOperand<IdRef>("bFloat16Value") ?? default;

    public OpConvertBF16ToFINTEL(RefInstruction instruction) => Inner = instruction;
    public OpConvertBF16ToFINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpConvertBF16ToFINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpConvertBF16ToFINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpConvertBF16ToFINTEL(Span<int> buffer) => new OpConvertBF16ToFINTEL(buffer);
    public static implicit operator OpConvertBF16ToFINTEL(Instruction instruction) => new OpConvertBF16ToFINTEL(instruction.AsRef());
    public static implicit operator OpConvertBF16ToFINTEL(RefInstruction instruction) => new OpConvertBF16ToFINTEL(instruction);
}

public ref struct OpControlBarrierArriveINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpControlBarrierArriveINTEL(RefInstruction instruction) => Inner = instruction;
    public OpControlBarrierArriveINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpControlBarrierArriveINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpControlBarrierArriveINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpControlBarrierArriveINTEL(Span<int> buffer) => new OpControlBarrierArriveINTEL(buffer);
    public static implicit operator OpControlBarrierArriveINTEL(Instruction instruction) => new OpControlBarrierArriveINTEL(instruction.AsRef());
    public static implicit operator OpControlBarrierArriveINTEL(RefInstruction instruction) => new OpControlBarrierArriveINTEL(instruction);
}

public ref struct OpControlBarrierWaitINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public IdScope Memory => Inner.GetOperand<IdScope>("memory") ?? default;
    public IdMemorySemantics Semantics => Inner.GetOperand<IdMemorySemantics>("semantics") ?? default;

    public OpControlBarrierWaitINTEL(RefInstruction instruction) => Inner = instruction;
    public OpControlBarrierWaitINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpControlBarrierWaitINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpControlBarrierWaitINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpControlBarrierWaitINTEL(Span<int> buffer) => new OpControlBarrierWaitINTEL(buffer);
    public static implicit operator OpControlBarrierWaitINTEL(Instruction instruction) => new OpControlBarrierWaitINTEL(instruction.AsRef());
    public static implicit operator OpControlBarrierWaitINTEL(RefInstruction instruction) => new OpControlBarrierWaitINTEL(instruction);
}

public ref struct OpArithmeticFenceEXT : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef Target => Inner.GetOperand<IdRef>("target") ?? default;

    public OpArithmeticFenceEXT(RefInstruction instruction) => Inner = instruction;
    public OpArithmeticFenceEXT(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpArithmeticFenceEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpArithmeticFenceEXT instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpArithmeticFenceEXT(Span<int> buffer) => new OpArithmeticFenceEXT(buffer);
    public static implicit operator OpArithmeticFenceEXT(Instruction instruction) => new OpArithmeticFenceEXT(instruction.AsRef());
    public static implicit operator OpArithmeticFenceEXT(RefInstruction instruction) => new OpArithmeticFenceEXT(instruction);
}

public ref struct OpSubgroupBlockPrefetchINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef Ptr => Inner.GetOperand<IdRef>("ptr") ?? default;
    public IdRef NumBytes => Inner.GetOperand<IdRef>("numBytes") ?? default;
    public MemoryAccessMask MemoryAccess => Inner.GetEnumOperand<MemoryAccessMask>("memoryaccess");

    public OpSubgroupBlockPrefetchINTEL(RefInstruction instruction) => Inner = instruction;
    public OpSubgroupBlockPrefetchINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpSubgroupBlockPrefetchINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpSubgroupBlockPrefetchINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpSubgroupBlockPrefetchINTEL(Span<int> buffer) => new OpSubgroupBlockPrefetchINTEL(buffer);
    public static implicit operator OpSubgroupBlockPrefetchINTEL(Instruction instruction) => new OpSubgroupBlockPrefetchINTEL(instruction.AsRef());
    public static implicit operator OpSubgroupBlockPrefetchINTEL(RefInstruction instruction) => new OpSubgroupBlockPrefetchINTEL(instruction);
}

public ref struct OpGroupIMulKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupIMulKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupIMulKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupIMulKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupIMulKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupIMulKHR(Span<int> buffer) => new OpGroupIMulKHR(buffer);
    public static implicit operator OpGroupIMulKHR(Instruction instruction) => new OpGroupIMulKHR(instruction.AsRef());
    public static implicit operator OpGroupIMulKHR(RefInstruction instruction) => new OpGroupIMulKHR(instruction);
}

public ref struct OpGroupFMulKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupFMulKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupFMulKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupFMulKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupFMulKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupFMulKHR(Span<int> buffer) => new OpGroupFMulKHR(buffer);
    public static implicit operator OpGroupFMulKHR(Instruction instruction) => new OpGroupFMulKHR(instruction.AsRef());
    public static implicit operator OpGroupFMulKHR(RefInstruction instruction) => new OpGroupFMulKHR(instruction);
}

public ref struct OpGroupBitwiseAndKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupBitwiseAndKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupBitwiseAndKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupBitwiseAndKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupBitwiseAndKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupBitwiseAndKHR(Span<int> buffer) => new OpGroupBitwiseAndKHR(buffer);
    public static implicit operator OpGroupBitwiseAndKHR(Instruction instruction) => new OpGroupBitwiseAndKHR(instruction.AsRef());
    public static implicit operator OpGroupBitwiseAndKHR(RefInstruction instruction) => new OpGroupBitwiseAndKHR(instruction);
}

public ref struct OpGroupBitwiseOrKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupBitwiseOrKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupBitwiseOrKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupBitwiseOrKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupBitwiseOrKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupBitwiseOrKHR(Span<int> buffer) => new OpGroupBitwiseOrKHR(buffer);
    public static implicit operator OpGroupBitwiseOrKHR(Instruction instruction) => new OpGroupBitwiseOrKHR(instruction.AsRef());
    public static implicit operator OpGroupBitwiseOrKHR(RefInstruction instruction) => new OpGroupBitwiseOrKHR(instruction);
}

public ref struct OpGroupBitwiseXorKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupBitwiseXorKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupBitwiseXorKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupBitwiseXorKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupBitwiseXorKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupBitwiseXorKHR(Span<int> buffer) => new OpGroupBitwiseXorKHR(buffer);
    public static implicit operator OpGroupBitwiseXorKHR(Instruction instruction) => new OpGroupBitwiseXorKHR(instruction.AsRef());
    public static implicit operator OpGroupBitwiseXorKHR(RefInstruction instruction) => new OpGroupBitwiseXorKHR(instruction);
}

public ref struct OpGroupLogicalAndKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupLogicalAndKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupLogicalAndKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupLogicalAndKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupLogicalAndKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupLogicalAndKHR(Span<int> buffer) => new OpGroupLogicalAndKHR(buffer);
    public static implicit operator OpGroupLogicalAndKHR(Instruction instruction) => new OpGroupLogicalAndKHR(instruction.AsRef());
    public static implicit operator OpGroupLogicalAndKHR(RefInstruction instruction) => new OpGroupLogicalAndKHR(instruction);
}

public ref struct OpGroupLogicalOrKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupLogicalOrKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupLogicalOrKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupLogicalOrKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupLogicalOrKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupLogicalOrKHR(Span<int> buffer) => new OpGroupLogicalOrKHR(buffer);
    public static implicit operator OpGroupLogicalOrKHR(Instruction instruction) => new OpGroupLogicalOrKHR(instruction.AsRef());
    public static implicit operator OpGroupLogicalOrKHR(RefInstruction instruction) => new OpGroupLogicalOrKHR(instruction);
}

public ref struct OpGroupLogicalXorKHR : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdScope Execution => Inner.GetOperand<IdScope>("execution") ?? default;
    public GroupOperation Operation => Inner.GetEnumOperand<GroupOperation>("operation");
    public IdRef X => Inner.GetOperand<IdRef>("x") ?? default;

    public OpGroupLogicalXorKHR(RefInstruction instruction) => Inner = instruction;
    public OpGroupLogicalXorKHR(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpGroupLogicalXorKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpGroupLogicalXorKHR instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpGroupLogicalXorKHR(Span<int> buffer) => new OpGroupLogicalXorKHR(buffer);
    public static implicit operator OpGroupLogicalXorKHR(Instruction instruction) => new OpGroupLogicalXorKHR(instruction.AsRef());
    public static implicit operator OpGroupLogicalXorKHR(RefInstruction instruction) => new OpGroupLogicalXorKHR(instruction);
}

public ref struct OpMaskedGatherINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdResultType ResultType => Inner.GetOperand<IdResultType>("resultType") ?? default;
    public IdResult ResultId => Inner.GetOperand<IdResult>("resultId") ?? default;
    public IdRef PtrVector => Inner.GetOperand<IdRef>("ptrVector") ?? default;
    public LiteralInteger Alignment => Inner.GetOperand<LiteralInteger>("alignment") ?? default;
    public IdRef Mask => Inner.GetOperand<IdRef>("mask") ?? default;
    public IdRef FillEmpty => Inner.GetOperand<IdRef>("fillEmpty") ?? default;

    public OpMaskedGatherINTEL(RefInstruction instruction) => Inner = instruction;
    public OpMaskedGatherINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMaskedGatherINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMaskedGatherINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMaskedGatherINTEL(Span<int> buffer) => new OpMaskedGatherINTEL(buffer);
    public static implicit operator OpMaskedGatherINTEL(Instruction instruction) => new OpMaskedGatherINTEL(instruction.AsRef());
    public static implicit operator OpMaskedGatherINTEL(RefInstruction instruction) => new OpMaskedGatherINTEL(instruction);
}

public ref struct OpMaskedScatterINTEL : IWrapperInstruction
{
    public RefInstruction Inner { get; set; }
    public int WordCount => Inner.WordCount;
    public IdRef InputVector => Inner.GetOperand<IdRef>("inputVector") ?? default;
    public IdRef PtrVector => Inner.GetOperand<IdRef>("ptrVector") ?? default;
    public LiteralInteger Alignment => Inner.GetOperand<LiteralInteger>("alignment") ?? default;
    public IdRef Mask => Inner.GetOperand<IdRef>("mask") ?? default;

    public OpMaskedScatterINTEL(RefInstruction instruction) => Inner = instruction;
    public OpMaskedScatterINTEL(Span<int> buffer) => Inner = RefInstruction.ParseRef(buffer);
    public static implicit operator IdRef(OpMaskedScatterINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator IdResultType(OpMaskedScatterINTEL instruction) => new(instruction.Inner.ResultId ?? throw new Exception("Instruction has no result id"));
    public static implicit operator OpMaskedScatterINTEL(Span<int> buffer) => new OpMaskedScatterINTEL(buffer);
    public static implicit operator OpMaskedScatterINTEL(Instruction instruction) => new OpMaskedScatterINTEL(instruction.AsRef());
    public static implicit operator OpMaskedScatterINTEL(RefInstruction instruction) => new OpMaskedScatterINTEL(instruction);
}