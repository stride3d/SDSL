using static Stride.Shaders.Spirv.Specification;

namespace Stride.Shaders.Spirv.Core;
public static class ParameterizedFlags
{
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsBias(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Bias, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsLod(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Lod, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsGrad(int idRef0, int idRef1) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Grad, [idRef0, idRef1]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsConstOffset(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.ConstOffset, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsOffset(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Offset, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsConstOffsets(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.ConstOffsets, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsSample(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Sample, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsMinLod(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.MinLod, [idRef0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsMakeTexelAvailable(int idscope0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.MakeTexelAvailable, [idscope0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsMakeTexelVisible(int idscope0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.MakeTexelVisible, [idscope0]);
    public static ParameterizedFlag<ImageOperandsMask> ImageOperandsOffsets(int idRef0) => new ParameterizedFlag<ImageOperandsMask>(ImageOperandsMask.Offsets, [idRef0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlDependencyLength(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.DependencyLength, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlMinIterations(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.MinIterations, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlMaxIterations(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.MaxIterations, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlIterationMultiple(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.IterationMultiple, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlPeelCount(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.PeelCount, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlPartialCount(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.PartialCount, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlInitiationIntervalINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.InitiationIntervalINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlMaxConcurrencyINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.MaxConcurrencyINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlDependencyArrayINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.DependencyArrayINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlPipelineEnableINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.PipelineEnableINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlLoopCoalesceINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.LoopCoalesceINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlMaxInterleavingINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.MaxInterleavingINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlSpeculatedIterationsINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.SpeculatedIterationsINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlLoopCountINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.LoopCountINTEL, [literalinteger0]);
    public static ParameterizedFlag<LoopControlMask> LoopControlMaxReinvocationDelayINTEL(int literalinteger0) => new ParameterizedFlag<LoopControlMask>(LoopControlMask.MaxReinvocationDelayINTEL, [literalinteger0]);
    public static ParameterizedFlag<MemoryAccessMask> MemoryAccessAligned(int literalinteger0) => new ParameterizedFlag<MemoryAccessMask>(MemoryAccessMask.Aligned, [literalinteger0]);
    public static ParameterizedFlag<MemoryAccessMask> MemoryAccessMakePointerAvailable(int idscope0) => new ParameterizedFlag<MemoryAccessMask>(MemoryAccessMask.MakePointerAvailable, [idscope0]);
    public static ParameterizedFlag<MemoryAccessMask> MemoryAccessMakePointerVisible(int idscope0) => new ParameterizedFlag<MemoryAccessMask>(MemoryAccessMask.MakePointerVisible, [idscope0]);
    public static ParameterizedFlag<MemoryAccessMask> MemoryAccessAliasScopeINTELMask(int idRef0) => new ParameterizedFlag<MemoryAccessMask>(MemoryAccessMask.AliasScopeINTELMask, [idRef0]);
    public static ParameterizedFlag<MemoryAccessMask> MemoryAccessNoAliasINTELMask(int idRef0) => new ParameterizedFlag<MemoryAccessMask>(MemoryAccessMask.NoAliasINTELMask, [idRef0]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeInvocations(int numberofInvocationinvocations) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.Invocations, [numberofInvocationinvocations]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeLocalSize(int xsize, int ysize, int zsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.LocalSize, [xsize, ysize, zsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeLocalSizeHint(int xsize, int ysize, int zsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.LocalSizeHint, [xsize, ysize, zsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeOutputVertices(int vertexcount) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.OutputVertices, [vertexcount]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeVecTypeHint(int vectortype) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.VecTypeHint, [vectortype]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSubgroupSize(int subgroupSize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SubgroupSize, [subgroupSize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSubgroupsPerWorkgroup(int subgroupsPerWorkgroup) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SubgroupsPerWorkgroup, [subgroupsPerWorkgroup]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSubgroupsPerWorkgroupId(int subgroupsPerWorkgroup) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SubgroupsPerWorkgroupId, [subgroupsPerWorkgroup]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeLocalSizeId(int xsize, int ysize, int zsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.LocalSizeId, [xsize, ysize, zsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeLocalSizeHintId(int xsizehint, int ysizehint, int zsizehint) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.LocalSizeHintId, [xsizehint, ysizehint, zsizehint]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeDenormPreserve(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.DenormPreserve, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeDenormFlushToZero(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.DenormFlushToZero, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSignedZeroInfNanPreserve(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SignedZeroInfNanPreserve, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeRoundingModeRTE(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.RoundingModeRTE, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeRoundingModeRTZ(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.RoundingModeRTZ, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeIsApiEntryAMDX(int isEntry) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.IsApiEntryAMDX, [isEntry]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaxNodeRecursionAMDX(int numberofrecursions) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaxNodeRecursionAMDX, [numberofrecursions]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeStaticNumWorkgroupsAMDX(int xsize, int ysize, int zsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.StaticNumWorkgroupsAMDX, [xsize, ysize, zsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeShaderIndexAMDX(int shaderIndex) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.ShaderIndexAMDX, [shaderIndex]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaxNumWorkgroupsAMDX(int xsize, int ysize, int zsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaxNumWorkgroupsAMDX, [xsize, ysize, zsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSharesInputWithAMDX(int nodeName, int shaderIndex) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SharesInputWithAMDX, [nodeName, shaderIndex]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeOutputPrimitivesEXT(int primitivecount) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.OutputPrimitivesEXT, [primitivecount]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSharedLocalMemorySizeINTEL(int size) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SharedLocalMemorySizeINTEL, [size]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeRoundingModeRTPINTEL(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.RoundingModeRTPINTEL, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeRoundingModeRTNINTEL(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.RoundingModeRTNINTEL, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeFloatingPointModeALTINTEL(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.FloatingPointModeALTINTEL, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeFloatingPointModeIEEEINTEL(int targetWidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.FloatingPointModeIEEEINTEL, [targetWidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaxWorkgroupSizeINTEL(int maxxsize, int maxysize, int maxzsize) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaxWorkgroupSizeINTEL, [maxxsize, maxysize, maxzsize]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaxWorkDimINTEL(int maxdimensions) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaxWorkDimINTEL, [maxdimensions]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeNumSIMDWorkitemsINTEL(int vectorwidth) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.NumSIMDWorkitemsINTEL, [vectorwidth]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeSchedulerTargetFmaxMhzINTEL(int targetfmax) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.SchedulerTargetFmaxMhzINTEL, [targetfmax]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeFPFastMathDefault(int targetType, int fastMathMode) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.FPFastMathDefault, [targetType, fastMathMode]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeStreamingInterfaceINTEL(int stallFreeReturn) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.StreamingInterfaceINTEL, [stallFreeReturn]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeRegisterMapInterfaceINTEL(int waitForDoneWrite) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.RegisterMapInterfaceINTEL, [waitForDoneWrite]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeNamedBarrierCountINTEL(int barrierCount) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.NamedBarrierCountINTEL, [barrierCount]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaximumRegistersINTEL(int numberofRegisters) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaximumRegistersINTEL, [numberofRegisters]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeMaximumRegistersIdINTEL(int numberofRegisters) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.MaximumRegistersIdINTEL, [numberofRegisters]);
    public static ParameterizedFlag<ExecutionMode> ExecutionModeNamedMaximumRegistersINTEL(NamedMaximumNumberOfRegisters namedMaximumNumberofRegisters) => new ParameterizedFlag<ExecutionMode>(ExecutionMode.NamedMaximumRegistersINTEL, [(int)namedMaximumNumberofRegisters]);
    public static ParameterizedFlag<Decoration> DecorationSpecId(int specializationConstantID) => new ParameterizedFlag<Decoration>(Decoration.SpecId, [specializationConstantID]);
    public static ParameterizedFlag<Decoration> DecorationArrayStride(int arrayStride) => new ParameterizedFlag<Decoration>(Decoration.ArrayStride, [arrayStride]);
    public static ParameterizedFlag<Decoration> DecorationMatrixStride(int matrixStride) => new ParameterizedFlag<Decoration>(Decoration.MatrixStride, [matrixStride]);
    public static ParameterizedFlag<Decoration> DecorationBuiltIn(BuiltIn builtin0) => new ParameterizedFlag<Decoration>(Decoration.BuiltIn, [(int)builtin0]);
    public static ParameterizedFlag<Decoration> DecorationUniformId(int execution) => new ParameterizedFlag<Decoration>(Decoration.UniformId, [execution]);
    public static ParameterizedFlag<Decoration> DecorationStream(int streamNumber) => new ParameterizedFlag<Decoration>(Decoration.Stream, [streamNumber]);
    public static ParameterizedFlag<Decoration> DecorationLocation(int location) => new ParameterizedFlag<Decoration>(Decoration.Location, [location]);
    public static ParameterizedFlag<Decoration> DecorationComponent(int component) => new ParameterizedFlag<Decoration>(Decoration.Component, [component]);
    public static ParameterizedFlag<Decoration> DecorationIndex(int index) => new ParameterizedFlag<Decoration>(Decoration.Index, [index]);
    public static ParameterizedFlag<Decoration> DecorationBinding(int bindingPoint) => new ParameterizedFlag<Decoration>(Decoration.Binding, [bindingPoint]);
    public static ParameterizedFlag<Decoration> DecorationDescriptorSet(int descriptorSet) => new ParameterizedFlag<Decoration>(Decoration.DescriptorSet, [descriptorSet]);
    public static ParameterizedFlag<Decoration> DecorationOffset(int byteOffset) => new ParameterizedFlag<Decoration>(Decoration.Offset, [byteOffset]);
    public static ParameterizedFlag<Decoration> DecorationXfbBuffer(int xFBBufferNumber) => new ParameterizedFlag<Decoration>(Decoration.XfbBuffer, [xFBBufferNumber]);
    public static ParameterizedFlag<Decoration> DecorationXfbStride(int xFBStride) => new ParameterizedFlag<Decoration>(Decoration.XfbStride, [xFBStride]);
    public static ParameterizedFlag<Decoration> DecorationFuncParamAttr(FunctionParameterAttribute functionParameterAttribute) => new ParameterizedFlag<Decoration>(Decoration.FuncParamAttr, [(int)functionParameterAttribute]);
    public static ParameterizedFlag<Decoration> DecorationFPRoundingMode(FPRoundingMode floatingPointRoundingMode) => new ParameterizedFlag<Decoration>(Decoration.FPRoundingMode, [(int)floatingPointRoundingMode]);
    public static ParameterizedFlag<Decoration> DecorationFPFastMathMode(FPFastMathModeMask fastMathMode) => new ParameterizedFlag<Decoration>(Decoration.FPFastMathMode, [(int)fastMathMode]);
    public static ParameterizedFlag<Decoration> DecorationLinkageAttributes(string name, LinkageType linkageType) => new ParameterizedFlag<Decoration>(Decoration.LinkageAttributes, [..name.AsDisposableLiteralValue().Words, (int)linkageType]);
    public static ParameterizedFlag<Decoration> DecorationInputAttachmentIndex(int attachmentIndex) => new ParameterizedFlag<Decoration>(Decoration.InputAttachmentIndex, [attachmentIndex]);
    public static ParameterizedFlag<Decoration> DecorationAlignment(int alignment) => new ParameterizedFlag<Decoration>(Decoration.Alignment, [alignment]);
    public static ParameterizedFlag<Decoration> DecorationMaxByteOffset(int maxByteOffset) => new ParameterizedFlag<Decoration>(Decoration.MaxByteOffset, [maxByteOffset]);
    public static ParameterizedFlag<Decoration> DecorationAlignmentId(int alignment) => new ParameterizedFlag<Decoration>(Decoration.AlignmentId, [alignment]);
    public static ParameterizedFlag<Decoration> DecorationMaxByteOffsetId(int maxByteOffset) => new ParameterizedFlag<Decoration>(Decoration.MaxByteOffsetId, [maxByteOffset]);
    public static ParameterizedFlag<Decoration> DecorationNodeSharesPayloadLimitsWithAMDX(int payloadType) => new ParameterizedFlag<Decoration>(Decoration.NodeSharesPayloadLimitsWithAMDX, [payloadType]);
    public static ParameterizedFlag<Decoration> DecorationNodeMaxPayloadsAMDX(int maxnumberofpayloads) => new ParameterizedFlag<Decoration>(Decoration.NodeMaxPayloadsAMDX, [maxnumberofpayloads]);
    public static ParameterizedFlag<Decoration> DecorationPayloadNodeNameAMDX(int nodeName) => new ParameterizedFlag<Decoration>(Decoration.PayloadNodeNameAMDX, [nodeName]);
    public static ParameterizedFlag<Decoration> DecorationPayloadNodeBaseIndexAMDX(int baseIndex) => new ParameterizedFlag<Decoration>(Decoration.PayloadNodeBaseIndexAMDX, [baseIndex]);
    public static ParameterizedFlag<Decoration> DecorationPayloadNodeArraySizeAMDX(int arraySize) => new ParameterizedFlag<Decoration>(Decoration.PayloadNodeArraySizeAMDX, [arraySize]);
    public static ParameterizedFlag<Decoration> DecorationSecondaryViewportRelativeNV(int offset) => new ParameterizedFlag<Decoration>(Decoration.SecondaryViewportRelativeNV, [offset]);
    public static ParameterizedFlag<Decoration> DecorationSIMTCallINTEL(int n) => new ParameterizedFlag<Decoration>(Decoration.SIMTCallINTEL, [n]);
    public static ParameterizedFlag<Decoration> DecorationClobberINTEL(string register) => new ParameterizedFlag<Decoration>(Decoration.ClobberINTEL, [..register.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationFuncParamIOKindINTEL(int kind) => new ParameterizedFlag<Decoration>(Decoration.FuncParamIOKindINTEL, [kind]);
    public static ParameterizedFlag<Decoration> DecorationGlobalVariableOffsetINTEL(int offset) => new ParameterizedFlag<Decoration>(Decoration.GlobalVariableOffsetINTEL, [offset]);
    public static ParameterizedFlag<Decoration> DecorationCounterBuffer(int counterBuffer) => new ParameterizedFlag<Decoration>(Decoration.CounterBuffer, [counterBuffer]);
    public static ParameterizedFlag<Decoration> DecorationUserSemantic(string semantic) => new ParameterizedFlag<Decoration>(Decoration.UserSemantic, [..semantic.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationUserTypeGOOGLE(string userType) => new ParameterizedFlag<Decoration>(Decoration.UserTypeGOOGLE, [..userType.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationFunctionRoundingModeINTEL(int targetWidth, FPRoundingMode fPRoundingMode) => new ParameterizedFlag<Decoration>(Decoration.FunctionRoundingModeINTEL, [targetWidth, (int)fPRoundingMode]);
    public static ParameterizedFlag<Decoration> DecorationFunctionDenormModeINTEL(int targetWidth, FPDenormMode fPDenormMode) => new ParameterizedFlag<Decoration>(Decoration.FunctionDenormModeINTEL, [targetWidth, (int)fPDenormMode]);
    public static ParameterizedFlag<Decoration> DecorationMemoryINTEL(string memoryType) => new ParameterizedFlag<Decoration>(Decoration.MemoryINTEL, [..memoryType.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationNumbanksINTEL(int banks) => new ParameterizedFlag<Decoration>(Decoration.NumbanksINTEL, [banks]);
    public static ParameterizedFlag<Decoration> DecorationBankwidthINTEL(int bankWidth) => new ParameterizedFlag<Decoration>(Decoration.BankwidthINTEL, [bankWidth]);
    public static ParameterizedFlag<Decoration> DecorationMaxPrivateCopiesINTEL(int maximumCopies) => new ParameterizedFlag<Decoration>(Decoration.MaxPrivateCopiesINTEL, [maximumCopies]);
    public static ParameterizedFlag<Decoration> DecorationMaxReplicatesINTEL(int maximumReplicates) => new ParameterizedFlag<Decoration>(Decoration.MaxReplicatesINTEL, [maximumReplicates]);
    public static ParameterizedFlag<Decoration> DecorationMergeINTEL(string mergeKey, string mergeType) => new ParameterizedFlag<Decoration>(Decoration.MergeINTEL, [..mergeKey.AsDisposableLiteralValue().Words, ..mergeType.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationBankBitsINTEL(int bankBits) => new ParameterizedFlag<Decoration>(Decoration.BankBitsINTEL, [bankBits]);
    public static ParameterizedFlag<Decoration> DecorationForcePow2DepthINTEL(int forceKey) => new ParameterizedFlag<Decoration>(Decoration.ForcePow2DepthINTEL, [forceKey]);
    public static ParameterizedFlag<Decoration> DecorationStridesizeINTEL(int strideSize) => new ParameterizedFlag<Decoration>(Decoration.StridesizeINTEL, [strideSize]);
    public static ParameterizedFlag<Decoration> DecorationWordsizeINTEL(int wordSize) => new ParameterizedFlag<Decoration>(Decoration.WordsizeINTEL, [wordSize]);
    public static ParameterizedFlag<Decoration> DecorationCacheSizeINTEL(int cacheSizeinbytes) => new ParameterizedFlag<Decoration>(Decoration.CacheSizeINTEL, [cacheSizeinbytes]);
    public static ParameterizedFlag<Decoration> DecorationPrefetchINTEL(int prefetcherSizeinbytes) => new ParameterizedFlag<Decoration>(Decoration.PrefetchINTEL, [prefetcherSizeinbytes]);
    public static ParameterizedFlag<Decoration> DecorationMathOpDSPModeINTEL(int mode, int propagate) => new ParameterizedFlag<Decoration>(Decoration.MathOpDSPModeINTEL, [mode, propagate]);
    public static ParameterizedFlag<Decoration> DecorationAliasScopeINTEL(int aliasingScopesList) => new ParameterizedFlag<Decoration>(Decoration.AliasScopeINTEL, [aliasingScopesList]);
    public static ParameterizedFlag<Decoration> DecorationNoAliasINTEL(int aliasingScopesList) => new ParameterizedFlag<Decoration>(Decoration.NoAliasINTEL, [aliasingScopesList]);
    public static ParameterizedFlag<Decoration> DecorationInitiationIntervalINTEL(int cycles) => new ParameterizedFlag<Decoration>(Decoration.InitiationIntervalINTEL, [cycles]);
    public static ParameterizedFlag<Decoration> DecorationMaxConcurrencyINTEL(int invocations) => new ParameterizedFlag<Decoration>(Decoration.MaxConcurrencyINTEL, [invocations]);
    public static ParameterizedFlag<Decoration> DecorationPipelineEnableINTEL(int enable) => new ParameterizedFlag<Decoration>(Decoration.PipelineEnableINTEL, [enable]);
    public static ParameterizedFlag<Decoration> DecorationBufferLocationINTEL(int bufferLocationID) => new ParameterizedFlag<Decoration>(Decoration.BufferLocationINTEL, [bufferLocationID]);
    public static ParameterizedFlag<Decoration> DecorationIOPipeStorageINTEL(int iOPipeID) => new ParameterizedFlag<Decoration>(Decoration.IOPipeStorageINTEL, [iOPipeID]);
    public static ParameterizedFlag<Decoration> DecorationFunctionFloatingPointModeINTEL(int targetWidth, FPOperationMode fPOperationMode) => new ParameterizedFlag<Decoration>(Decoration.FunctionFloatingPointModeINTEL, [targetWidth, (int)fPOperationMode]);
    public static ParameterizedFlag<Decoration> DecorationFPMaxErrorDecorationINTEL(LiteralFloat maxError) => new ParameterizedFlag<Decoration>(Decoration.FPMaxErrorDecorationINTEL, [(int)maxError]);
    public static ParameterizedFlag<Decoration> DecorationLatencyControlLabelINTEL(int latencyLabel) => new ParameterizedFlag<Decoration>(Decoration.LatencyControlLabelINTEL, [latencyLabel]);
    public static ParameterizedFlag<Decoration> DecorationLatencyControlConstraintINTEL(int relativeTo, int controlType, int relativeCycle) => new ParameterizedFlag<Decoration>(Decoration.LatencyControlConstraintINTEL, [relativeTo, controlType, relativeCycle]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceAddressWidthINTEL(int addressWidth) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceAddressWidthINTEL, [addressWidth]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceDataWidthINTEL(int dataWidth) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceDataWidthINTEL, [dataWidth]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceLatencyINTEL(int latency) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceLatencyINTEL, [latency]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceReadWriteModeINTEL(AccessQualifier readWriteMode) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceReadWriteModeINTEL, [(int)readWriteMode]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceMaxBurstINTEL(int maxBurstCount) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceMaxBurstINTEL, [maxBurstCount]);
    public static ParameterizedFlag<Decoration> DecorationMMHostInterfaceWaitRequestINTEL(int waitrequest) => new ParameterizedFlag<Decoration>(Decoration.MMHostInterfaceWaitRequestINTEL, [waitrequest]);
    public static ParameterizedFlag<Decoration> DecorationHostAccessINTEL(HostAccessQualifier access, string name) => new ParameterizedFlag<Decoration>(Decoration.HostAccessINTEL, [(int)access, ..name.AsDisposableLiteralValue().Words]);
    public static ParameterizedFlag<Decoration> DecorationInitModeINTEL(InitializationModeQualifier trigger) => new ParameterizedFlag<Decoration>(Decoration.InitModeINTEL, [(int)trigger]);
    public static ParameterizedFlag<Decoration> DecorationImplementInRegisterMapINTEL(int parameter0) => new ParameterizedFlag<Decoration>(Decoration.ImplementInRegisterMapINTEL, [parameter0]);
    public static ParameterizedFlag<Decoration> DecorationCacheControlLoadINTEL(int cacheLevel, LoadCacheControl cacheControl) => new ParameterizedFlag<Decoration>(Decoration.CacheControlLoadINTEL, [cacheLevel, (int)cacheControl]);
    public static ParameterizedFlag<Decoration> DecorationCacheControlStoreINTEL(int cacheLevel, StoreCacheControl cacheControl) => new ParameterizedFlag<Decoration>(Decoration.CacheControlStoreINTEL, [cacheLevel, (int)cacheControl]);
    public static ParameterizedFlag<TensorAddressingOperandsMask> TensorAddressingOperandsTensorView(int idRef0) => new ParameterizedFlag<TensorAddressingOperandsMask>(TensorAddressingOperandsMask.TensorView, [idRef0]);
    public static ParameterizedFlag<TensorAddressingOperandsMask> TensorAddressingOperandsDecodeFunc(int idRef0) => new ParameterizedFlag<TensorAddressingOperandsMask>(TensorAddressingOperandsMask.DecodeFunc, [idRef0]);
}