{
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    "name": "SDSL",
    "patterns": [
        {
            "include": "#comments"
        },
        {
            "include": "#preprocessors"
        },
        {
            "include": "#sdsl-declarations"
        }
    ],
    "repository": {
        "sdsl-declarations": {
            "patterns": [
                {
                    "include": "#shader-elements"
                }
            ]
        },
        "preprocessors": {
            "patterns": [
                {
                    "match": "^[ \t]*(#define)[ \t]+([a-zA-Z_][a-zA-Z0-9_]*)[ \t]*\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        }
                    }
                },
                {
                    "match": "^[ \t]*(#define)[ \t]+([a-zA-Z_][a-zA-Z0-9_]*)([ \t]+([a-zA-Z0-9_.]+))[ \t]*\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        },
                        "3": {
                            "patterns": [
                                {
                                    "include": "#literals"
                                }
                            ]
                        }
                    }
                },
                {
                    "match": "^[ \t]*(#define)[ \t]+([a-zA-Z_][a-zA-Z0-9_]*[ \t]*\\(.?*\\))([ \t]+([a-zA-Z0-9_.]+[ \t]*\\(.?*\\)))[ \t]*\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        },
                        "3": {
                            "name": "constant.preprocessor.sdsl"
                        }
                    }
                },
                {
                    "match": "^[ \t]*(#ifdef|#ifndef)[ \t]+([a-zA-Z0-9_]+)[ \t]*\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        },
                        "3": {
                            "name": "constant.preprocessor.sdsl"
                        }
                    }
                },
                {
                    "match": "^[ \t]*(#endif|#else)[ \t]*\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        },
                        "3": {
                            "name": "constant.preprocessor.sdsl"
                        }
                    }
                },
                {
                    "match": "^[ \t]*(#if).*?\n",
                    "captures": {
                        "1": {
                            "name": "keyword.preprocessor.sdsl"
                        },
                        "2": {
                            "name": "variable.preprocessor.sdsl"
                        },
                        "3": {
                            "name": "constant.preprocessor.sdsl"
                        }
                    }
                }
            ]
        },
        "comments": {
            "patterns": [
                {
                    "name": "comment.block.sdsl",
                    "begin": "/\\*",
                    "beginCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.sdsl"
                        }
                    },
                    "end": "\\*/",
                    "endCaptures": {
                        "0": {
                            "name": "punctuation.definition.comment.sdsl"
                        }
                    }
                },
                {
                    "name": "comment.block.documentation",
                    "begin": "(^\\s+)?(?=///)",
                    "end": "(?=$)",
                    "beginCaptures": {
                        "2": {
                            "name": "punctuation.whitespace.comment.leading.sdsl"
                        }
                    }
                },
                {
                    "begin": "(^\\s+)?(?=//)",
                    "beginCaptures": {
                        "1": {
                            "name": "punctuation.whitespace.comment.leading.sdsl"
                        }
                    },
                    "end": "(?=$)",
                    "patterns": [
                        {
                            "name": "comment.block.documentation.sdsl",
                            "begin": "(?<!/)///(?!/)",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.sdsl"
                                }
                            },
                            "end": "(?=$)",
                            "patterns": [
                                {
                                    "include": "#xml-doc-comment"
                                }
                            ]
                        },
                        {
                            "name": "comment.line.double-slash.sdsl",
                            "begin": "(?<!/)//(?:(?!/)|(?=//))",
                            "beginCaptures": {
                                "0": {
                                    "name": "punctuation.definition.comment.sdsl"
                                }
                            },
                            "end": "(?=$)"
                        }
                    ]
                }
            ]
        },
        "shader-elements": {
            "patterns": [
                {
                    "name" : "struct.declaration.sdsl",
                    "begin": "\\b(struct)\\s+([a-zA-Z]\\w*)\\s*\\{",
                    "beginCaptures": {
                        "1": {
                            "name": "storage.type"
                        },
                        "2": {
                            "name": "entity.name.type"
                        }
                    },
                    "end": "\\}\\b",
                    "patterns": [
                        {"include": "#attribute"},
                        {"include": "#struct-fields"}
                    ]
                }
            ]
        },
        "struct-fields" : {
            "patterns": [
                {"include": "#attribute"},
                {
                    "match": "\\b((stage)\\s+)?([a-zA-Z_]\\w*)\\s+([a-zA-Z_]\\w*)\\s*(\\[\\s*(.*\\s*)?\\]\\s*)?;",
                    "captures": {
                        "2" : {"name" : "storage.modifier"},
                        "3" : {"name" : "entity.name.type"},
                        "4" : {"name" : "variable.name"},
                        "6" : {
                            "patterns": [{"include": "#literals"}]
                        }
                    }
                },
                {
                    "match": "\\b((stage)\\s+)?([a-zA-Z_]\\w*)(\\s*\\[\\s*(.*\\s*)?\\])?\\s+([a-zA-Z_]\\w*)\\s*;",
                    "captures": {
                        "2" : {"name" : "storage.modifier"},
                        "3" : {"name" : "entity.name.type"},
                        "4" : {
                            "patterns": [{"include": "#literals"}]
                        },
                        "6" : {"name" : "variable.name"}
                    }
                }
            ]
        },
        "attribute": {
            "name": "meta.attribute.sdsl",
            "begin": "\\[",
            "end": "\\]",
            "patterns": [
                {
                    "include": "#method-call"
                },
                {
                    "name": "entity.other.attribute-name",
                    "match": "[a-zA-Z_]\\w*\\b"
                }
            ]
        },
        "literals": {
            "patterns": [
                {
                    "patterns": [
                        {
                            "name": "constant.numeric.float",
                            "match": "\\b\\d+\\.\\d*\\b"
                        },
                        {
                            "name": "constant.numeric.integer",
                            "match": "\\b\\d+\\b"
                        },
                        {
                            "name": "constant.numeric.float",
                            "match": "\\b\\.\\d+\\b"
                        },
                        {
                            "name": "string.quoted.double",
                            "begin": "\"",
                            "end": "\"",
                            "patterns": [
                                {
                                    "name": "constant.character.escape",
                                    "match": "\\\\."
                                }
                            ]
                        },
                        {
                            "include": "#method-call"
                        },
                        {
                            "name": "variable.name",
                            "match": "\\b[a-zA-Z_]\\w*\\b"
                        }
                    ]
                }
            ]
        },
        "method-call": {
            "name": "meta.function-call",
            "begin": "\\b[a-zA-Z_]\\w*\\s*\\(",
            "beginCaptures": {
                "0": {
                    "name": "entity.name.function"
                }
            },
            "end": "\\)",
            "patterns": [
                {
                    "include": "#literals"
                }
            ]
        }
    },
    "scopeName": "source.sdsl"
}